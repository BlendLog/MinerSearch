//#define BETA

using Microsoft.Win32;
using Microsoft.Win32.TaskScheduler;
using MinerSearch.Properties;
using NetFwTypeLib;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Principal;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace MinerSearch
{
    public class MinerSearch
    {
        int[] _PortList = new[]
        {
            1111,
            1112,
            9999,
            14444,
            14433,
            6666,
            16666,
            6633,
            16633,
            4444,
            14444,
            3333,
            13333,
            7777,
            5555,
            9980
        };

        readonly string[] _nvdlls = new[]
        {
            "nvcompiler.dll",
            "nvopencl.dll",
            "nvfatbinaryLoader.dll",
            "nvapi64.dll",
            "OpenCL.dll"
        };

        List<string> obfStr2 = new List<string>() {
Program.drive_letter + Bfs.Create("TyfqfyFYyrpnCHbd20yG/y82PIbp32uXpZvrMpBnZac=",
            new byte[] {0x7d,0x49,0x31,0x6f,0x69,0x35,0x49,0xa7,0x27,0x2d,0x18,0x0c,0x68,0x1f,0x22,0xc7,0x47,0x49,0x10,0x34,0x73,0x14,0xc2,0xed,0x18,0x2c,0x7a,0x0a,0x37,0x60,0x24,0xb7},
            new byte[] {0x9d,0xa2,0xac,0xb7,0x35,0x3e,0xe3,0x17,0xd3,0x41,0xfd,0x47,0x53,0xfa,0xf7,0x29}), //:\ProgramData\Microsoft\win.exe
Program.drive_letter + Bfs.Create("66tCZkZw2g6lBKgNLYNOA25tmejh8//H1gEqZ6WiGK+GInSRZmMHou32XVwiYxZ9",
            new byte[] {0x4c,0x3e,0xdd,0x4d,0x73,0x31,0x28,0xdd,0xf7,0x69,0x1b,0xa6,0x95,0xf8,0x18,0x8b,0x68,0xaf,0x0d,0x36,0x68,0x9e,0xdf,0x01,0x6a,0xb0,0x0c,0x56,0xe4,0xca,0xa4,0x52},
            new byte[] {0xdd,0xd3,0x9d,0xad,0x88,0x0d,0xec,0xf3,0x42,0x64,0xd9,0x8d,0x08,0xf3,0x80,0x3b}), //:\Program Files\Google\Chrome\updater.exe
Program.drive_letter + Bfs.Create("GLYGT5Jw2V89+ZVYWpzi8T8hxECV4O4PTVO2rh+EGJusDZR5BZ3M3oAuPfq3dUlg",
            new byte[] {0xdf,0x3d,0xad,0x79,0xd3,0xa3,0x9f,0xf3,0xa4,0xc2,0x0c,0xfd,0x3d,0x55,0x2c,0x3c,0x36,0x06,0x35,0x0f,0xe2,0xea,0x1a,0xc6,0xc1,0x0e,0x39,0x24,0x46,0x2d,0xda,0x76},
            new byte[] {0xa8,0xf3,0x2c,0x6e,0xe5,0x28,0xe6,0x69,0x4e,0x5b,0xc3,0xb7,0x7d,0xe3,0xcc,0x8a}), //:\ProgramData\Google\Chrome\updater.exe
Program.drive_letter + Bfs.Create("0gay2D1xWkqtZlT+NBnj8YpF3J0RE9nmGASLvYli1bo=",
            new byte[] {0xf9,0x1f,0xc4,0x10,0xa3,0x35,0x63,0x86,0x0c,0x80,0x3f,0x2d,0x20,0x00,0x24,0x57,0xbb,0xb6,0xc3,0x27,0x51,0x5a,0xd1,0xd2,0x03,0x6f,0x28,0x42,0xca,0x54,0xf7,0x44},
            new byte[] {0x64,0xa0,0x0c,0xd4,0x6e,0x14,0x10,0xf4,0x76,0x69,0x89,0xb5,0x44,0x61,0x8c,0x60}), //:\ProgramData\RDPWinst.exe
Program.drive_letter + Bfs.Create("+Y5QTuIh5qOYWtRbCG4k6UJ0t/CYasKv/rMOf1EEhJPY6QKfCPUQwfT2VSNiP0Zh",
            new byte[] {0x24,0x1b,0x4d,0xe0,0xde,0x42,0xf1,0x4e,0x4f,0xfe,0x72,0xf8,0x31,0x76,0x67,0xca,0xf3,0x2a,0xfe,0xb9,0x11,0xf7,0x3b,0xb0,0x51,0x1a,0x7d,0x17,0xfa,0x79,0xf0,0xfc},
            new byte[] {0x1a,0x92,0x55,0x9a,0x25,0x17,0x54,0x4c,0xbd,0x6a,0x54,0xd0,0x53,0x42,0x50,0x45}), //:\ProgramData\ReaItekHD\taskhost.exe
Program.drive_letter + Bfs.Create("J8kRJnFA3nnBo/rKIUqJ3+/++XqhSsIfhrMA6i8DHfuHJtdj7wGX8msRIlUFv5Rp",
            new byte[] {0x34,0x6d,0xfd,0xf9,0x0a,0xe8,0x64,0x30,0x6b,0xc2,0xff,0x53,0xb2,0x5f,0x9b,0x30,0xe0,0x06,0xd6,0xb0,0x6c,0x38,0x4f,0xa2,0xba,0x3a,0xe9,0x91,0x05,0xbc,0x81,0x72},
            new byte[] {0x96,0x1d,0x1f,0x09,0x7f,0x00,0x41,0x8a,0x2c,0x0e,0x1d,0xfa,0x09,0x6a,0x7b,0xcf}), //:\ProgramData\ReaItekHD\taskhostw.exe
Program.drive_letter + Bfs.Create("ABRIYZZuHYNSmBuTxrrAa6R/IIdJSwteRMkWllj8VpXV6//zcYZAsfO1GAKkOMqy",
            new byte[] {0xb8,0x90,0xc7,0x4b,0xa5,0x1c,0xa2,0x19,0xac,0xed,0x71,0xcc,0x56,0x8a,0xfe,0xb5,0x22,0x25,0x82,0x53,0xb0,0xb8,0xde,0xe8,0x2a,0xe7,0x56,0x34,0x4f,0x4f,0x8b,0x1e},
            new byte[] {0x25,0xe0,0xf8,0x67,0xb3,0x24,0x7b,0x43,0x47,0xf3,0xd3,0x50,0x5d,0x80,0xcc,0xc5}), //:\ProgramData\RealtekHD\taskhost.exe
Program.drive_letter + Bfs.Create("CPE5ewV5ZmeJ3A4jsUsnq/mKVIB3CW+hFEXvj9/m2VzrDQVmSUbbsW85kzpuxFgk",
            new byte[] {0x21,0x05,0x58,0x73,0x6c,0x56,0xc4,0xdd,0x8c,0x6f,0x34,0x32,0x79,0xb5,0x2d,0x01,0xfe,0xee,0x04,0x7e,0x85,0xb1,0x28,0x46,0xa9,0x25,0x20,0xaa,0x55,0x80,0xec,0x43},
            new byte[] {0xa6,0x4d,0x94,0xdc,0x29,0x02,0x21,0xf6,0x06,0x3a,0x45,0x21,0x0c,0xba,0xca,0x83}), //:\ProgramData\RealtekHD\taskhostw.exe
Program.drive_letter + Bfs.Create("N7814T+lv2Hf3IneHCwc4cmmvH4YSg98t+b+4m0RK1TgqElteOeFY6cRVq/tkrgp",
            new byte[] {0x73,0x9c,0x20,0x3e,0x7f,0x73,0x8d,0x8a,0xa6,0xe1,0x3b,0x83,0xc5,0xaf,0xd5,0xa1,0x7b,0x3d,0x20,0x22,0x5a,0xaf,0x3c,0x93,0xb8,0xd5,0x7d,0xd4,0xc2,0x02,0x2a,0xaf},
            new byte[] {0xce,0x65,0x11,0xc8,0x82,0x9d,0xf5,0x54,0xf1,0xc9,0xf0,0xb7,0x2c,0x72,0x43,0x7b}), //:\ProgramData\Windows Tasks Service\winserv.exe
Program.drive_letter + Bfs.Create("OPGyb5Ip21fJmvhCqxIXhLk0xiz742My0TbiDexepbZMlGNkgAleYGHQhrqwMalI",
            new byte[] {0x8f,0xc6,0x19,0x26,0xab,0xfb,0x56,0xe4,0x41,0x1f,0x22,0x3c,0x78,0xdf,0x77,0x1d,0x2b,0xed,0x0c,0x37,0xc7,0x1d,0x9f,0x25,0xcf,0x56,0x59,0x5d,0x7f,0x67,0xb5,0xee},
            new byte[] {0xc2,0xed,0xea,0xdb,0x04,0xef,0xc6,0x80,0xb0,0xe6,0xbb,0x26,0x54,0xa5,0xb0,0x09}), //:\ProgramData\WindowsTask\AMD.exe
Program.drive_letter + Bfs.Create("0aGatolBkHIXHGmFL/OuKAMZ2ZkMHgGb5nwGXwju+0zDxG/0Wl9o9dETSFtETlt4",
            new byte[] {0x47,0xd4,0x82,0x93,0xad,0x5d,0x99,0xf2,0x23,0x0e,0x48,0x88,0xa3,0x54,0xa7,0x40,0xd6,0x8c,0x29,0xec,0xe4,0x4d,0x46,0xfb,0x11,0x6c,0x69,0x29,0xa4,0xbc,0x08,0x16},
            new byte[] {0x0a,0x28,0x4c,0xab,0xda,0x2f,0x36,0x17,0xa6,0xae,0xb1,0x44,0xf9,0x3c,0xbb,0x04}), //:\ProgramData\WindowsTask\AppModule.exe
Program.drive_letter + Bfs.Create("/sHbVN99pD5PQx06RUHKwH+Kmte+n8gcnSnLNvgrnSGUj8JeoqB7bs3dxGfV66xu",
            new byte[] {0x13,0xf0,0x02,0xf9,0x04,0x7d,0x48,0xf3,0x5b,0x38,0xe5,0xd4,0xee,0xb4,0x54,0x28,0x56,0x43,0x30,0x6a,0x9d,0xfb,0x79,0x5e,0xe6,0x9d,0x5c,0x92,0x68,0x2b,0xbe,0x3d},
            new byte[] {0x1c,0x1a,0xf4,0xc6,0x92,0x9c,0x9f,0xb9,0xd3,0x19,0x68,0xb5,0x80,0x2e,0xfd,0x22}), //:\ProgramData\WindowsTask\audiodg.exe
Program.drive_letter + Bfs.Create("OK9HXEl55o5J/qn73212FhD1/TSoMTBLcsQTEhWbBR0+sp+yuX/kgOsir9s8KfOv",
            new byte[] {0xde,0x59,0xfd,0xc5,0xc8,0xe9,0xa2,0x99,0xb0,0xe7,0xd5,0x93,0xe8,0xe9,0xee,0xc1,0xdd,0x5e,0x51,0xdc,0x29,0x98,0x3b,0xff,0xf2,0xa4,0xde,0x79,0xdb,0x8e,0x0b,0x0b},
            new byte[] {0xf1,0xff,0x76,0x3d,0xef,0x21,0x27,0x44,0x45,0xf4,0x2f,0xaf,0xef,0x8d,0x56,0xe6}), //:\ProgramData\WindowsTask\MicrosoftHost.exe
Program.drive_letter + Bfs.Create("axzEDR4qXMUWtOM+caAgwC/g0Cl1Or1olVWwoaj2l8w=",
            new byte[] {0x85,0xc7,0x42,0x84,0x82,0x6c,0x31,0x16,0x4c,0x33,0x19,0x5e,0x98,0x4c,0xb4,0xcb,0x6c,0xf1,0x44,0x59,0x57,0x1f,0x7f,0x47,0x57,0x1d,0xb2,0x92,0xa4,0x7d,0xb2,0xaa},
            new byte[] {0xab,0xcb,0x49,0x22,0x37,0x8f,0xfc,0xdc,0x5e,0x46,0xb1,0x77,0x11,0xf7,0xf4,0x63}), //:\Windows\SysWOW64\unsecapp.exe
Program.drive_letter + Bfs.Create("q11U3aP7XhNNvjyR5N1WGc48JXkYBX9svJrSjPsBp1OdbnJAPHWTyA2EkBofZ5Ix",
            new byte[] {0xd2,0xb2,0x3a,0x5c,0xa5,0x4f,0x52,0x95,0x19,0xfe,0xc9,0xb6,0xf5,0x6f,0x75,0x88,0x53,0x8f,0x97,0xbe,0x91,0x6d,0x99,0x8a,0xcc,0xc4,0x22,0xee,0x4d,0x36,0xfe,0x98},
            new byte[] {0x72,0x31,0x20,0x14,0x43,0x8f,0x9b,0x80,0xad,0xcf,0x62,0x8b,0xc5,0x83,0x05,0x50}), //:\ProgramData\Timeupper\HVPIO.exe
};


        string[] obfStr7 = new string[] {
Bfs.Create("SnR8GKx5gGfDaU/43caVDRofZNAia6qK6+RCQ/HPm6zoa+HlYsfs8AV3LYz+43Ke8oppSW+vxPxqQIJiBoPbPA==",
            new byte[] {0x25,0x79,0x66,0x59,0x1a,0xbc,0x30,0xee,0x89,0xa2,0x2e,0x24,0xae,0x67,0xdd,0x5b,0xb3,0xa1,0x48,0xf6,0x10,0x80,0xb6,0xa8,0xb1,0x1d,0x30,0xdf,0xf4,0xfd,0x63,0xe1},
            new byte[] {0x80,0xc6,0xaa,0x7c,0x35,0x70,0x32,0xeb,0x82,0xde,0xf8,0xa7,0x79,0xe6,0xf9,0x9b}), //SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
Bfs.Create("7R8z9jjTxuA5X9KE1g6AOxAzR4dZG/oVxgI/1ZiH9GqG3ohzfbSZ6l8n8YVrUYyKObfQ3KHBozpAARFp1P/ODQ==",
            new byte[] {0x1b,0x52,0x59,0x9a,0x1d,0x27,0x9e,0x00,0xca,0xa2,0x50,0x95,0x46,0x23,0xd9,0xc8,0xc6,0x4c,0x87,0xb2,0x9d,0xf5,0xc9,0xa6,0x6d,0x56,0xc4,0xfe,0xb2,0xc3,0x32,0x9b},
            new byte[] {0x38,0x88,0x72,0xff,0x23,0x51,0xf4,0xde,0xf5,0x89,0x93,0xab,0xa4,0x52,0xb2,0x9f}), //Software\Microsoft\Windows\CurrentVersion\Policies\Explorer
Bfs.Create("9Qo1oLllVClK9ys8N9XS42DtGDiVYATq55A2T7rw+SAPOib5s8FQSLsEQ1Pg/rae0uT8Mpq7rYXzZkXm9/9zWRiGHkd4AjsUxK9qbb14+7Q=",
            new byte[] {0x42,0x20,0x6c,0x60,0x2b,0x04,0xf8,0xe7,0x38,0xe3,0x2b,0x0d,0xcf,0xb6,0xdc,0x50,0xd6,0x2b,0x69,0xec,0x9e,0xd4,0x27,0x08,0x0d,0x54,0xd3,0x3b,0x59,0x7e,0xaf,0xf6},
            new byte[] {0x28,0x71,0x01,0xb6,0x6c,0x89,0x2c,0xc7,0x1d,0x42,0x4c,0x8e,0xc1,0xfe,0xe0,0x37}), //Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun
Bfs.Create("qx7RjBuoJCLHesZQeP2ZA+ZJqhQvKHK9UXw6T66kgXPQzYQOoF8OvXpbl+MIbpeUqrMzBunwsoU4xqTCW8TH0g==",
            new byte[] {0x83,0x6e,0x71,0xbc,0x7c,0x64,0xbf,0x43,0xdd,0x94,0xf3,0x4e,0xf5,0xf5,0xa3,0xcd,0x57,0xdc,0xcf,0x21,0x8e,0x33,0x84,0x0f,0x28,0x59,0xde,0x3f,0xa5,0x27,0x5a,0xb5},
            new byte[] {0x77,0x64,0x6c,0x51,0x03,0xf7,0x5d,0xd6,0xb5,0xda,0x82,0xe5,0x4d,0x5d,0x05,0x68}), //SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows
Bfs.Create("6wzHyuwh2wideQmg2lBbKQ9tfC53AaM3c8++c86/lQ5qH4C/hnFx9owyfTPOjB9jsQMwJN4A6ausV2+S1d0Xaw==",
            new byte[] {0x97,0xa8,0xa9,0x8f,0x41,0x47,0xd8,0x5d,0x32,0xc6,0x6c,0x9e,0xe7,0xe5,0x39,0xdf,0xee,0x6e,0x4e,0x97,0x2c,0x3e,0xc1,0xbd,0xcd,0xd7,0x02,0xf9,0x9c,0x28,0x09,0x0b},
            new byte[] {0x64,0xe6,0x92,0xee,0xf8,0x8b,0x52,0x79,0xe5,0xb4,0x35,0x1e,0x7e,0x56,0x90,0xc3}), //[!] Cannot open HKLM\...\CurrentVersion\Windows:
Bfs.Create("8aYqxmDoco3W184qfik/xmIxKeMRq9ZjpM4uQMNTWbVsSGiNWg9Gc44nYJQCq3U/",
            new byte[] {0x47,0x04,0xf7,0x83,0xfe,0xeb,0x1f,0x0b,0x80,0x4a,0xca,0x6b,0x46,0x88,0xe2,0x88,0x13,0x44,0x57,0x00,0xf4,0xff,0x70,0xe2,0x61,0x56,0xaf,0x5f,0x51,0x3d,0x72,0x67},
            new byte[] {0x5a,0x16,0xae,0x56,0x0d,0xee,0x9a,0xe2,0xf9,0x18,0x52,0x57,0x0e,0x05,0x36,0xc8}), //Software\Microsoft\Windows\CurrentVersion\Run
Bfs.Create("rz2Zn+OPJJ198JRnZ3G+vBwApnPPw6Ck6U/lzmwEgFNqKaVG1f0NWLXHJANk0d0Fs22dJ8JT9DqijCBJOV9eWQ==",
            new byte[] {0xc6,0x5e,0x19,0x39,0x97,0x2e,0x49,0x20,0x5e,0xdc,0x7b,0x79,0xfb,0xa7,0xf5,0x9e,0x1a,0x48,0x9d,0xf9,0xeb,0x9f,0x4c,0x7c,0x69,0x0b,0x9b,0x22,0x1b,0x54,0x50,0xb2},
            new byte[] {0xbc,0x4f,0xa1,0xd6,0x38,0xf1,0x8e,0xcb,0xdd,0x15,0xe6,0xd9,0xa6,0x39,0x22,0x2a}), //HKLM\Software\Policies\Microsoft\Windows Defender\Exclusions
Bfs.Create("HPltGU85tuwfjLOTTGJ6x+RPF+x7lUy+bJ8rraRhLEzWmZIGaspwFV5uf71XGlSTMzFiy5fb1GgY8bc7h8efpQ==",
            new byte[] {0x91,0xa6,0xa8,0x81,0x2e,0x34,0xad,0x50,0x6e,0xc3,0x2f,0x84,0xca,0x2f,0x00,0x59,0x57,0xc8,0x09,0xa7,0xb3,0xc4,0x2e,0x6e,0x3d,0xc0,0x82,0x34,0x9a,0xc4,0xa8,0x33},
            new byte[] {0x32,0x12,0x3f,0xae,0x9c,0x86,0x91,0x86,0xbc,0xe3,0x1d,0xbd,0xb8,0xb1,0xa5,0x05}), //Software\Policies\Microsoft\Windows Defender\Exclusions
Bfs.Create("jlMJQe/JOenx517sDYZCT42HxJEoGn645C4pCJX9tEneZCji0L/S4YBzJZymmeMcI4qvp64VFFPO6XqF0EPh6Q==",
            new byte[] {0x34,0x5c,0xd9,0x74,0xd8,0xd2,0xcb,0x75,0xbb,0xc7,0xf4,0xad,0x5a,0xb1,0xf1,0x13,0xec,0xda,0x24,0x0a,0xc5,0xba,0x91,0x20,0x52,0x5f,0x5f,0xad,0x25,0x0e,0x3c,0xf7},
            new byte[] {0x02,0x59,0xbe,0xf9,0xc2,0xac,0x27,0xf0,0xef,0x35,0x5c,0xe1,0x2c,0x4c,0x5b,0xa7}), //Software\Policies\Microsoft\Windows Defender\Exclusions\Paths
Bfs.Create("pRugbsQ8KmApvTanCM2eJQRI0bTXGqJbHrGPUlL0BTgA7fNbWiHKmn5wDpLT2aeKrB4lPqqS+8p/UZEbmU2NNpaULhaIKBRt15Sifx4jVCI=",
            new byte[] {0x2b,0x9a,0x47,0x00,0xa2,0xcb,0xc3,0xcc,0x6a,0xf3,0x67,0x30,0xe2,0xfd,0x33,0x4f,0x2d,0x1b,0xa8,0x6a,0xfb,0xc7,0x53,0xbb,0x9e,0x57,0x60,0x01,0xe0,0x2d,0x88,0xae},
            new byte[] {0x22,0x05,0xc1,0xf1,0xd8,0x96,0xcf,0xfe,0x5e,0x67,0xb6,0x16,0xff,0x1b,0x29,0x8e}), //Software\Policies\Microsoft\Windows Defender\Exclusions\Processes
Bfs.Create("wsx2gX3uGOSRqiSjnLXftmc5Ae3HHTmSUTNZb2YFZhgvODZdWZS7rn/O6hASfE+bBa3CjkiEyEdwFFEOkJXcew==",
            new byte[] {0x2a,0x67,0x15,0x9e,0xda,0xcd,0x31,0x36,0xc6,0x05,0x46,0xf8,0x93,0x58,0xfc,0x44,0x11,0xa6,0x33,0xb9,0x86,0x3c,0x81,0x5e,0xec,0xe0,0x83,0x8a,0x86,0x41,0x65,0x7b},
            new byte[] {0xee,0x54,0x92,0x3e,0xeb,0xe1,0xcc,0xa6,0x8d,0x42,0xb8,0x42,0xff,0x6c,0x7b,0xb4}), //[!] Cannot open HKLM\...\Windows Defender\Exclusions:
Bfs.Create("b2Ax1GPBt+PbYAz5xxiFgiSVboq7lspUZvLjhJ0yO5THxQ4/yEWJrGMDjLmaiKWicK5a4WuTmI8WhC1pn3mH+Q==",
            new byte[] {0xec,0x2b,0x91,0x37,0x21,0xab,0x17,0x7c,0xf8,0xdb,0x7d,0x4e,0xe1,0x81,0xef,0xbc,0xf2,0x50,0x94,0x72,0x6e,0xf7,0x42,0x16,0x32,0x22,0x58,0x6b,0x16,0x7e,0x1a,0xb2},
            new byte[] {0xc3,0x11,0x46,0xd8,0x72,0x38,0x87,0xd0,0x88,0xb8,0x0a,0xf2,0x38,0x4c,0xdd,0x14}), //SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run
Program.drive_letter + Bfs.Create("Ney6nchQc4KUqqt0SOReKajas7TP3VzlrldfNm08a6EDTgpalxvz5f8mihdt7R3X",
            new byte[] {0x0f,0x68,0x9f,0x7f,0x46,0xd2,0x68,0x16,0xf0,0xdf,0x9e,0xf2,0x59,0x84,0x48,0x33,0x67,0x9c,0x4d,0xe9,0x29,0x3d,0x5a,0x0c,0x2f,0x84,0x23,0xef,0x46,0x6d,0x77,0x65},
            new byte[] {0xec,0xb8,0x52,0x78,0xc7,0xfd,0xc4,0xc0,0x5d,0x02,0x05,0x57,0xc2,0xfd,0x3f,0x62}), //:\Windows\System32\WindowsPowerShell\v1.0
};



        List<HashedString> hStrings = new List<HashedString>() {
            new HashedString("a2883d9faa219af692c35404e8c5c05a",19), //codeload.github.com
            new HashedString("5fb3419335f5e5131ab3fc22d06ad195",20), //support.kaspersky.ru
            new HashedString("4bb1cae5c94216ccc7e666d60db2fa40",12), //kaspersky.ru
            new HashedString("83b6a29ee489bf3e976824b763c212e9",14), //virusinfo.info
            new HashedString("0282e441b801ef6fd6712b60b907417c",22), //forum.kasperskyclub.ru
            new HashedString("4360f8ffd51b17b8bc94745c4a26ef2c",13), //cyberforum.ru
            new HashedString("e752141e6b76cf60e0bf9f850654d46b",12), //soft-file.ru
            new HashedString("23c807844e8c9c0af34a82cc145b04b2",20), //360totalsecurity.com
            new HashedString("bd25a074d01c2eeb74d8563a09f9ebf6",12), //cezurity.com
            new HashedString("1a01fc7cc8de2fa07c52183572f06ac8",15), //www.dropbox.com
            new HashedString("6319434ad50ad9ec528bc21a6b2e9694",13), //193.228.54.23
            new HashedString("39cf9beb22c318b315fad9d0d5caa105",13), //spec-komp.com
            new HashedString("44d93a0928689480852de2b3d913a0bf",7), //eset.ua
            new HashedString("545f4178fd14d0a0fdacc18b68ac6a59",18), //regist.safezone.cc
            new HashedString("3469d5aaf70576a92d44eff48cbf9197",13), //programki.net
            new HashedString("09cf5cb0e321ef92ba384fddf03b215b",11), //safezone.cc
            new HashedString("2f814f460634c256b37b3b827abbf81d",16), //www.esetnod32.ru
            new HashedString("54cc7b8155fe3c550153cb8f70214343",12), //www.comss.ru
            new HashedString("460049e8266ca5270cf042506cc2e8eb",16), //forum.oszone.net
            new HashedString("a6891c5c195728b0c75bb10a9d3660db",10), //blog-pc.ru
            new HashedString("6c366a99be85761e88558f342a61b2c4",12), //securrity.ru
            new HashedString("4e42a4a95cf99a3d088efba6f84068c4",10), //norton.com
            new HashedString("41115f938d9471e588c43523ba7fb360",10), //vellisa.ru
            new HashedString("84b419681661cc59155b795e0ca7edf9",20), //download-software.ru
            new HashedString("b4de3925f3057e88a76809a1cf25abe5",15), //drweb-cureit.ru
            new HashedString("133dbe014f37d266a7863415cec81a4f",13), //softpacket.ru
            new HashedString("a2c665f4f9d1b72b6cf88bf0ec3de52a",17), //www.kaspersky.com
            new HashedString("80b73c20690f51646fecf5bedd00f14e",12), //www.avast.ua
            new HashedString("5fa4d0d3dc665c270e1d8f4f36742398",12), //www.avast.ru
            new HashedString("34c51c2dd1fa286e2665ed157dec0601",9), //zillya.ua
            new HashedString("626575b255ca41a9b3e7e38b229e49c7",11), //safezone.ua
            new HashedString("7d2500fc0c1b67428aac870cad7e5834",12), //vms.drweb.ru
            new HashedString("91c394760272fc16c952bdba553d3ea6",12), //www.drweb.ua
            new HashedString("b8d20b5201f66f17af21dc966c1e15f8",13), //free.drweb.ru
            new HashedString("348ccdb280b0c9205f73931c35380b3a",15), //biblprog.org.ua
            new HashedString("9bfeda9d06879971756e549d5edb6acd",20), //free-software.com.ua
            new HashedString("78e02266c69940f32b680bd1407f7cfd",26), //free.dataprotection.com.ua
            new HashedString("82ccc585a90ff5da773ed6321e1335d4",13), //www.drweb.com
            new HashedString("5a6822824a14727fd67a75ca9bcc0058",18), //www.softportal.com
            new HashedString("3277391ae8c21f703aedfa065382025e",14), //www.nashnet.ua
            new HashedString("820c5a952f7877246c895c5253017642",15), //softlist.com.ua
            new HashedString("b06cce9c842342a517eeb979550cb7ef",11), //it-doc.info
            new HashedString("2622e56675d064de2719011de10669c7",12), //esetnod32.ru
            new HashedString("6d134d427dd6cc0ac506d895e06e5bfa",14), //blog-bridge.ru
            new HashedString("6cbd967e469ea6671e3697f53f577e59",12), //remontka.pro
            new HashedString("7c07ca598d80ba314295db647b40bc16",14), //securos.org.ua
            new HashedString("da876e79f6730f35c4678969c5b01b3f",12), //pc-helpp.com
            new HashedString("0f93e1b1f0c1954c307f1e0e6462a8ce",13), //softdroid.net
            new HashedString("e2f0354cd055ee727d5359ceb3ec59ad",16), //malwarebytes.com
            new HashedString("ebc7dba99115781ed43090a07f9281ab",14), //ru.vessoft.com
            new HashedString("be56cb5de3fd03b65b161145349ae105",13), //AlpineFile.ru
            new HashedString("4f8a9bbdec4e2de5f6af2d8375f78b47",41), //malwarebytes-anti-malware.ru.uptodown.com
            new HashedString("16297e8f3088fa3ff1587f1078f070ce",23), //ProgramDownloadFree.com
            new HashedString("ee35efa79cb52086ce2eb70ba69b8405",17), //download.cnet.com
            new HashedString("05461be81ef7d88fc01dbfad50a40c53",14), //soft.mydiv.net
            new HashedString("e56f530f736bcb360515f71ab7b0a391",14), //spyware-ru.com
            new HashedString("8854c43b5f132f9bbe9aa01e034e47fd",14), //remontcompa.ru
            new HashedString("205081240db0af1eae2b071aadb85bbc",17), //www.hitmanpro.com
            new HashedString("a48072f23988b560b72cf3f2f0eccc30",26), //hitman-pro.ru.uptodown.com
            new HashedString("ddf153fb8a8aefd506b182cb8ede597c",24), //www.bleepingcomputer.com
            new HashedString("a71c27fdffca5d79cf721528e221d25a",15), //soft.oszone.net
            new HashedString("6e7bf33d4e222ddb5ae026d0cd07754a",10), //krutor.org
            new HashedString("176fb162f5608954f82fbf82f6239860",15), //www.greatis.com
            new HashedString("b56ffe783724d331b052305b9cef2359",24), //unhackme.ru.uptodown.com
            new HashedString("4c255dbc36416840ad9be3d9745b2b16",15), //programy.com.ua
            new HashedString("0de8be0d7a0aba151cd4821e4d2e26de",10), //rsload.net
            new HashedString("ef628e261e007380ba780ddca4bf7510",13), //softobase.com
            new HashedString("de6446136e6394b2b9d335cd3488c191",25), //www.besplatnoprogrammy.ru
            new HashedString("fca37d5298253d278429075543d8f47d",24), //unhackme.en.softonic.com
            new HashedString("2c9bfb7c724df7cdc6653c1b3c05dede",12), //unhackme.com
            new HashedString("eeded1a700eaa95a14fccb1d0b710d76",11), //unhackme.ru
            new HashedString("13805dd1b3a52b30ab43114c184dc266",13), //nnm-club.name
            new HashedString("e1312360d9da76cde574fdf39ff4ec60",9), //vgrom.com
            new HashedString("05dfd988ff6658197a53a559d03d48d5",7), //yadi.su
            new HashedString("1d954e9393c6a315114850d3f9670158",8), //eset.com
            new HashedString("f6ce7e3db235723091e59a653e7d96f2",9), //mywot.com
            new HashedString("683ca3c4043fb12d3bb49c2470a087ea",26), //download.windowsupdate.com
            new HashedString("ff5c054c7cd6924c570f944007ccf076",13), //microsoft.com
            new HashedString("3dfef91e52b19e8bc2b5c88bdf9d7a52",20), //update.microsoft.com
            new HashedString("2e903514bf9d2c7ca3e714d28730f91e",17), //windowsupdate.com
            new HashedString("61138c8874db6a74253f3e6472c73c24",27), //windowsupdate.microsoft.com
            new HashedString("ea2afd439110302922a66cfb1c20c71d",11), //acronis.com
            new HashedString("2f4f102d0800be43f5626e28fc35da35",11), //adaware.com
            new HashedString("47a7fa72bb79489946e964d547b9a70c",9), //add0n.com
            new HashedString("8202ec5cbdc1e645fab61b419c328300",11), //adguard.com
            new HashedString("daa0a654ae3dd4043c4aab6205a613dc",10), //ahnlab.com
            new HashedString("d96d3881c78c18b33f00d3e366db2714",11), //antiscan.me
            new HashedString("088b09b98efc9213de102758d1c8acea",9), //antiy.net
            new HashedString("5ca9e4a942e008184f0656dc403485b7",7), //any.run
            new HashedString("c593eabe657120a14c5296bad07ba127",11), //app.any.run
            new HashedString("4e5d2e4478cbf65b4411dd6df56c85b7",10), //arcabit.pl
            new HashedString("e7d02464efe5027b4fe29e5b71bff851",12), //ashampoo.com
            new HashedString("178c8b444e8def52807e7db3f63dc26e",9), //avast.com
            new HashedString("e00662fd56d5e0788bde888b0f2cac70",7), //avg.com
            new HashedString("f3226bd720850e4b8115efc39c2b0fe9",9), //avira.com
            new HashedString("60d2f4fe0275d790764f40abc6734499",9), //baidu.com
            new HashedString("1fd952adcdbaade15b584f7e8c7de1e0",15), //bitdefender.com
            new HashedString("5c6cfe5d644fb02b0e1a6ac13172ae6e",8), //bkav.com
            new HashedString("eb401ae50e38bdf97bf98eb67b7f9764",14), //blackberry.com
            new HashedString("d36f9acef58b77c1499fb31b05e1348f",12), //broadcom.com
            new HashedString("b8f3ad2ce16be91986c6ae6c6d2f5c21",13), //bullguard.com
            new HashedString("bcc2393101a857b00a4fbff01da66f2a",12), //bullguard.ru
            new HashedString("2ad4f0c11334e98a56171a2863b3ea7f",12), //ccleaner.com
            new HashedString("cadddd7e2aee1db1c03f630a22f322d9",13), //chomar.com.tr
            new HashedString("56f2deb0bf3c2ac9aa9de23ee968654f",10), //clamav.net
            new HashedString("4876e625e899a84454d98f6322a4d213",15), //cloud.iobit.com
            new HashedString("98eb7e27e19b8816b5ec0a8beffd30aa",20), //cmccybersecurity.com
            new HashedString("00798b05b9906d4031905f9e57f4c310",12), //combofix.org
            new HashedString("26d25247ed88aa5f63d80acf6e4e4d35",10), //comodo.com
            new HashedString("da2ca8ed062a8b78340292df861754b0",17), //company.hauri.net
            new HashedString("132793c4107219b5631e5ccc8a772f94",8), //comss.ru
            new HashedString("a349df20a84c064b688c3605d60dd00e",15), //crowdstrike.com
            new HashedString("a518658356c72fd843116c6358393690",14), //cybereason.com
            new HashedString("c652b5220b32e0302487d6bcdc232c9d",9), //cynet.com
            new HashedString("f039b199813ed30f7ce8ecea353ceffc",9), //cyren.com
            new HashedString("1a34d8272348282803adbb71053d241b",22), //download.microsoft.com
            new HashedString("a65eb4af101a55b3e844dc9ccc42f2ff",11), //dpbolvw.net
            new HashedString("1e0daaee7cb5f7fe6b9ff65f28008e0a",9), //drweb.com
            new HashedString("98d3a8a27234fa519e04907d7ace9ff1",8), //drweb.ru
            new HashedString("8931a8fa06b940d45d6a28f2224bc46a",10), //elastic.co
            new HashedString("6ce238acdd804c4f2c710c58efe089fe",12), //emsisoft.com
            new HashedString("e075a44b048b9039c8b3dce7627237ae",11), //escanav.com
            new HashedString("a6f9bdbd2ced0eba0fe2eb3c98c37778",7), //eset.kz
            new HashedString("927846aba9d1dfedf55ef604067e3397",7), //eset.ru
            new HashedString("56e323a7ffcf8f40321ec950c1c3860f",15), //estsecurity.com
            new HashedString("cb25bfbf5c7435fd7aeda5b62dd29af5",12), //fortinet.com
            new HashedString("867692a785fd911f6ee022bc146bf28c",12), //f-secure.com
            new HashedString("c46cfad9e681cd63c8559ca9ba0c87ce",17), //gdatasoftware.com
            new HashedString("393f2e689ee70d10ad62388bf5b7e2ec",14), //gridinsoft.com
            new HashedString("bdef1f72c100741f5c13286c709402fb",14), //grizzly-pro.ru
            new HashedString("50c1347f91a9ccaa37f3661e331b376d",15), //herdprotect.com
            new HashedString("475263d0cb67da5ec1dae1ee7a40a114",13), //hitmanpro.com
            new HashedString("9fc0b7fa45ef58abd160a353e2d9eb27",15), //home.sophos.com
            new HashedString("eed8bfd826da59536da141d8773a2781",19), //hybrid-analysis.com
            new HashedString("70d0c097b0771196529f00b1559fa78f",18), //ikarussecurity.com
            new HashedString("e159fc485c9c5e905cb570e5a4af489a",10), //intego.com
            new HashedString("62cf04eba08e65b210bd1308f9da04bf",9), //iobit.com
            new HashedString("54b260c7fb614cfcf0d2f6e983434db8",15), //k7computing.com
            new HashedString("250730bdbc2a6fc2a7ffd3229d407862",12), //k7-russia.ru
            new HashedString("6f0c9e8027ef9720f9caedaef4e200b5",13), //kaspersky.com
            new HashedString("675c52a56f2ff1b3a689c278778f149c",21), //kaspersky-security.ru
            new HashedString("6dcb7e266b7f70c55d8ad51ef995cbc9",10), //kerish.org
            new HashedString("15fe7ae3216c7a37d34d02793d180530",9), //ksyun.com
            new HashedString("762c7e2ec87cb7de793cde9e9543734a",10), //lionic.com
            new HashedString("bd7c714d46ff9bae1bd9918476e8450c",10), //malware.lu
            new HashedString("327d0b3a0bb1c17c52f6ae1af8867bac",12), //malwares.com
            new HashedString("b2c9a135e92a3d4d0bded64ffe4d1ee3",15), //maxpcsecure.com
            new HashedString("985983ba88d92782fc97526ab0f02cd0",10), //mcafee.com
            new HashedString("79782f8d4349fc66dad89c3765b761d3",23), //metadefender.opswat.com
            new HashedString("974bf1d93d81d915800bb2e5352b923e",39), //msnbot-65-52-108-33.search.msn.comments
            new HashedString("4a73bdc9cec00bbb9f05bc79cbc130b4",9), //mzrst.com
            new HashedString("3d62ee7e9bada438b991f23890747534",9), //nanoav.ru
            new HashedString("84eac61e5ebc87c23550d11bce7cab5d",17), //novirusthanks.org
            new HashedString("40ef01d37461ab4affb0fdc88462aba9",27), //ntservicepack.microsoft.com
            new HashedString("f6b793a2352d382772cb7657139b2a37",27), //oca.telemetry.microsoft.com
            new HashedString("ad3d5915ac6f54ce9464a51ef5ae8fb7",37), //oca.telemetry.microsoft.com.nsatc.net
            new HashedString("63b4a8681bf273da7096261abcb33657",10), //opswat.com
            new HashedString("61d4dd297f749e3291ed8ae744da57de",20), //paloaltonetworks.com
            new HashedString("8d39a2f3831595b02640c90888c21fdd",17), //pandasecurity.com
            new HashedString("771170bbbfd44a8b1843d3fad96daf1b",11), //pcmatic.com
            new HashedString("33ae33718baa80a5f94b014fccb7329b",13), //pcprotect.com
            new HashedString("2703a4c1ceef44c10ac28f44eb98215d",10), //phrozen.io
            new HashedString("8dde0f8215149ce5ecfd670c4a701a9b",9), //pro32.com
            new HashedString("f92bfb8ff6ac7e99a799f6017797684b",13), //quickheal.com
            new HashedString("cde54506e8fa4d94c347eb3bf1a4e761",11), //quttera.com
            new HashedString("af0bbbc42533596b884c3b6edcdd97c9",10), //raymond.cc
            new HashedString("98fc92e32c31aa34dfefa97494381324",9), //render.ru
            new HashedString("680bd6136c83f4eb31b16c1fdd7aa93b",17), //reversinglabs.com
            new HashedString("2e7596c6145efe2454e4d6b92c8c4620",10), //rising.com
            new HashedString("725161e698d806fcce316bcd70b2fce1",17), //rising-global.com
            new HashedString("02cb97db53e82fecc3b47f2a7ab3c6ad",11), //sangfor.com
            new HashedString("c8324a9e380379bd3e560c4a792f76de",13), //scanguard.com
            new HashedString("41d4831c0d31069bc5b8ac767612316f",17), //scanner.virus.org
            new HashedString("2db7246eb9be6b7d7f7987a70144d8dc",13), //secureage.com
            new HashedString("5bfe94657da859c24293b4e35810ee29",26), //securitycloud.symantec.com
            new HashedString("87a25244757ea3a30d936b1a9f4adb93",15), //sentinelone.com
            new HashedString("fc828fa4ff498f2738556e6c446bb98a",18), //site.anti-virus.by
            new HashedString("ec532f0313071cb7d33bf21781ec751f",10), //sophos.com
            new HashedString("5641840b2116c66124c1b59a15f32189",15), //spamfighter.com
            new HashedString("9c9345c05ca20184e8046495224f97a5",27), //sqm.telemetry.microsoft.com
            new HashedString("1ac990351c5efe91882bd5607afcdd1c",19), //stats.microsoft.com
            new HashedString("861cd2c94ae7af5a4534abc999d9169f",13), //stopzilla.com
            new HashedString("90711c695c197049eb736afec84e9ff4",20), //superantispyware.com
            new HashedString("e862d898315ed4b4a49deede1f672fde",13), //surfshark.com
            new HashedString("25da26174f6be2837b64ec23f3db589b",14), //tachyonlab.com
            new HashedString("774f38701dff27e1d5083998b428efd6",11), //tehtris.com
            new HashedString("f39b0c9cd3be259b72d26bc2ca8b1b3b",35), //telecommand.telemetry.microsoft.com
            new HashedString("cbf34a13b567f15597d2f3f9a0b8ee9e",45), //telecommand.telemetry.microsoft.com.nsatc.net
            new HashedString("d58a810afab3591cf1450a8197219cc4",11), //tencent.com
            new HashedString("00d04f179a26f855d01bd52acbf0d0ea",31), //test.stats.update.microsoft.com
            new HashedString("ca867bc71a7ba4529a2d3a9991d54511",9), //tgsoft.it
            new HashedString("64003943175e5f080c849f1744819f48",16), //totaladblock.com
            new HashedString("61cfcb40977412be2ebf5450f4e47d30",11), //totalav.com
            new HashedString("804669ae15f338250ec9e3bd00ef5038",16), //totaldefense.com
            new HashedString("c98e096681a2d1d30b321ca4682adb47",12), //trapmine.com
            new HashedString("1826c35007829d3483ffd18cfcabe01a",11), //trellix.com
            new HashedString("2cf505233a066a02292a1f9062aa12a2",14), //trendmicro.com
            new HashedString("976e17b152cabf43472b3ffd81113c66",13), //trustlook.com
            new HashedString("0d3630958f3c3e8e08486b0d8335aea6",17), //usa.kaspersky.com
            new HashedString("9c41eb8b8cd2c93c2782ead39aa4fb70",9), //vipre.com
            new HashedString("f27e6596102c70bad8aa36e7c9b50340",11), //virscan.org
            new HashedString("17baee242e6527a5f59aa06e26841eae",9), //virus.org
            new HashedString("b6eb1940800729f89307db6162706c21",19), //virusscan.jotti.org
            new HashedString("e2a50e6c79e09a7356e07d0476dfbb9b",14), //virustotal.com
            new HashedString("4098c777fa8b87f90df7492fd361d54d",9), //vmray.com
            new HashedString("97f4c811eec10002f0c31512c46a8343",25), //vortex.data.microsoft.com
            new HashedString("edd9a8bc3fea892c815e156c8f97cd9f",29), //vortex-win.data.microsoft.com
            new HashedString("3ba8af7964d9a010f9f6c60381698ec5",11), //webroot.com
            new HashedString("6c1e4b893bda58da0e9ef2d6d85ac34f",18), //wustat.windows.com
            new HashedString("f360d4a971574eca32732b1f2b55f437",11), //xcitium.com
            new HashedString("686f4ba84015e8950f4aed794934ed11",10), //zillya.com
            new HashedString("2b001a98c1a66626944954ee5522718b",10), //Zillya.com
            new HashedString("80d01ead54a1384e56f5d34c80b33575",13), //zonealarm.com
            new HashedString("b868b32c3ea132d50bd673545e3f3403",18), //zonerantivirus.com
        };

        List<string> suspFls_path = new List<string>();
        List<string> prevMlwrPths = new List<string>();

        List<byte[]> signatures = new List<byte[]> //signatures
                {
                    new byte[] {0x67, 0x33, 0x71, 0x70, 0x70, 0x6D },
                    new byte[] {0x33, 0x6E, 0x6A, 0x6F, 0x66, 0x73, 0x74 },
                    new byte[] {0x6F, 0x6A, 0x64, 0x66, 0x69, 0x62, 0x74, 0x69 },
                    new byte[] {0x75, 0x66, 0x6C, 0x75, 0x70, 0x6F, 0x6A, 0x75 },
                    new byte[] {0x2F, 0x75, 0x69, 0x66, 0x6E, 0x6A, 0x65, 0x62 },
                    new byte[] {0x74, 0x75, 0x73, 0x62, 0x75, 0x76, 0x6E, 0x2C },
                    new byte[] {0x60, 0x73, 0x62, 0x6F, 0x65, 0x70, 0x6E, 0x79, 0x60 },
                    new byte[] {0x46, 0x75, 0x66, 0x73, 0x6F, 0x62, 0x6D, 0x63, 0x6D, 0x76, 0x66 },
                    new byte[] {0x67, 0x6D, 0x7A, 0x71, 0x70, 0x70, 0x6D, 0x2F, 0x70, 0x73, 0x68 },
                    new byte[] {0x6F, 0x62, 0x6F, 0x70, 0x71, 0x70, 0x70, 0x6D, 0x2F, 0x70, 0x73, 0x68 },
                    new byte[] {0x54, 0x69, 0x66, 0x6D, 0x6D, 0x64, 0x70, 0x65, 0x66, 0x47, 0x6A, 0x6D, 0x66 },
                    new byte[] {0x42, 0x6D, 0x68, 0x70, 0x73, 0x6A, 0x75, 0x69, 0x6E, 0x41, 0x79, 0x6E, 0x73, 0x6A, 0x68 },
                    new byte[] {0x45, 0x70, 0x76, 0x63, 0x6D, 0x66, 0x51, 0x76, 0x6D, 0x74, 0x62, 0x73, 0x51, 0x73, 0x66, 0x74, 0x66, 0x6F, 0x75 }
                };

        public List<string> founded_mlwrPths = new List<string>();

        readonly long[] constantFileSize = new long[]
        {
            634880, //audiodg
            98304, //taskhostw
            69632, //taskhost
            862208, //conhost
            55320, //svchost
            94720, //dwm
            71680, //rundll32
            906752, //winlogon
            17600, //csrss
            714856, //services
            60544, //lsass
            21312, //dllhost
            155976, //smss
            420472, //wininit
            3235192, //vbc
            57344, //unsecapp
            174552, //ngen
            40960, //dialer
            12800 //tcpsvcs
        };
        long maxFileSize = 100 * 1024 * 1024;

        public List<int> mlwrPids = new List<int>();
        public List<string> founded_suspLckPths = new List<string>();
        public List<string> founded_mlwrPathes = new List<string>();
        public string WindowsVersion = Registry.LocalMachine.OpenSubKey(Bfs.Create("JceyGSy9mzgBR6/U+p+0stm4195Wd/5tHGe+8m+cnm8cYIo3Nk0BzObOd6G8qFfV",
            new byte[] { 0x8f, 0x7b, 0x96, 0x0f, 0x2d, 0x63, 0xf0, 0x20, 0x60, 0xe3, 0xd3, 0xa7, 0xe4, 0xd4, 0xfe, 0x70, 0x72, 0xb7, 0x9b, 0x8b, 0x51, 0x05, 0xb0, 0x5f, 0xf9, 0x8d, 0xf7, 0xcf, 0xa1, 0xc8, 0xee, 0x77 },
            new byte[] { 0xee, 0xa2, 0x6a, 0xfc, 0xef, 0xa9, 0x09, 0x83, 0xab, 0x89, 0xf3, 0xa3, 0xf1, 0x17, 0x4e, 0xb5 })).GetValue("Pro??duct??Name".Replace("?", "")).ToString(); //SOFTWARE\Microsoft\Windows NT\CurrentVersion
        string quarantineFolder = Path.Combine(Environment.CurrentDirectory, "minerseаrch_quarаntine");



        public void DetectRk()
        {

            Logger.WriteLog("\t\tChecking roo??tk??it present...".Replace("?", ""), Logger.head, false);
            string rk_testapp = Path.Combine(Path.GetTempPath(), "dia??ler_".Replace("?", "") + utils.GetRndString() + ".exe");

            File.WriteAllBytes(rk_testapp, Resources.rktest);
            Process rk_testapp_process = Process.Start(new ProcessStartInfo()
            {
                FileName = rk_testapp,
                Arguments = "5",
                UseShellExecute = false,
                CreateNoWindow = true

            });
            List<Process> dialers = new List<Process>();

            string pname = "di??al??er".Replace("?", "");
            foreach (Process proc in utils.GetProcesses())
            {
                try
                {
                    if (proc.ProcessName.StartsWith(pname))
                    {
                        dialers.Add(proc);
                    }
                }
                catch (Exception ex)
                {
#if BETA
                    Logger.WriteLog($"\t[x] Error on DetectRootkit: {ex.Message}", Logger.error);
#endif
                }
            }

            if (dialers.Count == 0)
            {
                Console.BackgroundColor = ConsoleColor.DarkMagenta;
                Logger.WriteLog("\t[!!!!] Mi?ner's r?o??o?tk??it detected! Try to remove...".Replace("?", ""), ConsoleColor.White, false);
                Console.BackgroundColor = ConsoleColor.Black;

                string rk_unstaller_path = Path.Combine(Path.GetTempPath(),
                    Bfs.Create("+i6CI7r2H0Ua3qHd7YI8Hw==",
                        new byte[] { 0xb5, 0x15, 0xc7, 0x46, 0x9d, 0xe7, 0xde, 0x12, 0xa2, 0x04, 0xcb, 0xc7, 0x2a, 0x17, 0xf2, 0x4c, 0xd4, 0xba, 0xa4, 0x27, 0xdd, 0x78, 0xf5, 0xf5, 0x17, 0x02, 0x60, 0x09, 0x5a, 0xf5, 0xab, 0x70 },
                        new byte[] { 0x15, 0xa4, 0x20, 0x3d, 0x0f, 0xf8, 0xd5, 0xf3, 0xa6, 0x19, 0xcc, 0xfb, 0x4a, 0x32, 0xd9, 0x65 }));
                try
                {
                    byte[] allBytes = {0x00,
0x28, 0xd6, 0xae, 0x57, 0x8d, 0x28, 0xe9, 0xdd,
0xf4, 0xf8, 0xf3, 0x38, 0xe5, 0x33, 0x8f, 0xa4,
0x83, 0x44, 0xc4, 0x5b, 0xd7, 0x22, 0xb6, 0x06,
0x08, 0x92, 0x47, 0xc7, 0xe1, 0xf8, 0xe4, 0xd1,
0x16, 0xee, 0xe0, 0x7c, 0xef, 0xbb, 0x6e, 0x7a,
0xf2, 0xa1, 0x02, 0x4e, 0xf9, 0x31, 0x07, 0x6e,
0x19, 0x7d, 0x2e, 0xaf, 0xfd, 0x96, 0x69, 0x6e,
0x0a, 0xc7, 0x0f, 0x8b, 0x4a, 0x3b, 0xe9, 0xc4,
0xfe, 0xe2, 0xe3, 0x88, 0x89, 0x6a, 0xd1, 0x54,
0xf0, 0x0b, 0x5a, 0x7c, 0x69, 0x97, 0x40, 0xab,
0x39, 0x83, 0x97, 0x3d, 0x47, 0xff, 0x76, 0x95,
0x03, 0xed, 0xa3, 0xc8, 0x76, 0xa7, 0xf9, 0xdb,
0x79, 0xab, 0xbf, 0xa5, 0xb8, 0x10, 0x3e, 0xe0,
0xb4, 0x07, 0xb5, 0xf7, 0x0a, 0x9f, 0xf0, 0x47,
0x22, 0x1d, 0xbd, 0x64, 0x08, 0x9b, 0x45, 0x8e,
0xc6, 0xe1, 0xa4, 0x99, 0xd1, 0xd1, 0x12, 0xb4,
0xeb, 0x0a, 0x59, 0x0b, 0xd8, 0xd3, 0x0b, 0x07,
0x90, 0x79, 0xab, 0x3b, 0xe4, 0xe1, 0x4f, 0xe9,
0xe8, 0xc6, 0x9e, 0x27, 0xf2, 0xc0, 0x1d, 0xf4,
0xc3, 0x40, 0x53, 0x36, 0xbd, 0xf1, 0x96, 0xe8,
0x5e, 0xca, 0x19, 0xac, 0xe8, 0x4d, 0xab, 0xb5,
0x02, 0xae, 0xad, 0xfc, 0x0f, 0xbe, 0x4e, 0xf1,
0xd1, 0xd9, 0x12, 0x2d, 0xcd, 0x02, 0x3e, 0x2f,
0x60, 0xc9, 0x95, 0x1d, 0x6b, 0xd5, 0x53, 0x3c,
0xc5, 0xa7, 0x0b, 0x99, 0xa8, 0x66, 0x72, 0x87,
0xa6, 0x26, 0x6d, 0x10, 0x3f, 0x7b, 0xc7, 0x13,
0x95, 0x7b, 0x42, 0x49, 0x68, 0xb6, 0xd3, 0x28,
0xbc, 0xdb, 0x4b, 0xfe, 0x66, 0x50, 0x53, 0x73,
0xd8, 0xad, 0x98, 0x25, 0x17, 0x78, 0xc6, 0x59,
0xd6, 0x79, 0x5e, 0x87, 0x6f, 0x42, 0x8f, 0x09,
0xc5, 0xf0, 0x32, 0xcb, 0x0a, 0xdb, 0xbe, 0x1e,
0x14, 0xff, 0x6f, 0x1c, 0x03, 0xec, 0x7f, 0x8b,
0xae, 0x7e, 0xea, 0x3c, 0x7c, 0x6a, 0x15, 0x8b,
0xac, 0x4b, 0x58, 0x5c, 0x4b, 0x55, 0x8d, 0xe4,
0x0b, 0xf1, 0x44, 0xab, 0x10, 0xa8, 0x33, 0xe4,
0xd6, 0xc6, 0x8d, 0xec, 0xcc, 0xd1, 0x06, 0x8f,
0x5f, 0xa8, 0x49, 0x01, 0xa4, 0xcd, 0x86, 0x6e,
0x3c, 0x75, 0x87, 0x4b, 0x5d, 0xdc, 0x18, 0xa6,
0xe5, 0x30, 0xeb, 0x89, 0xb6, 0x6b, 0xf7, 0x93,
0xbd, 0xfd, 0x11, 0x2f, 0x7c, 0xcc, 0x8a, 0x53,
0x02, 0x83, 0xe3, 0x52, 0xc6, 0x3f, 0x47, 0x83,
0xb3, 0x4d, 0x3e, 0x72, 0x4d, 0xa6, 0x17, 0x15,
0x79, 0x80, 0x4b, 0x4b, 0x85, 0x5f, 0xbd, 0x5d,
0x23, 0xe5, 0xa8, 0x96, 0x76, 0xb8, 0xd7, 0xe2,
0xf7, 0xa9, 0x4e, 0x0e, 0x94, 0x36, 0x87, 0x5c,
0x22, 0x6f, 0x3d, 0x1b, 0x4c, 0x65, 0x93, 0x59,
0x6a, 0x15, 0x29, 0xa9, 0xf9, 0x87, 0xb6, 0xec,
0xc9, 0xd3, 0x85, 0x4e, 0xe1, 0xc9, 0x40, 0x94,
0x63, 0xd5, 0x1e, 0x57, 0x11, 0x8d, 0x2f, 0x5d,
0x86, 0xa0, 0x96, 0xc8, 0xef, 0x5f, 0x9a, 0x04,
0xd5, 0x15, 0xaa, 0xac, 0x6b, 0x74, 0xe1, 0x12,
0xff, 0xb3, 0x28, 0x82, 0xbf, 0x86, 0xe8, 0x83,
0xc2, 0x29, 0x66, 0xef, 0x85, 0x8d, 0x01, 0x19,
0x7f, 0xde, 0xe4, 0xf0, 0xdb, 0x46, 0x22, 0x47,
0x20, 0xed, 0x01, 0x90, 0xb1, 0x58, 0x4e, 0xee,
0x0b, 0x44, 0xb4, 0xd7, 0x0f, 0xc2, 0x74, 0x12,
0x1b, 0x5c, 0x25, 0x16, 0xca, 0xc2, 0xb8, 0x3a,
0xf3, 0xf0, 0xd1, 0x68, 0xcc, 0x55, 0x2a, 0xbf,
0x34, 0xd5, 0x57, 0x43, 0xbf, 0x42, 0x25, 0xaf,
0x20, 0x08, 0x18, 0x48, 0xd2, 0xbd, 0x70, 0xf9,
0x45, 0x93, 0x9a, 0xe7, 0x73, 0xbb, 0x08, 0x86,
0x28, 0xf1, 0xf9, 0x0f, 0x7f, 0x2d, 0xcd, 0xb9,
0xbb, 0x4f, 0x6c, 0xfe, 0xf1, 0x20, 0x04, 0x94,
0x8f, 0x59, 0xe8, 0xab, 0x69, 0x0e, 0xb3, 0xea,
0xe0, 0x49, 0x22, 0xf5, 0x6c, 0x80, 0x54, 0x6d,
0x14, 0xde, 0x55, 0x80, 0x3e, 0x61, 0x53, 0x73,
0x37, 0x57, 0x99, 0x67, 0xa6, 0x24, 0xfc, 0x87,
0x1c, 0x3a, 0x7a, 0x42, 0x64, 0x61, 0xce, 0x83,
0x04, 0x2a, 0xc6, 0xaa, 0x98, 0xb5, 0x81, 0x93,
0x57, 0x4f, 0xdb, 0x79, 0x95, 0xb4, 0xcd, 0x74,
0x13, 0xf0, 0x47, 0xe4, 0xae, 0x8a, 0xa9, 0xc4,
0xfe, 0x0a, 0xce, 0x0e, 0x26, 0xca, 0x48, 0xa0,
0xb5, 0xee, 0x48, 0xbd, 0x3f, 0xae, 0x39, 0x3c,
0x1f, 0x6c, 0x99, 0x5a, 0xe4, 0xc7, 0xb9, 0x0b,
0xe2, 0xce, 0x6b, 0xf4, 0xcd, 0x7b, 0x87, 0x77,
0x16, 0x16, 0xf4, 0x7d, 0x01, 0xac, 0xbe, 0x75,
0xc2, 0x5d, 0xea, 0xb9, 0xc8, 0xa0, 0x66, 0xbb,
0xd3, 0xa0, 0x0d, 0x60, 0x6b, 0x0b, 0xca, 0xd5,
0xd9, 0xbc, 0xc6, 0x04, 0x36, 0x36, 0x29, 0x45,
0x92, 0xbb, 0x27, 0x8f, 0xae, 0xea, 0x4b, 0xc4,
0xfd, 0xe7, 0x59, 0xc2, 0x78, 0x67, 0x64, 0xc6,
0x56, 0x76, 0xb5, 0x22, 0x86, 0x23, 0xe4, 0xf8,
0x09, 0xd5, 0x42, 0x56, 0x3e, 0x0b, 0xa2, 0xa6,
0x82, 0x84, 0x4a, 0xc9, 0x6c, 0x3f, 0x86, 0xff,
0x36, 0x63, 0x48, 0x15, 0xad, 0x18, 0x7e, 0x2a,
0x51, 0xba, 0x07, 0xa9, 0x49, 0x40, 0x42, 0x03,
0xbf, 0xa0, 0x64, 0x34, 0x51, 0xc8, 0x5d, 0xfa,
0x33, 0x3b, 0x8e, 0x8e, 0xd2, 0xe5, 0xc9, 0x54,
0xf7, 0xf0, 0x04, 0xd7, 0x21, 0x50, 0xbf, 0xf2,
0x66, 0xd9, 0xe4, 0x79, 0xc1, 0x6f, 0x18, 0xc0,
0xaf, 0xce, 0x03, 0x07, 0x07, 0x26, 0x5d, 0xc4,
0xb3, 0x7f, 0x13, 0x43, 0xc8, 0xf8, 0xf5, 0x41,
0xce, 0x14, 0xf2, 0xba, 0x09, 0x00, 0x51, 0x8c,
0x45, 0x37, 0x23, 0x25, 0xa2, 0xaf, 0x38, 0x68,
0x99, 0xdd, 0xfc, 0xd2, 0x9e, 0xa6, 0xfa, 0x46,
0x1f, 0x33, 0x2b, 0xfb, 0xc3, 0xee, 0x9c, 0xc3,
0x5f, 0x1b, 0x58, 0x41, 0xc7, 0x69, 0xad, 0xb5,
0x3f, 0x12, 0x63, 0x36, 0x37, 0x8a, 0xb3, 0xf5,
0x42, 0xec, 0xb3, 0x5f, 0x94, 0x56, 0x85, 0x1d,
0xbf, 0x3c, 0xb5, 0x64, 0x8c, 0x3a, 0xe8, 0xa3,
0x4e, 0x3b, 0x0f, 0x67, 0x29, 0x36, 0xf8, 0x1e,
0xc6, 0x94, 0x92, 0x48, 0x99, 0x72, 0x5b, 0xc5,
0x31, 0xb5, 0xc3, 0xf5, 0x06, 0x8d, 0xd7, 0x38,
0xa0, 0x5b, 0xe5, 0x5b, 0xe7, 0x15, 0x06, 0xa0,
0xb8, 0x8c, 0x50, 0x7b, 0xbd, 0x72, 0x34, 0x42,
0x74, 0x14, 0x57, 0xa8, 0x85, 0xc0, 0xdb, 0x9b,
0xdc, 0xa0, 0x26, 0x5d, 0x73, 0x0d, 0x5d, 0x67,
0x1c, 0x70, 0x40, 0xd0, 0xa3, 0x88, 0x10, 0x99,
0x7f, 0xc4, 0xa2, 0x52, 0x85, 0xa8, 0x73, 0xbb,
0x86, 0x15, 0x6e, 0xd0, 0x91, 0x1f, 0x7b, 0x05,
0x38, 0x52, 0x4a, 0xe2, 0x5b, 0x05, 0xd4, 0x88,
0x01, 0x5b, 0x03, 0xbf, 0x88, 0xcb, 0xd4, 0x6b,
0xd8, 0x55, 0xf3, 0xb2, 0x8a, 0xe8, 0xa5, 0x8b,
0x5a, 0x4c, 0x60, 0x74, 0xc8, 0x99, 0x6b, 0xd1,
0xcd, 0x5f, 0x0c, 0xb7, 0x65, 0x45, 0xf8, 0x46,
0xcd, 0x6b, 0xa9, 0x26, 0x69, 0x73, 0x4c, 0xe4,
0x16, 0xa8, 0x80, 0x31, 0x0d, 0x94, 0x47, 0x55,
0x23, 0x2e, 0x4f, 0x69, 0x7b, 0x66, 0xde, 0x3c,
0xcc, 0xf0, 0x94, 0x1a, 0x53, 0xfb, 0x50, 0x8b,
0x57, 0xa0, 0x12, 0xca, 0x41, 0xae, 0x49, 0x27,
0xde, 0xeb, 0x2f, 0x58, 0x3c, 0xe6, 0x61, 0x95,
0x60, 0x25, 0xd3, 0x66, 0xdf, 0xbe, 0x87, 0x08,
0xde, 0x20, 0x42, 0x21, 0xb2, 0x7c, 0x5c, 0x39,
0x16, 0x47, 0xd2, 0xc2, 0x45, 0xb2, 0x00, 0x55,
0x7a, 0x7e, 0xc5, 0x8c, 0x29, 0x32, 0xe3, 0xac,
0xa0, 0xdf, 0x4a, 0x59, 0x82, 0xa3, 0x3a, 0x8e,
0x4a, 0xbf, 0x2f, 0xaf, 0x76, 0x47, 0x4d, 0x86,
0x00, 0x38, 0x49, 0x73, 0x20, 0x5d, 0xd9, 0x03,
0xa0, 0x0f, 0x24, 0x37, 0xea, 0x3c, 0x02, 0xbe,
0xa1, 0x26, 0x6c, 0xbb, 0x23, 0x76, 0x84, 0xa6,
0xee, 0x91, 0xf0, 0x50, 0xec, 0xe4, 0x32, 0xe8,
0xf9, 0xc8, 0xa7, 0x55, 0x77, 0x11, 0x32, 0xa4,
0x09, 0x8f, 0x90, 0xed, 0xd3, 0xfd, 0xff, 0x70,
0x2c, 0x97, 0x92, 0x4b, 0x2f, 0x64, 0xcd, 0x50,
0xc3, 0xd4, 0xe5, 0x3c, 0xaa, 0x7c, 0x34, 0x0d,
0x63, 0x44, 0x12, 0xd6, 0x0f, 0x32, 0x1c, 0xc3,
0x33, 0xa2, 0xb8, 0xc8, 0x98, 0x55, 0xaf, 0x6c,
0xf5, 0xe3, 0x44, 0xc9, 0x74, 0xb4, 0x4f, 0xbc,
0x4f, 0xb0, 0x12, 0xa1, 0xc0, 0x20, 0x8d, 0xdc,
0xd5, 0x7d, 0xbd, 0x9c, 0xb2, 0x38, 0x73, 0x24,
0x23, 0x59, 0x5a, 0x6b, 0x28, 0x1d, 0x4c, 0x75,
0xd8, 0x35, 0xe3, 0x10, 0xcc, 0xce, 0x8d, 0xa9,
0x97, 0x2f, 0xec, 0xf2, 0x0e, 0x4c, 0x8a, 0x6d,
0xb4, 0xb5, 0xfb, 0x7b, 0x53, 0x78, 0xb3, 0x95,
0x8c, 0xe2, 0x39, 0x2b, 0x8e, 0x60, 0xd8, 0x16,
0x62, 0x8a, 0x0f, 0xe4, 0x2f, 0xfd, 0x40, 0x16,
0xe5, 0x7e, 0x3d, 0x3d, 0xa1, 0x72, 0x6c, 0x55,
0x91, 0x11, 0x6d, 0x55, 0xb1, 0x0c, 0x20, 0x44,
0x30, 0x19, 0xd0, 0x6d, 0xe6, 0x67, 0x17, 0x27,
0x09, 0xef, 0x1c, 0x5e, 0xd9, 0xe7, 0x02, 0xb5,
0xd6, 0xc9, 0x70, 0xd6, 0x3f, 0x3a, 0x09, 0x6a,
0xf1, 0x40, 0x2b, 0x43, 0x41, 0xf6, 0x7c, 0x2a,
0x0c, 0xc0, 0xbb, 0x52, 0x78, 0x7c, 0xe7, 0x50,
0xff, 0xbc, 0xb7, 0x80, 0xdc, 0x09, 0x73, 0x23,
0x53, 0x22, 0xc3, 0xd2, 0x1a, 0x18, 0x19, 0xfc,
0x82, 0xb9, 0xa9, 0x91, 0x9a, 0x3e, 0x0f, 0x50,
0xc0, 0x05, 0x1a, 0x14, 0xa0, 0x40, 0x31, 0x2b,
0xf4, 0xa4, 0x6b, 0xd7, 0x42, 0xaf, 0x46, 0x8a,
0xcb, 0x8b, 0xd8, 0x22, 0xa9, 0x4f, 0xe3, 0x92,
0xd6, 0xea, 0x09, 0xbd, 0xa5, 0x4c, 0xa3, 0xbb,
0xfd, 0xe2, 0x9d, 0xf7, 0xde, 0x23, 0x39, 0x6f,
0x08, 0x00, 0x55, 0xd5, 0x98, 0x9d, 0x45, 0x54,
0x0a, 0x78, 0x76, 0x27, 0x96, 0x3a, 0x25, 0x08,
0x76, 0x8b, 0xc2, 0xf7, 0x66, 0x63, 0x5c, 0x14,
0x2d, 0xcf, 0x28, 0x2f, 0xaf, 0x26, 0x23, 0x28,
0x80, 0xa5, 0xee, 0x62, 0xa8, 0x89, 0x8b, 0x15,
0x0e, 0x89, 0x06, 0xdb, 0x0c, 0xbb, 0xac, 0x5a,
0xcf, 0xc1, 0xc4, 0x40, 0x4a, 0x53, 0x5f, 0x5b,
0x4d, 0x38, 0x4c, 0xde, 0x70, 0x8e, 0xb0, 0xaf,
0x25, 0xd4, 0xec, 0x22, 0xdf, 0xd2, 0x52, 0x5b,
0xb4, 0x46, 0xd8, 0x3a, 0x9b, 0x1c, 0xee, 0xe7,
0x57, 0x78, 0xed, 0x1b, 0x7b, 0x70, 0xa9, 0x9e,
0x69, 0xae, 0x5b, 0x8c, 0xd3, 0x4e, 0x2e, 0x9c,
0x20, 0xa3, 0x7b, 0xcd, 0xf5, 0x4e, 0xfd, 0x09,
0x72, 0x32, 0xef, 0x23, 0xb9, 0xad, 0xd3, 0x24,
0xc7, 0xa0, 0x6c, 0x91, 0xeb, 0x2a, 0x4e, 0x0a,
0x60, 0x50, 0x07, 0x86, 0xcc, 0x77, 0x48, 0x03,
0x3f, 0x0d, 0xc8, 0x30, 0x8f, 0x0c, 0x7b, 0xd4,
0x4f, 0x96, 0x24, 0x1f, 0x28, 0x55, 0xfb, 0x69,
0xc5, 0x3c, 0x37, 0x05, 0xc2, 0x2f, 0x00, 0xac,
0x8d, 0xf9, 0x1b, 0x36, 0x38, 0xb0, 0x5e, 0xc3,
0x02, 0x49, 0x76, 0xac, 0x86, 0xc7, 0x28, 0x12,
0xd0, 0x3d, 0x58, 0x47, 0xed, 0xcb, 0xfa, 0x74,
0xf4, 0xd4, 0x9d, 0x97, 0x4d, 0xea, 0x50, 0x27,
0xcc, 0x22, 0x8e, 0x93, 0x48, 0x22, 0x36, 0x94,
0x67, 0x0d, 0x05, 0xa5, 0x3d, 0x1f, 0x2b, 0xce,
0xfb, 0xc1, 0xd0, 0x2d, 0xf5, 0xd6, 0xe8, 0x5d,
0x05, 0xbe, 0x46, 0xe3, 0x82, 0xaa, 0x98, 0x40,
0x12, 0x7b, 0x6a, 0xe9, 0xcc, 0xa2, 0x80, 0xac,
0x8a, 0x72, 0xe3, 0x5d, 0x0c, 0x80, 0x7d, 0x8d,
0xf6, 0xd7, 0xa4, 0x3d, 0x4a, 0xd8, 0xd0, 0xbc,
0x5f, 0xda, 0x8b, 0xc1, 0x8e, 0x14, 0x6c, 0x70,
0x91, 0x45, 0x2f, 0x01, 0x20, 0xa9, 0x32, 0xfa,
0xa5, 0x52, 0xa8, 0xe4, 0xe1, 0x0f, 0xb4, 0xfa,
0x1e, 0x41, 0xe2, 0x1b, 0xd9, 0xbc, 0xe1, 0x32,
0x8a, 0xf3, 0x70, 0x6f, 0x5c, 0xaf, 0xcd, 0x40,
0x6c, 0x91, 0x53, 0xc2, 0xc3, 0x66, 0x8c, 0x6e,
0xe1, 0xa6, 0x3f, 0xe7, 0x66, 0x49, 0xda, 0xd0,
0xcd, 0x93, 0x4a, 0xcf, 0xc8, 0x83, 0x33, 0xe7,
0x7e, 0x8d, 0x7b, 0x55, 0x3e, 0x15, 0x34, 0x7a,
0x3f, 0xd0, 0xff, 0xd8, 0xbb, 0x18, 0x42, 0x7a,
0xf8, 0x4b, 0x5d, 0xbc, 0x8a, 0xd1, 0xcf, 0xf9,
0x6b, 0x85, 0x03, 0xe0, 0xbb, 0x74, 0xaf, 0x24,
0xf0, 0xe0, 0xea, 0x12, 0x53, 0xd2, 0xb9, 0x3c,
0xd2, 0x98, 0x2f, 0x45, 0xb3, 0x77, 0x2d, 0x62,
0x6b, 0xbb, 0x33, 0x61, 0x0b, 0xfe, 0x82, 0x6e,
0x8f, 0xee, 0xe1, 0x47, 0xd9, 0x21, 0xaf, 0xec,
0xf1, 0x68, 0xec, 0x52, 0xfb, 0xca, 0x2d, 0x8a,
0x04, 0x8a, 0x8b, 0x86, 0xba, 0x85, 0x51, 0xf7,
0x4e, 0x34, 0xf4, 0xe8, 0x36, 0xae, 0x45, 0x5e,
0x2a, 0xeb, 0x60, 0x9f, 0x56, 0x39, 0xc6, 0x28,
0x8c, 0xea, 0x68, 0xf3, 0x24, 0xb3, 0xba, 0xc6,
0x79, 0x81, 0xa4, 0x3f, 0xff, 0x06, 0x8d, 0xa7,
0x99, 0xa1, 0xfa, 0x83, 0x0a, 0xa8, 0xc7, 0x93,
0x35, 0xbc, 0x81, 0x9c, 0x13, 0xe7, 0xbc, 0xaa,
0xf4, 0x03, 0x2c, 0xb9, 0x53, 0xd0, 0xe5, 0xf0,
0x17, 0x9d, 0x60, 0xd1, 0x73, 0x26, 0x4d, 0xee,
0xb2, 0xfd, 0x1a, 0x5e, 0x50, 0x83, 0x0a, 0xca,
0xc2, 0x4d, 0x76, 0x1f, 0x58, 0x1a, 0x8e, 0x8c,
0x05, 0x55, 0xed, 0xef, 0x35, 0x93, 0x6f, 0x49,
0xec, 0x14, 0xf8, 0x17, 0x2f, 0x05, 0x0d, 0x67,
0x9e, 0x23, 0x36, 0x73, 0x01, 0xe9, 0x67, 0xe2,
0x34, 0x0a, 0xfd, 0xa7, 0x72, 0xb9, 0x7e, 0x5d,
0x8c, 0xc8, 0x27, 0x95, 0x66, 0x34, 0xe3, 0xcf,
0xbe, 0x95, 0x6a, 0xd6, 0x74, 0x64, 0x30, 0x5b,
0xd8, 0xce, 0x5b, 0x99, 0x34, 0x6b, 0xd1, 0x6a,
0xd5, 0xaa, 0xab, 0x31, 0x79, 0xe3, 0x2f, 0xe8,
0x44, 0xcc, 0x37, 0xb9, 0x8c, 0xdf, 0xf1, 0xee,
0xc2, 0x29, 0x40, 0xc5, 0x5c, 0xa8, 0xa3, 0x4c,
0xd4, 0x1b, 0x5f, 0xf3, 0xd0, 0xc9, 0x1f, 0x5f,
0x82, 0x07, 0x88, 0x3f, 0x06, 0x4c, 0x9e, 0x3b,
0x4f, 0xc9, 0x8b, 0xca, 0x0e, 0x81, 0x48, 0x9c,
0xf2, 0x70, 0xd2, 0x3b, 0x1b, 0x4b, 0x8d, 0xa5,
0xaf, 0x83, 0x10, 0x73, 0x65, 0x57, 0xb9, 0x38,
0x06, 0x1c, 0x4c, 0x93, 0x77, 0x53, 0xaf, 0x9b,
0x3d, 0xf3, 0x6a, 0xae, 0x8d, 0xc8, 0xcf, 0xf5,
0xdc, 0xf6, 0x4a, 0xf6, 0x2c, 0x03, 0x8d, 0x21,
0x1d, 0xb5, 0x18, 0xe5, 0x67, 0x6e, 0xe0, 0xe5,
0xd0, 0xde, 0x9a, 0xa8, 0x1e, 0x61, 0xc3, 0x0b,
0x49, 0xca, 0x7c, 0x45, 0xb2, 0xec, 0x85, 0xe8,
0x39, 0x5d, 0xe5, 0x63, 0x84, 0x92, 0x75, 0xfc,
0x52, 0x12, 0xbc, 0xe1, 0xe3, 0xf7, 0x8f, 0x78,
0x53, 0x8e, 0x22, 0x71, 0x3c, 0xd9, 0x24, 0x0e,
0x80, 0xc8, 0x36, 0xc6, 0x81, 0xb5, 0x7b, 0xc6,
0xbe, 0x1e, 0x54, 0x90, 0xe0, 0x99, 0xc7, 0xa1,
0x98, 0xb9, 0x6a, 0x79, 0xef, 0x95, 0x51, 0x80,
0xd7, 0x65, 0x98, 0x49, 0xc6, 0xb1, 0x01, 0x6c,
0xdd, 0x51, 0xa9, 0xe8, 0xcc, 0x0c, 0x0a, 0xf2,
0x54, 0xb3, 0x60, 0x31, 0x95, 0xf6, 0x7e, 0xed,
0x46, 0x3a, 0xdb, 0x78, 0x90, 0x1e, 0x17, 0x36,
0xb9, 0xa8, 0x94, 0xc1, 0x96, 0xba, 0xa4, 0xa5,
0x2e, 0x0d, 0xbf, 0x2d, 0xde, 0x97, 0xe3, 0xb3,
0x40, 0xe8, 0x52, 0x04, 0x88, 0x94, 0x3a, 0x0b,
0xf6, 0x1f, 0xb3, 0xae, 0x2d, 0x20, 0x58, 0xba,
0x9e, 0xbf, 0x99, 0x7f, 0x00, 0xfa, 0x7d, 0x8d,
0x82, 0xa5, 0x66, 0x20, 0x9a, 0x33, 0x37, 0xb1,
0x6a, 0x4e, 0x21, 0x4a, 0x53, 0x6f, 0xfd, 0x5c,
0x41, 0x0c, 0xbc, 0x95, 0x7f, 0x1d, 0xb1, 0x60,
0x44, 0x14, 0xfa, 0xa2, 0x0b, 0x28, 0xd4, 0x97,
0xaf, 0x9a, 0xc6, 0xc1, 0x59, 0xa1, 0xcf, 0x02,
0xeb, 0x24, 0x1d, 0xc0, 0x65, 0x90, 0xf5, 0x9f,
0xbd, 0x64, 0x5e, 0x9c, 0x1c, 0x78, 0xc0, 0x33,
0xf8, 0x7f, 0x17, 0xde, 0xe6, 0x3e, 0xc6, 0x10,
0xc9, 0x18, 0x01, 0x69, 0xd1, 0xd0, 0x7b, 0xf9,
0x24, 0xad, 0xa6, 0xfb, 0x4e, 0xba, 0x63, 0xb8,
0xe3, 0x44, 0x9c, 0x16, 0x46, 0x45, 0xe2, 0x3e,
0x08, 0xcd, 0x05, 0x55, 0xbf, 0x74, 0xef, 0xd4,
0xc8, 0xf8, 0xbf, 0xac, 0x84, 0xaa, 0x09, 0x74,
0x6c, 0x93, 0x43, 0xc2, 0x2b, 0x46, 0xcd, 0x8e,
0x1d, 0x81, 0xfe, 0x14, 0xb9, 0xc7, 0xd5, 0x8c,
0xb2, 0xb4, 0x9d, 0x15, 0x51, 0x53, 0xf6, 0x71,
0x37, 0x12, 0xa3, 0xc1, 0xd0, 0x53, 0x3f, 0x68,
0xfb, 0xf3, 0xfe, 0x2e, 0xbc, 0xdf, 0x70, 0x06,
0xf7, 0x1b, 0xdf, 0xf8, 0xa0, 0x66, 0xc3, 0x57,
0x71, 0x50, 0x62, 0x81, 0xe1, 0x3c, 0x52, 0x99,
0x81, 0xd5, 0x0d, 0x32, 0x14, 0x3a, 0x80, 0xf9,
0x6f, 0xe1, 0x42, 0x42, 0xc4, 0x79, 0x59, 0x00,
0x36, 0xb5, 0x92, 0xb5, 0x84, 0x38, 0x85, 0x37,
0x8e, 0xdd, 0x38, 0xea, 0x58, 0x89, 0x3b, 0x84,
0x40, 0x54, 0x04, 0x9f, 0xe4, 0x19, 0x8b, 0xad,
0x52, 0x3e, 0x6d, 0xe0, 0x16, 0xbf, 0xf0, 0x1d,
0x55, 0xd7, 0x2d, 0x79, 0x12, 0x0d, 0x70, 0x73,
0x30, 0x70, 0x3b, 0x98, 0xf2, 0x1f, 0x5b, 0xa6,
0x25, 0xd7, 0xe9, 0xcc, 0xd6, 0xdc, 0x68, 0xda,
0x46, 0x6d, 0xea, 0xff, 0x9d, 0x38, 0x08, 0x4a,
0xf3, 0x16, 0x28, 0x16, 0x15, 0xb6, 0x53, 0xd4,
0xb3, 0xa8, 0x50, 0x16, 0x27, 0xa4, 0x12, 0x59,
0x04, 0xa3, 0x19, 0x16, 0xc0, 0x42, 0x98, 0x95,
0xef, 0xef, 0x1f, 0x63, 0xcf, 0x39, 0xe3, 0x32,
0xb8, 0x6f, 0x76, 0x6f, 0xb2, 0x0a, 0x6b, 0x2f,
0x8c, 0xb6, 0x50, 0x34, 0x1c, 0xc7, 0x22, 0x54,
0x48, 0x33, 0x99, 0x1e, 0xe9, 0x26, 0xa4, 0x5f,
0xb1, 0xa5, 0x7d, 0x5f, 0xf4, 0xe2, 0xee, 0x23,
0xb5, 0xe0, 0x36, 0x44, 0x4f, 0x42, 0x9d, 0x4b,
0x2a, 0xc2, 0x33, 0x8b, 0xf2, 0x51, 0xbe, 0x6e,
0x5c, 0x8f, 0xe2, 0xc6, 0x2d, 0xe6, 0x7b, 0x2c,
0x50, 0xa3, 0x92, 0x33, 0xa0, 0x8f, 0x0c, 0x20,
0xbb, 0xed, 0xd6, 0x1c, 0xea, 0xc1, 0x76, 0xa4,
0x2f, 0x4f, 0x8e, 0xe5, 0x0a, 0xee, 0x46, 0x78,
0x5d, 0x27, 0x90, 0xe6, 0x5c, 0x0e, 0xad, 0xcd,
0x05, 0xb3, 0x97, 0xd6, 0x26, 0x50, 0xb9, 0xd6,
0x49, 0x21, 0xae, 0x57, 0x03, 0xc8, 0x78, 0x07,
0xdb, 0xac, 0xeb, 0xb4, 0x69, 0x46, 0x41, 0x2d,
0xbf, 0xf0, 0x59, 0x6f, 0x56, 0x4e, 0xa4, 0x84,
0x6f, 0x1d, 0xe6, 0xe0, 0x8e, 0xb3, 0x37, 0x6d,
0xf6, 0x56, 0x0e, 0x02, 0x23, 0xbd, 0xc9, 0x10,
0x76, 0x3a, 0x26, 0xb5, 0x7d, 0x25, 0x66, 0xdb,
0x2b, 0x1a, 0xb2, 0x98, 0x60, 0x0e, 0xd0, 0x28,
0x6b, 0x73, 0x8f, 0x97, 0x1d, 0xc3, 0xe4, 0xc8,
0xae, 0x0e, 0x55, 0x92, 0x9e, 0x93, 0x11, 0xf9,
0x2e, 0xce, 0x0f, 0x26, 0xac, 0x13, 0x58, 0xea,
0xfa, 0x5d, 0xfd, 0xf8, 0x0e, 0x2f, 0x80, 0xd7,
0xfd, 0x7e, 0x1b, 0x94, 0x7d, 0x3b, 0x05, 0x07,
0xa3, 0x2c, 0x3f, 0x1f, 0x3a, 0x1d, 0xbc, 0x44,
0xd2, 0x72, 0xdc, 0x3b, 0xb2, 0xfd, 0x12, 0xce,
0xdd, 0xb7, 0x38, 0xb4, 0x9f, 0x5b, 0xe0, 0xe6,
0x31, 0x16, 0xc2, 0x97, 0x84, 0x76, 0x86, 0x45,
0x29, 0xe5, 0xff, 0xed, 0x3f, 0x02, 0xa1, 0x9b,
0x37, 0xc7, 0xd5, 0xfd, 0x45, 0xd6, 0x94, 0x4e,
0x89, 0xbd, 0x58, 0x34, 0x89, 0x32, 0xc8, 0x3c,
0xe1, 0xbb, 0x20, 0xdb, 0xcd, 0xb3, 0x2c, 0x0a,
0x58, 0xa8, 0x6e, 0x3f, 0xa1, 0x79, 0x53, 0x9f,
0xae, 0x06, 0x29, 0x51, 0x6c, 0x0c, 0x6f, 0xee,
0x46, 0xc0, 0xee, 0xf0, 0x3d, 0x38, 0xde, 0xd9,
0xec, 0x6a, 0xf3, 0x36, 0x47, 0x4d, 0x8d, 0x1b,
0x44, 0xaf, 0xf3, 0x95, 0x55, 0x0f, 0x3b, 0x07,
0xdb, 0x10, 0x2a, 0xc9, 0x13, 0x95, 0x1a, 0x15,
0x9b, 0xb7, 0x57, 0x2a, 0x3a, 0xd7, 0xbe, 0x66,
0xa3, 0xaf, 0x45, 0xa7, 0x39, 0x14, 0xbe, 0x6d,
0xec, 0xf9, 0xd9, 0x11, 0x88, 0xcf, 0xc6, 0xa1,
0xda, 0xc8, 0x1f, 0x5a, 0xdd, 0x9c, 0x72, 0x9b,
0x72, 0xe4, 0x20, 0x0e, 0x6a, 0x86, 0xdd, 0x8c,
0x9b, 0x12, 0xc0, 0x6c, 0x06, 0x76, 0x36, 0x25,
0xe3, 0x64, 0x27, 0x31, 0x2e, 0x7d, 0x9a, 0x52,
0x0d, 0x04, 0x38, 0xeb, 0x7f, 0x1a, 0x31, 0x85,
0x05, 0x4c, 0x3d, 0x50, 0xc4, 0x37, 0x2c, 0x8d,
0x49, 0x56, 0x39, 0x0a, 0xc5, 0xdf, 0x45, 0xe3,
0x86, 0x5a, 0x18, 0x8f, 0xb6, 0xd7, 0x1e, 0xa0,
0x6c, 0x3d, 0x3f, 0xce, 0x70, 0x09, 0x60, 0xd0,
0xba, 0x2e, 0x1f, 0x33, 0x0d, 0x49, 0x2e, 0x85,
0x73, 0xdf, 0xdf, 0xff, 0x19, 0x78, 0xa2, 0xff,
0xea, 0x70, 0x40, 0xc0, 0x2c, 0xaf, 0xc1, 0xe4,
0x23, 0x42, 0x46, 0xd1, 0xa1, 0x6e, 0x4d, 0x46,
0x80, 0x75, 0xf0, 0x50, 0xbc, 0x46, 0x3c, 0x18,
0x09, 0x78, 0x10, 0xd8, 0x7a, 0x7a, 0x65, 0xea,
0x89, 0x02, 0xc8, 0x85, 0xae, 0x67, 0xb0, 0x5f,
0xf6, 0xe6, 0xb0, 0x63, 0xff, 0x3e, 0x78, 0x84,
0xe1, 0x27, 0x4c, 0xd9, 0x2b, 0x0f, 0x51, 0xaa,
0x23, 0x4b, 0x1e, 0xe0, 0x3a, 0xbe, 0xdd, 0x09,
0x51, 0xf4, 0xdf, 0xea, 0x32, 0xea, 0x44, 0xff,
0xb9, 0x37, 0xe4, 0x73, 0xfb, 0x9e, 0xea, 0x3e,
0xb1, 0xd1, 0xfb, 0x8d, 0x3c, 0xc5, 0x2f, 0xb2,
0x8a, 0x3a, 0xb8, 0x16, 0xa6, 0xe9, 0xca, 0x09,
0x23, 0x9c, 0xb7, 0x1f, 0x30, 0xcd, 0xc5, 0xff,
0x39, 0xf7, 0x81, 0x69, 0xd9, 0x60, 0xd2, 0x6d,
0x56, 0x32, 0xfe, 0x92, 0xca, 0x7e, 0x38, 0x60,
0x80, 0xd0, 0x82, 0x17, 0x9d, 0x6c, 0x1d, 0x79,
0x58, 0x3c, 0x8e, 0x59, 0x07, 0xcd, 0x18, 0x87,
0xb6, 0xf3, 0xc4, 0x9b, 0x3f, 0xe0, 0xa2, 0xbc,
0xba, 0x7d, 0x76, 0x0d, 0xe0, 0x39, 0x25, 0x2f,
0x10, 0xf8, 0x58, 0x56, 0xaf, 0xd7, 0x6d, 0xa4,
0x02, 0xbb, 0x06, 0xbc, 0x76, 0xac, 0x02, 0xbe,
0x6c, 0x94, 0x23, 0x1f, 0xf2, 0x44, 0xa1, 0x49,
0x2c, 0x0d, 0x13, 0x16, 0x02, 0x5f, 0xe9, 0xd9,
0x34, 0x23, 0x62, 0xb5, 0x46, 0x68, 0x29, 0xdb,
0x21, 0x03, 0x4a, 0x37, 0xfe, 0xe2, 0xb9, 0x77,
0x97, 0xdd, 0x7a, 0xde, 0x81, 0x27, 0xd5, 0xe0,
0x6b, 0xc3, 0x98, 0xc7, 0xf3, 0xd9, 0x8a, 0x4a,
0xb7, 0x27, 0xda, 0xfb, 0x0c, 0x29, 0x66, 0x8b,
0xdb, 0x3c, 0x6a, 0x83, 0xeb, 0x02, 0x62, 0xea,
0x5d, 0xa9, 0x9b, 0xa6, 0x74, 0x29, 0x4a, 0x2f,
0xda, 0xd3, 0x2c, 0x8e, 0x62, 0x5b, 0xc1, 0x06,
0x33, 0xc8, 0x4c, 0x25, 0x57, 0xda, 0x0a, 0x37,
0x09, 0xd8, 0x13, 0xa2, 0x54, 0x02, 0x1c, 0x51,
0xfb, 0xec, 0xf4, 0x78, 0xce, 0x3a, 0x11, 0x6d,
0x69, 0xf7, 0x5c, 0xa7, 0x6b, 0x18, 0xa0, 0x53,
0x03, 0xa2, 0x8d, 0x9c, 0x89, 0x54, 0x1f, 0x01,
0x6d, 0xed, 0xa1, 0xdf, 0x20, 0xa3, 0xed, 0x41,
0x39, 0x4e, 0x65, 0x0d, 0x6d, 0xea, 0x15, 0xe5,
0x67, 0xee, 0x89, 0x92, 0x6f, 0x38, 0x68, 0x6c,
0xd0, 0x59, 0xab, 0xff, 0xe8, 0x5d, 0xbb, 0xd2,
0xd0, 0x77, 0xa8, 0x34, 0x55, 0x2b, 0xee, 0x1d,
0x1c, 0x3a, 0xd2, 0xd0, 0xe2, 0x64, 0xe3, 0x6d,
0x7d, 0x5f, 0x3b, 0xe5, 0x2f, 0x81, 0xcd, 0x47,
0x40, 0x20, 0xdd, 0x4e, 0x2a, 0x75, 0xab, 0xe2,
0xc4, 0x8b, 0xf1, 0x33, 0x47, 0x45, 0x01, 0x41,
0xa2, 0xb3, 0x8b, 0xa7, 0x1b, 0x14, 0x85, 0xa9,
0x0e, 0xe1, 0x92, 0xf2, 0x9b, 0xbf, 0xd0, 0x38,
0x8c, 0x2d, 0xc7, 0x09, 0x5f, 0xcf, 0x98, 0x00,
0xdf, 0x7e, 0x85, 0x12, 0xb4, 0x86, 0xf0, 0xea,
0x85, 0x96, 0x20, 0x2b, 0x52, 0x24, 0xc2, 0x90,
0x17, 0xef, 0x21, 0xb3, 0x28, 0x70, 0x22, 0x8c,
0xbd, 0x7d, 0x9e, 0xfb, 0xd7, 0x05, 0x91, 0x60,
0xe9, 0x56, 0x9d, 0x46, 0xea, 0xb3, 0xe4, 0x65,
0xed, 0xd3, 0x76, 0x8a, 0xbd, 0x1e, 0xaa, 0x0e,
0xf4, 0xf7, 0x26, 0xa3, 0x98, 0x82, 0x30, 0x17,
0x5e, 0x88, 0xd8, 0x0c, 0x54, 0x14, 0x9d, 0x30,
0x1c, 0xd8, 0xda, 0x1f, 0xac, 0x4b, 0xae, 0x38,
0x48, 0xeb, 0x6b, 0x45, 0xc6, 0x09, 0x6c, 0xcd,
0xc2, 0x2c, 0x1e, 0xe9, 0x79, 0x00, 0xe5, 0xfd,
0x4a, 0xaf, 0xaa, 0x48, 0xcd, 0xd0, 0xea, 0x29,
0x2f, 0x27, 0x71, 0xcd, 0x3b, 0x3b, 0x3e, 0xe1,
0x00, 0x4c, 0x43, 0x70, 0x27, 0x6b, 0x98, 0x4c,
0x13, 0x3b, 0xbf, 0xe0, 0x04, 0xec, 0x5e, 0x2c,
0x72, 0xe6, 0x08, 0x1c, 0xd5, 0x84, 0x7c, 0x48,
0x50, 0x79, 0x8d, 0xa5, 0x1c, 0x72, 0xda, 0xae,
0x3c, 0x5b, 0xb3, 0xb1, 0x55, 0xb9, 0x91, 0xcc,
0x78, 0x0d, 0x01, 0x0e, 0x42, 0x3d, 0xa8, 0xf6,
0xdf, 0x98, 0x03, 0x70, 0xd3, 0x50, 0xbd, 0xd3,
0xda, 0x1f, 0x0f, 0x00, 0xc9, 0x69, 0x08, 0x23,
0x88, 0x00, 0x80, 0x69, 0xe6, 0xee, 0x25, 0x7c,
0x9e, 0x8d, 0xba, 0x11, 0xc0, 0xbb, 0xbb, 0x7c,
0xc4, 0xad, 0xf5, 0xff, 0xb1, 0x08, 0x9c, 0x78,
0x31, 0x77, 0x91, 0xd7, 0x48, 0xa5, 0xc4, 0xe2,
0x35, 0x13, 0x96, 0x54, 0xc4, 0xdc, 0x6d, 0x64,
0x94, 0x10, 0x3b, 0x12, 0x41, 0x32, 0x98, 0xbb,
0xe5, 0xf7, 0xb4, 0x5a, 0x86, 0xcf, 0xfe, 0xa2,
0xec, 0xae, 0x22, 0x51, 0xff, 0xfe, 0xbe, 0x5e,
0x82, 0x4d, 0x17, 0x1f, 0x85, 0xbc, 0x80, 0x68,
0x38, 0x03, 0xe0, 0x17, 0x2c, 0x96, 0xca, 0x0b,
0x7b, 0xf4, 0x1a, 0x4e, 0x51, 0x63, 0x3e, 0x28,
0x17, 0x7d, 0x0e, 0xa8, 0x8f, 0x60, 0xeb, 0x56,
0x08, 0x1d, 0x8c, 0x0a, 0x5a, 0xed, 0x16, 0x66,
0xbb, 0x16, 0x8f, 0xea, 0xa6, 0x3c, 0x38, 0x25,
0xe8, 0x4f, 0x19, 0x08, 0xed, 0x8d, 0x85, 0x3f,
0x4c, 0xbe, 0x81, 0xb5, 0x39, 0x74, 0xac, 0x22,
0x5b, 0xa2, 0x03, 0xa6, 0xf0, 0x90, 0x2e, 0x49,
0xc2, 0xa7, 0x9f, 0x91, 0x3f, 0x3c, 0x9d, 0x6f,
0xf5, 0x54, 0xf6, 0xe9, 0x86, 0x19, 0x02, 0xb9,
0x47, 0xbe, 0x29, 0xa2, 0x85, 0x25, 0x89, 0x96,
0x00, 0xb3, 0xbb, 0x70, 0xba, 0xa6, 0xe3, 0xe0,
0x43, 0xad, 0x51, 0x8d, 0x97, 0xc1, 0x6c, 0xc2,
0xe6, 0x88, 0xc0, 0x1c, 0xde, 0xc7, 0xd7, 0xd1,
0x16, 0xd4, 0xf5, 0x2c, 0xfa, 0xcb, 0x65, 0x64,
0x49, 0xaa, 0x6e, 0x08, 0x53, 0x4f, 0x6c, 0xc7,
0x9b, 0xe9, 0x97, 0x85, 0x60, 0x42, 0x48, 0xc9,
0xe5, 0x03, 0x8c, 0x2f, 0x67, 0x83, 0x34, 0xcc,
0x3b, 0x7f, 0x6b, 0xbd, 0xad, 0xfe, 0x66, 0x42,
0x3a, 0x1f, 0x8e, 0xad, 0xff, 0x2a, 0xf9, 0xf5,
0xb3, 0xf6, 0x4b, 0xde, 0x0a, 0xb0, 0xbd, 0xea,
0x30, 0xf7, 0x29, 0x20, 0xa9, 0x56, 0x1b, 0xd9,
0x24, 0x58, 0x6e, 0xf3, 0x09, 0x0e, 0x8a, 0xf8,
0x95, 0x71, 0x97, 0xa4, 0xa7, 0xb1, 0xe3, 0x54,
0x44, 0x60, 0xb6, 0xaa, 0xee, 0xa1, 0xa5, 0x24,
0x78, 0xa9, 0xaf, 0x32, 0xc0, 0xf1, 0xf8, 0x12,
0x3c, 0x05, 0x59, 0xc3, 0xff, 0xad, 0xdb, 0xfb,
0xca, 0x6b, 0xad, 0x8a, 0xe8, 0x3a, 0x82, 0x44,
0xcc, 0x10, 0x7f, 0xea, 0x31, 0x70, 0x48, 0xfb,
0xbf, 0x34, 0xd1, 0x8c, 0xfb, 0x75, 0x11, 0x7a,
0x38, 0xb8, 0xac, 0x4a, 0x7f, 0x11, 0xd4, 0xb5,
0x09, 0xac, 0xe8, 0xba, 0x19, 0x81, 0xc8, 0xef,
0x41, 0xd4, 0xa1, 0x50, 0xa4, 0xf0, 0x22, 0xf6,
0xc5, 0x1b, 0x88, 0xcf, 0xf3, 0x33, 0xb0, 0xf0,
0x1e, 0xb1, 0x22, 0x30, 0x48, 0x2e, 0x7a, 0x4b,
0xaa, 0x9c, 0x73, 0x8a, 0x4e, 0x3b, 0x31, 0x2f,
0x37, 0x1a, 0xe5, 0xc5, 0x57, 0x49, 0x5c, 0x6c,
0x12, 0x60, 0xe0, 0xf6, 0x5b, 0xee, 0xac, 0x57,
0x63, 0x8e, 0xa0, 0x5d, 0x4c, 0xee, 0xed, 0x84,
0xcd, 0x1d, 0x57, 0xd4, 0x2b, 0x87, 0x61, 0x30,
0x7a, 0x24, 0x26, 0xae, 0x4d, 0xfe, 0x18, 0xdf,
0xf4, 0x2d, 0xd6, 0xfc, 0x95, 0xda, 0x6a, 0x2d,
0xed, 0xb5, 0x1c, 0xb9, 0xe4, 0x60, 0xc1, 0x72,
0x5b, 0x12, 0xdf, 0x17, 0x1e, 0x30, 0x96, 0x4b,
0x9f, 0x05, 0xe7, 0x51, 0x21, 0x39, 0x98, 0xcc,
0xbd, 0xe4, 0xc9, 0x1f, 0xfb, 0xcf, 0xfa, 0x09,
0x4a, 0x4b, 0x86, 0xaf, 0xee, 0x05, 0x9b, 0x54,
0x44, 0xc9, 0xb6, 0xa9, 0x5d, 0x97, 0xa4, 0x76,
0xe0, 0x85, 0x88, 0xdb, 0x69, 0xc8, 0x8e, 0x24,
0x18, 0xff, 0x73, 0x98, 0x9b, 0x84, 0x7a, 0x6a,
0x50, 0x80, 0x58, 0x5e, 0xf4, 0xb3, 0x25, 0x0a,
0x50, 0x5d, 0x5b, 0x49, 0x99, 0x01, 0x72, 0xad,
0xcc, 0x7f, 0x12, 0xe6, 0x39, 0x35, 0x49, 0x71,
0xab, 0xe8, 0x40, 0x09, 0xb3, 0x5c, 0xc8, 0x53,
0xdc, 0xab, 0x13, 0x01, 0x61, 0xc8, 0x88, 0xca,
0x0f, 0x60, 0x5f, 0x9c, 0xa0, 0x25, 0x6d, 0xd1,
0xf7, 0x2c, 0x7d, 0x1d, 0x5b, 0x93, 0x13, 0x09,
0xcd, 0xfd, 0x71, 0xf4, 0xa6, 0xf9, 0x8c, 0x04,
0x40, 0x85, 0x0e, 0x4b, 0x9e, 0x56, 0x97, 0x93,
0x67, 0x6d, 0x2a, 0x89, 0x96, 0x50, 0x57, 0x9e,
0x06, 0xc6, 0xdb, 0xf8, 0x3a, 0xbf, 0x6a, 0xf6,
0xd8, 0x17, 0xb0, 0x91, 0x71, 0x43, 0x63, 0x38,
0x0b, 0xd7, 0x26, 0xd6, 0xf6, 0x6e, 0x03, 0xf2,
0x4c, 0xb9, 0x77, 0x67, 0x9b, 0x3f, 0x9b, 0x4e,
0x2c, 0x91, 0xe9, 0xb5, 0xf1, 0x3a, 0xb3, 0x3b,
0xc2, 0x0c, 0x29, 0xfb, 0xc2, 0x00, 0x5b, 0xa4,
0x53, 0x6b, 0x33, 0x86, 0x0a, 0x5d, 0xea, 0x3e,
0xc0, 0x27, 0xd6, 0xfd, 0x60, 0x0a, 0x29, 0x81,
0x15, 0x6b, 0xed, 0x54, 0x18, 0x9f, 0x47, 0x99,
0x4e, 0x4f, 0xfa, 0xbd, 0x54, 0x36, 0xc3, 0x38,
0xdc, 0x79, 0x86, 0xfd, 0x14, 0xaf, 0x80, 0xf8,
0x22, 0x9d, 0x47, 0x9b, 0x8f, 0x49, 0xbb, 0x30,
0x41, 0x43, 0x7e, 0x0b, 0xe4, 0x2e, 0x81, 0x19,
0x63, 0x7c, 0x70, 0xf7, 0x97, 0x34, 0xd1, 0xa8,
0x73, 0x7b, 0x7c, 0xc6, 0x1f, 0xe4, 0x1e, 0x8b,
0x65, 0x19, 0xaf, 0x1d, 0xd6, 0x62, 0x1b, 0xbc,
0x19, 0xa8, 0x36, 0x80, 0x80, 0x16, 0x3c, 0xe5,
0x76, 0x07, 0xf9, 0x03, 0xfa, 0x51, 0xce, 0xfd,
0x69, 0x0f, 0x7b, 0x1c, 0xab, 0x03, 0xdb, 0x20,
0xc6, 0xa6, 0x96, 0x35, 0x4e, 0x3f, 0xbc, 0x5a,
0x41, 0x1e, 0xc4, 0x68, 0xa6, 0xee, 0x86, 0x4c,
0xc0, 0xf4, 0x66, 0xef, 0x96, 0x17, 0x91, 0xc1,
0x3a, 0x1c, 0x7e, 0x56, 0x58, 0xca, 0x41, 0xc9,
0xfc, 0xd7, 0x80, 0xba, 0xf6, 0x22, 0x7a, 0xe8,
0x33, 0xab, 0x5d, 0xf3, 0x33, 0x61, 0x73, 0x90,
0x30, 0xfc, 0x0b, 0xcb, 0xf0, 0x15, 0x40, 0xe5,
0xa6, 0x1d, 0x3e, 0xd9, 0xf6, 0xba, 0xd3, 0x55,
0x0c, 0x3c, 0x15, 0xb0, 0x9a, 0x4c, 0x41, 0x53,
0x93, 0xdc, 0x42, 0x71, 0x01, 0xcf, 0x9f, 0xe6,
0xdb, 0x99, 0x8e, 0xd2, 0x3c, 0x09, 0x6f, 0xa4,
0x03, 0x77, 0x4d, 0x5f, 0xb0, 0xba, 0x36, 0x81,
0x1a, 0x15, 0xfd, 0x31, 0x26, 0x37, 0xd8, 0xb6,
0x94, 0xbb, 0x06, 0xab, 0x41, 0x19, 0xd0, 0xd1,
0xd9, 0x37, 0x50, 0xd9, 0xe2, 0x19, 0xfb, 0x12,
0x60, 0x57, 0x2d, 0xda, 0xc0, 0xf8, 0x3d, 0xd7,
0xe7, 0x34, 0xc3, 0xa9, 0xb6, 0x1f, 0x74, 0x0b,
0x08, 0xc1, 0xda, 0x2f, 0x47, 0xa6, 0x48, 0xc4,
0x71, 0x77, 0xe1, 0x02, 0xa1, 0xdd, 0x98, 0x72,
0x97, 0x62, 0xc6, 0x7b, 0xde, 0x3e, 0x79, 0xcd,
0xa6, 0x59, 0xcf, 0xe1, 0x99, 0xd7, 0xc8, 0x51,
0x58, 0x06, 0x3a, 0xed, 0x8e, 0x19, 0x20, 0xcc,
0x3b, 0x9a, 0x3c, 0x98, 0xdf, 0xe2, 0xd9, 0x96,
0x3c, 0x55, 0x28, 0x54, 0xf9, 0x74, 0xaa, 0xc8,
0x5e, 0xeb, 0x05, 0x47, 0xc0, 0x43, 0x27, 0x85,
0xac, 0x63, 0x97, 0x2a, 0xfd, 0x67, 0xba, 0xe1,
0xf2, 0xf4, 0xf5, 0x4a, 0x16, 0x61, 0x12, 0x28,
0x3d, 0x69, 0xd3, 0x74, 0x63, 0x1b, 0x7a, 0x8e,
0x10, 0xe4, 0xbc, 0xff, 0xc2, 0xe8, 0x9e, 0x37,
0x24, 0xba, 0xfa, 0x85, 0xf1, 0xe3, 0xd0, 0xd0,
0x57, 0x83, 0x24, 0xec, 0x0d, 0xad, 0x5f, 0x91,
0xb4, 0xf1, 0xd0, 0xa1, 0x84, 0x69, 0x2b, 0xcc,
0xee, 0x84, 0x9e, 0xbe, 0x5c, 0x7a, 0xb2, 0xac,
0x33, 0x56, 0x29, 0xfa, 0xbb, 0xb1, 0x8d, 0x23,
0xaf, 0x97, 0xe8, 0x44, 0x03, 0xde, 0xbe, 0xf5,
0x40, 0xbe, 0x25, 0x96, 0xbf, 0xab, 0x7d, 0x9e,
0x35, 0x9d, 0x66, 0x5e, 0x13, 0x6e, 0x28, 0x78,
0x46, 0x48, 0x7b, 0x5c, 0x1c, 0x50, 0x39, 0xa8,
0x9b, 0xfd, 0xbe, 0x1e, 0x64, 0x57, 0x77, 0x6b,
0x14, 0x10, 0xb1, 0x48, 0x18, 0x4f, 0x9a, 0x23,
0x88, 0x0e, 0xe5, 0x17, 0x3e, 0xea, 0x6f, 0x27,
0x9f, 0x7c, 0xc6, 0x99, 0xfb, 0x41, 0x34, 0xdb,
0xf7, 0x52, 0x60, 0x7f, 0x1f, 0x76, 0x02, 0x3c,
0x80, 0x0e, 0xb9, 0x0d, 0x78, 0x24, 0xcd, 0xc8,
0xcc, 0x6a, 0xaf, 0xcf, 0xdb, 0xa3, 0x1f, 0x59,
0x4b, 0xec, 0x82, 0x83, 0xff, 0x0f, 0x9f, 0x63,
0x31, 0x0f, 0xd1, 0x0e, 0xbe, 0xaa, 0x21, 0x8a,
0x50, 0xc5, 0xa3, 0x21, 0x99, 0xfc, 0xb7, 0x19,
0xe7, 0xe1, 0xdf, 0x23, 0xc4, 0x54, 0x6d, 0xc2,
0x0f, 0x35, 0xcd, 0xf8, 0x3d, 0xae, 0x8c, 0x9c,
0x74, 0xb7, 0xd3, 0x87, 0x5d, 0x99, 0x58, 0x84,
0x93, 0x41, 0x5d, 0x03, 0x8a, 0x5f, 0x73, 0x25,
0xc5, 0x5f, 0x3c, 0x60, 0x55, 0x3f, 0x53, 0x70,
0x1f, 0xaa, 0x73, 0xfe, 0x0b, 0x23, 0xa0, 0xd3,
0x36, 0xfe, 0xfe, 0x5e, 0xf7, 0x0c, 0xc6, 0x29,
0x37, 0x5d, 0xa2, 0x06, 0xb8, 0x1c, 0x7f, 0x6b,
0x2b, 0x96, 0x2a, 0xe6, 0x56, 0x26, 0x51, 0xd6,
0xd7, 0xfb, 0xff, 0x11, 0xb2, 0x94, 0x6d, 0x92,
0xca, 0x07, 0x13, 0xe4, 0x40, 0x84, 0x36, 0xb5,
0xae, 0xe5, 0x67, 0x7f, 0x07, 0x86, 0xe0, 0x7d,
0x85, 0x22, 0xd7, 0xc3, 0xb8, 0x71, 0x6e, 0x5b,
0x29, 0x5e, 0xf3, 0xfa, 0x62, 0x94, 0xcf, 0xa6,
0x54, 0x9c, 0x95, 0x9c, 0x9c, 0xa3, 0x51, 0xfb,
0x82, 0x86, 0x76, 0x67, 0x5d, 0x25, 0x74, 0xef,
0x58, 0xc7, 0x45, 0x30, 0xf2, 0xec, 0x42, 0xbd,
0x3a, 0xc8, 0x88, 0x07, 0x78, 0xaf, 0x8d, 0x10,
0xc5, 0x93, 0xcc, 0x65, 0x72, 0x65, 0xf9, 0xfd,
0xb9, 0x93, 0x09, 0x0b, 0x3d, 0xec, 0x17, 0xa3,
0xb3, 0xe0, 0x76, 0x33, 0x51, 0x01, 0x03, 0x0f,
0x72, 0xff, 0xd9, 0xd5, 0x35, 0xb0, 0xef, 0xc9,
0xa5, 0xef, 0xd6, 0x8d, 0x52, 0xe0, 0xae, 0x19,
0x79, 0x30, 0x25, 0xfe, 0x2f, 0xbe, 0xf3, 0xe0,
0x87, 0x9a, 0xb9, 0x6d, 0x0f, 0xfb, 0xcc, 0x2c,
0x94, 0x59, 0xee, 0xf1, 0xce, 0xbd, 0x34, 0x6d,
0x05, 0xf5, 0xd0, 0xd9, 0xcf, 0x29, 0x75, 0x67,
0xd3, 0x72, 0x29, 0x9a, 0x0e, 0xb1, 0x66, 0x3a,
0x25, 0x48, 0x8c, 0x8b, 0x16, 0x4f, 0xe8, 0x99,
0xfa, 0xad, 0x57, 0x2f, 0x45, 0xd0, 0x14, 0xd9,
0xc3, 0x10, 0xf3, 0xe9, 0x6f, 0x60, 0xc4, 0xc5,
0x8d, 0xf0, 0x77, 0xc9, 0x4b, 0x29, 0xa5, 0xc1,
0x35, 0x87, 0xcf, 0x5c, 0x41, 0x45, 0x83, 0xf1,
0x76, 0x78, 0x4c, 0x04, 0x60, 0x39, 0xf8, 0x4f,
0x19, 0x4f, 0x92, 0x7a, 0x23, 0xd1, 0xc5, 0x5c,
0xcf, 0x21, 0xbb, 0x99, 0xde, 0x68, 0x49, 0xfa,
0xfb, 0x3c, 0xa9, 0xbc, 0x99, 0x80, 0x82, 0x39,
0x44, 0x87, 0x56, 0x6a, 0xf1, 0x7b, 0x5c, 0x11,
0x32, 0x89, 0x0e, 0x7c, 0xa0, 0xc5, 0x82, 0xc7,
0x0c, 0x61, 0xa1, 0x6f, 0x9e, 0x34, 0x67, 0x9e,
0xe2, 0xdd, 0xe8, 0x9a, 0x54, 0xa2, 0x6f, 0xf9,
0xf6, 0xae, 0x15, 0xc0, 0x31, 0xfa, 0x2b, 0xb9,
0x11, 0xfb, 0x6a, 0xcb, 0xef, 0x05, 0x2e, 0xa7,
0xd9, 0x2b, 0x32, 0xc7, 0x96, 0x71, 0xb5, 0x17,
0x0b, 0xbf, 0x34, 0xaf, 0x76, 0x94, 0xdf, 0xf0,
0x75, 0x52, 0xa6, 0x48, 0x88, 0x91, 0x1c, 0xd7,
0x2f, 0x1a, 0xfa, 0x42, 0xb6, 0x57, 0xfc, 0x68,
0xd1, 0xe2, 0x6b, 0x5a, 0x20, 0xf7, 0x45, 0xe1,
0xd6, 0xc3, 0x8f, 0xfc, 0x8d, 0x7b, 0xd5, 0xa3,
0x01, 0x89, 0x6c, 0x6e, 0x18, 0xa4, 0x98, 0x90,
0x8d, 0x27, 0xf2, 0xde, 0x0f, 0xe7, 0x66, 0x1a,
0xbf, 0x66, 0x4d, 0x84, 0x98, 0x61, 0x61, 0x06,
0xed, 0x62, 0x60, 0xb9, 0xab, 0x54, 0x72, 0x66,
0xf0, 0xbf, 0x8c, 0xbc, 0xf1, 0xa6, 0x81, 0xfa,
0x17, 0xb4, 0x14, 0xb5, 0x2e, 0x67, 0x27, 0xc1,
0xaf, 0xab, 0x21, 0x02, 0x0a, 0x9b, 0xf6, 0xe9,
0x58, 0xa6, 0xd4, 0xd4, 0x42, 0xd8, 0xa6, 0xb2,
0xe8, 0x28, 0x76, 0xb6, 0x6f, 0xcf, 0xf0, 0xb8,
0xc9, 0x9a, 0xe4, 0x30, 0x54, 0x71, 0x5e, 0x9c,
0xdb, 0x57, 0x5c, 0x07, 0x9f, 0x8c, 0xdd, 0x66,
0xcb, 0x4a, 0x25, 0xd7, 0x37, 0xfe, 0xcc, 0xd0,
0xe2, 0xd9, 0x96, 0x71, 0xfe, 0xdb, 0x40, 0xe4,
0xde, 0x79, 0x1d, 0x96, 0xf0, 0x7d, 0xa7, 0x7f,
0x09, 0x72, 0x35, 0xdd, 0x68, 0xda, 0x94, 0x5d,
0x6b, 0x17, 0xbd, 0x97, 0x3b, 0x91, 0x35, 0xd0,
0x00, 0xee, 0xb7, 0xd9, 0x1d, 0xf5, 0xb4, 0xdb,
0xfe, 0x60, 0x52, 0xc7, 0xa3, 0x3f, 0xc9, 0x80,
0xa8, 0xaf, 0x88, 0xe3, 0x65, 0xa3, 0x5a, 0xd2,
0x48, 0xfa, 0x6b, 0x7f, 0x9b, 0xf2, 0xba, 0x99,
0xda, 0xe8, 0xdc, 0x3a, 0xca, 0x45, 0xda, 0x56,
0xcb, 0x56, 0xaa, 0xe8, 0x16, 0x55, 0x26, 0xf7,
0xcc, 0x2b, 0xbc, 0x5a, 0x05, 0x16, 0xa9, 0xce,
0x2a, 0xd4, 0x7a, 0x2a, 0x76, 0xc3, 0xa5, 0xfc,
0xce, 0xc3, 0xf3, 0x80, 0x4e, 0x3d, 0x6b, 0xc4,
0x92, 0x68, 0x74, 0xf5, 0x3c, 0xf0, 0x68, 0x4e,
0x91, 0xc8, 0x45, 0x7f, 0x7c, 0x79, 0x44, 0x94,
0x29, 0x60, 0x3d, 0xcf, 0xbf, 0x41, 0xbb, 0xaa,
0xc5, 0x1d, 0xed, 0x3e, 0x54, 0x68, 0x51, 0xeb,
0x5e, 0xf7, 0xee, 0x71, 0x07, 0x48, 0x11, 0xb8,
0x4b, 0xda, 0xfb, 0x19, 0x39, 0xf1, 0xb0, 0x35,
0x9e, 0x70, 0xce, 0xd5, 0x2e, 0xed, 0xdf, 0x8f,
0x71, 0x43, 0xb9, 0x9a, 0x28, 0xd9, 0x92, 0xe4,
0x05, 0xaa, 0x15, 0x06, 0x9b, 0x42, 0xea, 0x4c,
0x3f, 0x26, 0x79, 0x72, 0x39, 0x29, 0x3d, 0x72,
0xdb, 0xbe, 0xd8, 0x88, 0xaf, 0xb0, 0xf2, 0x74,
0xb5, 0xf2, 0x16, 0xa9, 0xcd, 0x07, 0x27, 0xac,
0x3f, 0x87, 0x54, 0xcf, 0xd9, 0xfa, 0x05, 0x70,
0xe1, 0x43, 0xe9, 0xba, 0x45, 0xf5, 0x05, 0xf3,
0xf6, 0xdd, 0x5f, 0x19, 0xa3, 0x63, 0x8a, 0x1a,
0x95, 0xbd, 0xad, 0x61, 0xf9, 0xf2, 0x25, 0x8c,
0x46, 0x6f, 0x0c, 0x48, 0xe1, 0x56, 0x9b, 0x87,
0xa0, 0xe9, 0x24, 0x3b, 0xb4, 0x58, 0x8d, 0xd1,
0x57, 0xa0, 0xa6, 0x28, 0x68, 0xcf, 0x60, 0xca,
0xa6, 0xd0, 0x6e, 0xca, 0xa4, 0x68, 0x10, 0x90,
0x51, 0x8b, 0x2b, 0x59, 0x15, 0x73, 0xe1, 0xb3,
0x48, 0x5d, 0xaf, 0x3f, 0x3d, 0x1f, 0x72, 0x7b,
0xea, 0x3f, 0xdd, 0xa1, 0x5e, 0x57, 0xdf, 0x91,
0x7a, 0xa9, 0xe7, 0xe8, 0xdd, 0x4e, 0xb6, 0x73,
0x74, 0x3a, 0x08, 0xea, 0x45, 0x17, 0x4a, 0xc0,
0x0f, 0xe5, 0x9e, 0x75, 0x30, 0xee, 0xba, 0xe3,
0xf3, 0xab, 0x12, 0x6c, 0xc4, 0xea, 0xc3, 0x6b,
0xa2, 0x23, 0x17, 0xbb, 0x84, 0x75, 0xad, 0x04,
0xe4, 0x18, 0xeb, 0xe9, 0xee, 0x1c, 0xd0, 0x83,
0xde, 0x49, 0x94, 0xe3, 0x19, 0x1f, 0x52, 0x09,
0x67, 0xe7, 0x81, 0xbc, 0xe6, 0x48, 0x90, 0x18,
0xcc, 0xe1, 0xc2, 0xff, 0xdb, 0x89, 0x40, 0x73,
0xfb, 0x85, 0x03, 0x8f, 0x8a, 0xe4, 0xfe, 0xc6,
0x79, 0x13, 0x90, 0xe5, 0x24, 0x85, 0x6f, 0x25,
0x82, 0x81, 0xdf, 0x03, 0x86, 0xdf, 0xa3, 0x79,
0x2d, 0xe4, 0xbe, 0x61, 0x34, 0x00, 0xd0, 0x05,
0xd6, 0x62, 0xc8, 0x65, 0x16, 0x8e, 0x6b, 0xa9,
0xec, 0x6d, 0x9a, 0x89, 0x22, 0x22, 0xa9, 0x8f,
0xe5, 0x2b, 0x6c, 0x5d, 0xab, 0xe2, 0x46, 0x62,
0x97, 0xbd, 0x5b, 0xe2, 0xf4, 0xba, 0x30, 0x40,
0x62, 0x4a, 0x6e, 0x34, 0xef, 0x5e, 0x42, 0x65,
0xea, 0xec, 0xa5, 0x87, 0x2b, 0x7f, 0x8a, 0xc1,
0x22, 0xee, 0x31, 0x15, 0x93, 0xbe, 0x0f, 0x6e,
0x1d, 0x67, 0xa2, 0x62, 0x91, 0xed, 0xf8, 0x41,
0xb0, 0xac, 0xca, 0xe5, 0xd7, 0x92, 0x26, 0xa1,
0x5b, 0x88, 0x43, 0x92, 0x44, 0x4a, 0x97, 0xe7,
0xdb, 0x75, 0x82, 0x02, 0x63, 0x69, 0xb5, 0xc4,
0x94, 0x70, 0x28, 0x6a, 0xc7, 0xa2, 0x7f, 0x7b,
0x90, 0xb8, 0x0f, 0xfb, 0xbb, 0x5b, 0xab, 0xe1,
0x3c, 0x6d, 0x1c, 0x96, 0xf3, 0x73, 0x77, 0x84,
0x18, 0x9d, 0xa6, 0xc6, 0xc1, 0xc4, 0x1d, 0x1a,
0x16, 0xd1, 0xc2, 0x2d, 0x49, 0x57, 0x51, 0x1f,
0xce, 0x19, 0xfe, 0x0d, 0x2a, 0xd2, 0x9e, 0x16,
0x4d, 0x9b, 0x86, 0x97, 0x2c, 0xbf, 0xe3, 0x47,
0xb2, 0x78, 0x02, 0x18, 0x96, 0xca, 0x2c, 0xae,
0x36, 0x3c, 0xc2, 0x09, 0xad, 0xc1, 0x52, 0x69,
0x4b, 0x3b, 0xc8, 0x28, 0xd1, 0xce, 0xc5, 0x3b,
0xc0, 0xd0, 0x24, 0x70, 0x32, 0x87, 0x4f, 0x57,
0x8d, 0x36, 0xe0, 0xc4, 0xfa, 0xc9, 0x97, 0xed,
0xc5, 0xce, 0xaf, 0xa4, 0xfa, 0x0f, 0xe4, 0xd7,
0x49, 0xc2, 0x32, 0x63, 0x6c, 0x40, 0xe2, 0x7c,
0x69, 0x92, 0x07, 0x95, 0xe9, 0x69, 0x28, 0x9a,
0x6f, 0x4b, 0x80, 0x86, 0xc0, 0x86, 0xd8, 0x63,
0x24, 0xb6, 0xa0, 0x4b, 0x12, 0x2c, 0x00, 0x11,
0x8f, 0x27, 0xc9, 0xd4, 0xfb, 0x73, 0x6a, 0x6e,
0xee, 0xf4, 0x15, 0x84, 0xa6, 0xb0, 0x90, 0x97,
0x20, 0x2a, 0x67, 0x40, 0xc6, 0x5f, 0x13, 0xe7,
0x58, 0xa5, 0xf7, 0xb8, 0x19, 0xf9, 0xa7, 0x62,
0x97, 0x1b, 0x12, 0xb2, 0xb4, 0x24, 0x3e, 0x2f,
0xee, 0x4a, 0x40, 0x0f, 0x59, 0xc7, 0x13, 0x4a,
0x39, 0x70, 0x2f, 0x43, 0x3c, 0x30, 0x5f, 0x0d,
0x42, 0x25, 0xaf, 0x1d, 0xcd, 0x51, 0x9f, 0xf9,
0x93, 0xc5, 0x0c, 0x69, 0x6b, 0x1a, 0xdf, 0xf8,
0x7e, 0x3f, 0x78, 0x0e, 0x1a, 0xf0, 0x9e, 0x90,
0x7a, 0xee, 0x3d, 0x56, 0x4d, 0xb9, 0xcd, 0x05,
0x96, 0xd4, 0x44, 0xab, 0x40, 0x95, 0x64, 0x91,
0x0a, 0x8c, 0xd6, 0x42, 0x7e, 0x5f, 0xe5, 0xb7,
0xad, 0xf3, 0x48, 0x70, 0x5a, 0xd0, 0xbd, 0x7d,
0x0e, 0xa7, 0xae, 0x65, 0xb7, 0xd3, 0xce, 0x03,
0x85, 0x82, 0xd9, 0x3f, 0x8a, 0xd1, 0x28, 0xd1,
0xed, 0x47, 0x1a, 0x19, 0x7f, 0x11, 0x9f, 0x3f,
0xae, 0xd3, 0xcf, 0xd4, 0x37, 0x9b, 0x82, 0xd7,
0xde, 0x40, 0x9a, 0xdc, 0x38, 0x8e, 0x2d, 0xfd,
0x95, 0xa5, 0x89, 0xf3, 0x1b, 0x4f, 0x59, 0xba,
0x73, 0x00, 0x18, 0xd9, 0x5b, 0xd2, 0x45, 0x6f,
0xa6, 0x08, 0xab, 0x7d, 0x11, 0x18, 0xce, 0x0a,
0x5b, 0x51, 0xbc, 0x8f, 0x34, 0x2f, 0xcc, 0x32,
0x21, 0x79, 0xde, 0x42, 0xb3, 0x7a, 0xd7, 0xca,
0x49, 0x6e, 0x73, 0xe8, 0xc0, 0x5f, 0x7e, 0x5f,
0x3b, 0x5d, 0xfd, 0x1b, 0xfc, 0x35, 0x71, 0x13,
0x08, 0xa0, 0xbb, 0xb8, 0xf5, 0x9b, 0xb7, 0x24,
0x89, 0x72, 0xec, 0xf1, 0x68, 0x3a, 0x66, 0xdf,
0x5d, 0x33, 0x3e, 0x5e, 0x22, 0x14, 0xe2, 0xa1,
0xca, 0xb6, 0x2d, 0xa2, 0x37, 0x5a, 0xef, 0x32,
0x64, 0xaf, 0x98, 0x5e, 0x3a, 0x58, 0x6f, 0x8b,
0xe7, 0x40, 0xc1, 0x68, 0x8a, 0x18, 0xa4, 0x65,
0xf8, 0x23, 0xf3, 0x06, 0x14, 0x97, 0x7e, 0x63,
0x09, 0xe1, 0xcc, 0x86, 0xee, 0x90, 0x33, 0x1d,
0x4f, 0xb5, 0x03, 0x09, 0x5c, 0x2c, 0xe9, 0x3c,
0x57, 0x9a, 0xc3, 0x56, 0x94, 0xf1, 0x51, 0xae,
0x6e, 0x54, 0x00, 0xb0, 0xa4, 0x4d, 0x82, 0x92,
0x9a, 0x9d, 0xe0, 0xc0, 0x0f, 0x8a, 0x38, 0x3d,
0x9c, 0xbf, 0x30, 0x32, 0xb0, 0x93, 0x7d, 0x28,
0xdb, 0x67, 0x05, 0xa5, 0x80, 0x82, 0x06, 0x19,
0x53, 0x0c, 0xd4, 0xa3, 0xad, 0x28, 0xaa, 0xdc,
0x43, 0xba, 0xe3, 0x0d, 0xf1, 0xc3, 0xf6, 0x9c,
0x4a, 0xf9, 0xb3, 0xd7, 0x2d, 0x0d, 0x46, 0x90,
0x11, 0xa5, 0xea, 0x62, 0x3e, 0x68, 0x20, 0xc2,
0x86, 0x85, 0x74, 0x0f, 0xb4, 0xc1, 0x9d, 0xea,
0x9e, 0xf9, 0xca, 0xd3, 0x0c, 0xef, 0x61, 0x55,
0x34, 0xe7, 0xe9, 0x50, 0x53, 0x59, 0x5e, 0x17,
0x7d, 0xc1, 0xc3, 0x4e, 0x94, 0x80, 0x0f, 0xdb,
0x5a, 0xd6, 0x4d, 0x94, 0x25, 0x61, 0x69, 0xb7,
0x3c, 0x37, 0x16, 0x75, 0x74, 0x2b, 0x7c, 0x20,
0x67, 0xd2, 0x14, 0xe0, 0x21, 0x97, 0xfa, 0xc7,
0x50, 0x87, 0x27, 0x09, 0x28, 0xad, 0x80, 0xb5,
0x4d, 0xf0, 0x11, 0x6a, 0xd5, 0xb3, 0xd2, 0xf9,
0xc0, 0x5c, 0x29, 0x4f, 0x7a, 0x72, 0x29, 0xcd,
0x5c, 0xf6, 0x78, 0x63, 0x2b, 0x4c, 0xc7, 0x9c,
0xfd, 0xc1, 0xff, 0xfd, 0x8a, 0x4f, 0x62, 0xff,
0xb4, 0x44, 0x7d, 0xff, 0xde, 0xe2, 0x4e, 0xc0,
0xd6, 0x97, 0xb2, 0xf4, 0xca, 0xaf, 0x68, 0x64,
0xc8, 0x10, 0x31, 0x50, 0x87, 0xe8, 0xf9, 0x57,
0x33, 0x7a, 0x2c, 0xbd, 0x97, 0x68, 0x8d, 0x6f,
0x3d, 0x89, 0xb0, 0xab, 0x2e, 0x98, 0x67, 0x10,
0x18, 0xf0, 0x4c, 0xc3, 0x58, 0xf7, 0x81, 0x7e,
0x7b, 0xe3, 0x5f, 0xa5, 0x9d, 0xac, 0xa4, 0xc4,
0x49, 0x71, 0x7d, 0x53, 0x0e, 0x7b, 0xd9, 0xf5,
0xf4, 0x50, 0x59, 0x4b, 0x04, 0x14, 0x41, 0x26,
0x82, 0x7b, 0xf5, 0x35, 0x73, 0x74, 0x48, 0x4a,
0x82, 0x07, 0xb0, 0xed, 0xef, 0xc0, 0x54, 0xa2,
0xb9, 0x2a, 0x05, 0x73, 0xa5, 0x30, 0xf3, 0x01,
0x6a, 0xa2, 0xb4, 0x16, 0xdb, 0xa7, 0xd5, 0x8f,
0xda, 0x85, 0x6f, 0xb8, 0xb5, 0x18, 0xde, 0x1e,
0x59, 0x66, 0xdd, 0xb2, 0xc9, 0x01, 0x6f, 0x90,
0x11, 0x82, 0xf2, 0xb2, 0xf2, 0x53, 0xe5, 0x99,
0xf3, 0x34, 0x7f, 0x79, 0xe3, 0x6f, 0x32, 0xe0,
0xba, 0x0e, 0xb9, 0x5d, 0xcc, 0x3b, 0x2f, 0x9d,
0xd4, 0xd6, 0xff, 0x2d, 0x3e, 0xc8, 0xfc, 0x24,
0x8b, 0x9e, 0xc6, 0xa4, 0xe8, 0x7f, 0x84, 0x5c,
0xb2, 0xc9, 0xeb, 0x04, 0x61, 0x1d, 0x8a, 0xee,
0x57, 0xa6, 0x8b, 0x87, 0xbf, 0x38, 0x1d, 0x58,
0x1a, 0x09, 0xca, 0x50, 0x37, 0x99, 0xfc, 0x7a,
0xbe, 0x15, 0xc6, 0x24, 0xc8, 0x81, 0x0f, 0x6d,
0x43, 0x87, 0x37, 0xa2, 0xd7, 0x28, 0xf7, 0x0f,
0x70, 0xed, 0x3b, 0x56, 0x12, 0x5d, 0xcc, 0xf3,
0x61, 0xc9, 0x28, 0xd5, 0xa6, 0x3d, 0x6a, 0x71,
0x08, 0x20, 0xd0, 0x59, 0x54, 0xc2, 0xee, 0x61,
0x03, 0x90, 0x56, 0xa2, 0x09, 0xc2, 0xed, 0x37,
0x2b, 0xad, 0x3d, 0xa2, 0x30, 0x78, 0xe5, 0xc5,
0xe3, 0x32, 0x0d, 0x52, 0x64, 0x50, 0xb7, 0x4d,
0x25, 0x5a, 0x6a, 0xc5, 0xf8, 0x25, 0xd7, 0x1f,
0x37, 0x9b, 0x62, 0x54, 0xa8, 0xa7, 0x38, 0x76,
0xd7, 0xfd, 0x52, 0x5b, 0x37, 0xe2, 0xa3, 0x18,
0x6b, 0x17, 0x75, 0x07, 0xea, 0xa6, 0x02, 0x10,
0x12, 0x1e, 0xf7, 0xe2, 0x39, 0xf0, 0xc0, 0xa6,
0x69, 0x90, 0x7d, 0x67, 0x02, 0xa0, 0x83, 0x96,
0x90, 0xe1, 0x9f, 0x72, 0x82, 0x42, 0x0d, 0x13,
0x11, 0xfc, 0x5a, 0x0e, 0x80, 0x63, 0xca, 0x78,
0x03, 0xa7, 0x15, 0xcc, 0x4d, 0xdf, 0x50, 0xf1,
0x2e, 0x40, 0x7b, 0xe3, 0x7b, 0x9a, 0x34, 0xeb,
0xc4, 0xed, 0xf2, 0x83, 0xbb, 0x98, 0x16, 0x44,
0x19, 0x5b, 0xec, 0x43, 0xf6, 0x90, 0xf8, 0x8d,
0x52, 0xf9, 0x0d, 0x33, 0xd2, 0xc8, 0xd3, 0x9f,
0x2a, 0x8d, 0xf3, 0x82, 0x52, 0x48, 0x5d, 0xc5,
0xf1, 0xe4, 0x13, 0xf0, 0xf5, 0x5c, 0xbd, 0x1f,
0xea, 0x3d, 0x12, 0xb3, 0x97, 0xba, 0xad, 0xb4,
0x0d, 0x64, 0x97, 0x86, 0x33, 0x09, 0x4f, 0x9d,
0xf8, 0xcb, 0xd0, 0x51, 0x21, 0x8d, 0x5d, 0xbf,
0xd0, 0x45, 0x1e, 0x47, 0x1b, 0x17, 0x77, 0xfd,
0xd2, 0x24, 0xeb, 0x1e, 0xd8, 0x94, 0xd8, 0x9f,
0x50, 0xca, 0x7f, 0x18, 0x2e, 0x74, 0xda, 0x7e,
0x6f, 0xcd, 0x9e, 0x16, 0xbc, 0x80, 0x74, 0xa6,
0x0a, 0xf5, 0xf2, 0x50, 0xb5, 0x5c, 0xfe, 0x95,
0x9b, 0x35, 0xe3, 0x25, 0x37, 0x75, 0x18, 0x76,
0x26, 0x61, 0x1d, 0xb5, 0x4e, 0xc6, 0x6c, 0xfc,
0xe2, 0xfd, 0xb9, 0x9d, 0x72, 0x97, 0x6c, 0x90,
0x6c, 0xcc, 0xa0, 0xe3, 0xfc, 0x39, 0x5c, 0x2e,
0x8d, 0x58, 0x94, 0xd0, 0xcf, 0x96, 0x1b, 0x16,
0xe0, 0x12, 0x17, 0xf9, 0xfc, 0xc3, 0x15, 0x80,
0xeb, 0x00, 0x29, 0xce, 0xaf, 0x4d, 0xc4, 0xcf,
0x21, 0x12, 0x84, 0xd2, 0xce, 0xe9, 0xe6, 0xe4,
0x7c, 0xc5, 0x33, 0x9a, 0xbb, 0x6f, 0xac, 0x5c,
0x30, 0x18, 0x13, 0x30, 0x9d, 0xda, 0x34, 0x36,
0x79, 0xd2, 0x5e, 0xb6, 0x7f, 0xce, 0x8b, 0xa0,
0xb3, 0x4c, 0x23, 0xf6, 0x6f, 0x84, 0x30, 0x2a,
0xad, 0x14, 0x7b, 0x64, 0x87, 0x8d, 0x0c, 0x50,
0xe2, 0x56, 0xa1, 0x91, 0xfc, 0xb0, 0xdc, 0xf7,
0x98, 0x4c, 0xf1, 0xb2, 0xdf, 0x2f, 0x37, 0x3a,
0x0f, 0x9e, 0x2d, 0xa2, 0x4c, 0x7e, 0x17, 0xf2,
0x24, 0x66, 0x83, 0x03, 0x31, 0x34, 0x96, 0xd0,
0x2d, 0x52, 0x67, 0x41, 0x48, 0x7a, 0x2a, 0x1a,
0x1e, 0xd4, 0x29, 0xc5, 0x94, 0x2e, 0xbf, 0xfb,
0xb0, 0xae, 0xd9, 0x95, 0xde, 0xec, 0x2b, 0xa6,
0x60, 0x17, 0x5c, 0x20, 0x0c, 0x99, 0x36, 0x05,
0xd8, 0x25, 0x3b, 0xd4, 0x86, 0x21, 0x26, 0x61,
0x85, 0x9f, 0x8a, 0x35, 0x8a, 0x2c, 0x57, 0xb1,
0x09, 0x59, 0x44, 0x53, 0xc4, 0xbf, 0x9f, 0x92,
0xea, 0xb0, 0x82, 0x06, 0x0a, 0x71, 0x05, 0x4b,
0x76, 0x72, 0xc4, 0x36, 0x46, 0x3c, 0x95, 0x6e,
0x24, 0xe3, 0x71, 0xa2, 0x28, 0x6e, 0x57, 0x14,
0x70, 0xa0, 0xf0, 0x3d, 0xdd, 0x4e, 0x87, 0xce,
0x6b, 0x7e, 0x73, 0x95, 0x00, 0xdf, 0x2e, 0x48,
0xd1, 0xf4, 0x1e, 0xc4, 0x3a, 0xa0, 0x20, 0x86,
0x28, 0x26, 0x69, 0xd0, 0x47, 0x02, 0xb2, 0x8d,
0xc0, 0x4e, 0xd1, 0xce, 0xb2, 0x79, 0x49, 0xa4,
0x38, 0xb8, 0x95, 0x2d, 0xca, 0x70, 0x9f, 0x66,
0x67, 0xc2, 0x1f, 0xe1, 0xcc, 0x2a, 0x4e, 0xdb,
0x2f, 0x17, 0x88, 0xff, 0xba, 0x23, 0xcf, 0x82,
0xb1, 0x69, 0x30, 0x72, 0xdb, 0xe3, 0x70, 0x78,
0x51, 0xd0, 0xd3, 0x1d, 0x34, 0x93, 0x48, 0x68,
0xf7, 0x8f, 0xac, 0x02, 0xa3, 0xbd, 0x29, 0xcc,
0x99, 0x79, 0x12, 0xff, 0x97, 0x66, 0x96, 0xe6,
0x3c, 0x42, 0x41, 0x9f, 0x44, 0x40, 0x63, 0xe6,
0xb2, 0xeb, 0xeb, 0x7f, 0x8d, 0xe5, 0xe5, 0x86,
0xcd, 0x95, 0x3e, 0x4c, 0x6b, 0x92, 0x3b, 0xaa,
0xd7, 0xd1, 0x0c, 0xbe, 0x10, 0x0b, 0xd0, 0x00,
0x29, 0xfe, 0xb8, 0xb1, 0xb3, 0x13, 0x7c, 0x84,
0x07, 0xa8, 0x9f, 0x5f, 0xa3, 0xcb, 0xea, 0x59,
0x88, 0xf1, 0x7b, 0xab, 0x60, 0xc2, 0x7d, 0x3f,
0xef, 0xc9, 0xff, 0x71, 0x49, 0x9e, 0xff, 0xe4,
0xef, 0x28, 0x7e, 0x9d, 0xa3, 0x52, 0x1a, 0x18,
0xae, 0x09, 0x10, 0x15, 0x3c, 0x3e, 0x02, 0x70,
0x4b, 0x1f, 0x18, 0xbc, 0x75, 0x12, 0xba, 0x39,
0xef, 0x94, 0xe7, 0x88, 0x7e, 0xd2, 0xb0, 0x7a,
0x3a, 0x3e, 0x54, 0xd2, 0x99, 0xd0, 0x1b, 0x7a,
0xfa, 0x8c, 0x92, 0x0e, 0x71, 0x92, 0x32, 0xca,
0x7f, 0x7f, 0x08, 0x48, 0xbf, 0x0c, 0xdc, 0x5a,
0x38, 0x3f, 0xd6, 0x83, 0xca, 0x42, 0x72, 0xb4,
0x26, 0x4d, 0x6b, 0xb3, 0x59, 0xb5, 0xcb, 0x94,
0x15, 0x1f, 0x51, 0x87, 0x45, 0x1a, 0x18, 0x26,
0x46, 0xcb, 0x2b, 0x06, 0xed, 0xe9, 0xcd, 0x2b,
0x25, 0xbf, 0x71, 0x79, 0x7e, 0x55, 0x2e, 0x49,
0xcb, 0xf7, 0xbb, 0x80, 0x03, 0xa1, 0xd1, 0x9d,
0xfe, 0x6d, 0xdf, 0xb3, 0xa5, 0x2b, 0x91, 0x8c,
0xe3, 0xd9, 0x14, 0xdb, 0x2e, 0x20, 0xec, 0x5b,
0x4c, 0x6b, 0xa7, 0xa8, 0xa4, 0xe7, 0x87, 0xcd,
0x15, 0x43, 0x7f, 0x4c, 0xf7, 0xb9, 0xb0, 0xe6,
0x72, 0x3c, 0xf7, 0x1e, 0xa3, 0x81, 0xb4, 0x1a,
0x7f, 0x84, 0x01, 0x5b, 0xa5, 0xe6, 0x6c, 0x4d,
0xb4, 0x94, 0x30, 0x44, 0xaf, 0x21, 0xf8, 0x50,
0xa7, 0xce, 0xa7, 0xa2, 0xc0, 0x00, 0xa3, 0x2e,
0xd1, 0xdc, 0x60, 0xb4, 0xb2, 0xb3, 0x68, 0x03,
0x83, 0xb3, 0xc6, 0x87, 0x33, 0x51, 0xe0, 0xcc,
0xe4, 0xa8, 0xb1, 0xae, 0x03, 0xba, 0x48, 0x78,
0x07, 0x6b, 0x74, 0x4f, 0x8c, 0x0b, 0x59, 0x76,
0xef, 0x3b, 0x79, 0xb3, 0xd9, 0x58, 0xf8, 0x32,
0x98, 0x6e, 0x8d, 0xea, 0x6d, 0x65, 0x44, 0x68,
0x0e, 0x72, 0xa4, 0x3b, 0x22, 0x2e, 0xc4, 0x59,
0x8c, 0x05, 0x3c, 0x22, 0x16, 0x4f, 0xd0, 0x41,
0x71, 0x92, 0x97, 0x99, 0xd8, 0x9c, 0x02, 0xc2,
0xc1, 0xeb, 0x16, 0x60, 0x88, 0xf5, 0x6b, 0xd3,
0x0a, 0x1f, 0x63, 0xbb, 0x81, 0xf7, 0xf6, 0xb8,
0xff, 0x68, 0x7c, 0x7b, 0xac, 0xd5, 0xbd, 0x54,
0xf4, 0x3a, 0x43, 0xf6, 0x9d, 0x6a, 0x42, 0xfa,
0xaf, 0x25, 0x3a, 0x76, 0x67, 0xf5, 0xc2, 0x2c,
0xa7, 0xaa, 0xf9, 0x88, 0x99, 0x45, 0xc7, 0xf6,
0xa0, 0x28, 0x3a, 0xdc, 0xb1, 0xa5, 0x43, 0x41,
0x5a, 0x83, 0x61, 0x3a, 0x58, 0xf7, 0xbb, 0xa7,
0x6a, 0x6d, 0x5f, 0x4e, 0xf3, 0xd6, 0x14, 0xda,
0xd1, 0x74, 0xc8, 0x88, 0xa0, 0x2a, 0x88, 0x4f,
0x82, 0x39, 0x48, 0xab, 0x26, 0x8c, 0xb8, 0x58,
0x49, 0x7a, 0xc6, 0x38, 0xdd, 0x10, 0x76, 0xf6,
0x1f, 0xde, 0x0e, 0x0b, 0xbf, 0x12, 0x0d, 0x41,
0x57, 0x27, 0x89, 0xa9, 0xde, 0x01, 0x1f, 0x66,
0x0e, 0x3c, 0xbc, 0x44, 0xa3, 0x10, 0x8d, 0x73,
0x0d, 0x7d, 0x8f, 0xfd, 0x1a, 0xde, 0x0c, 0x49,
0xb2, 0x76, 0x2f, 0xc6, 0xf4, 0xae, 0x33, 0x42,
0x71, 0x51, 0xae, 0x4a, 0x29, 0x6f, 0x81, 0x39,
0x64, 0xee, 0xc6, 0x96, 0x9f, 0xd6, 0xd7, 0x39,
0x4b, 0x6c, 0xce, 0xb0, 0x66, 0x4c, 0x23, 0xc6,
0x71, 0xdb, 0xc1, 0x01, 0x78, 0xf1, 0x3c, 0xe1,
0x88, 0x04, 0xf9, 0x02, 0x45, 0xd1, 0x14, 0x7c,
0xfe, 0x53, 0x16, 0x06, 0x5f, 0x3b, 0x10, 0xd0,
0xc3, 0xc1, 0xfd, 0x7f, 0x0b, 0x98, 0xc7, 0x69,
0x20, 0xa7, 0xe9, 0x9a, 0x3d, 0x46, 0x00, 0x30,
0xb0, 0x84, 0x03, 0x4c, 0x35, 0xae, 0xca, 0xe7,
0x17, 0xc8, 0xc2, 0xaf, 0x23, 0x2b, 0xbc, 0x24,
0x03, 0xf5, 0x4f, 0xca, 0xe8, 0xac, 0xe8, 0x90,
0x2e, 0xd6, 0x59, 0xc2, 0x3a, 0x95, 0x57, 0xae,
0x2d, 0xf7, 0x9f, 0x88, 0x79, 0xb5, 0x91, 0x7d,
0xd9, 0xbd, 0x83, 0x78, 0xe7, 0x5f, 0xfa, 0x4d,
0x0d, 0xce, 0xc6, 0x41, 0x23, 0xdf, 0xf9, 0x18,
0x87, 0x7b, 0x8b, 0xb6, 0xfe, 0x54, 0x2f, 0x48,
0x2c, 0x9a, 0x08, 0xeb, 0x30, 0x1b, 0x5c, 0x7a,
0xcc, 0x0c, 0xbd, 0xe7, 0x63, 0x08, 0x34, 0x3d,
0x00, 0xa5, 0x15, 0x2e, 0x1c, 0x24, 0xd6, 0xb8,
0x5f, 0x44, 0x1e, 0x0a, 0x5e, 0x11, 0x29, 0x63,
0x81, 0x66, 0xe8, 0x8d, 0xc9, 0x85, 0xa6, 0xba,
0xf9, 0x78, 0x78, 0x1b, 0xe8, 0xf7, 0xae, 0x3c,
0x33, 0xb9, 0xc4, 0xb2, 0x51, 0x78, 0xa1, 0x28,
0xa3, 0x09, 0x20, 0x75, 0x77, 0x19, 0x28, 0xc3,
0x62, 0xb0, 0xb4, 0xf8, 0xdf, 0x96, 0x97, 0x9e,
0x8b, 0xb2, 0x07, 0x4a, 0x12, 0x5c, 0xd6, 0x49,
0x33, 0x1d, 0xd1, 0xd3, 0x83, 0xfe, 0xfd, 0xf8,
0xbe, 0xdc, 0x82, 0x92, 0x2a, 0x57, 0x5b, 0x28,
0xb5, 0x8e, 0x50, 0x13, 0x08, 0x4a, 0x06, 0x79,
0x54, 0xa0, 0x1d, 0x1b, 0xc6, 0x4c, 0x0d, 0x1f,
0x8b, 0x38, 0x1a, 0xf3, 0x04, 0xa8, 0xce, 0x09,
0xf0, 0x62, 0xeb, 0x44, 0xe3, 0xbc, 0x7e, 0xac,
0x6a, 0x76, 0x12, 0x49, 0xc8, 0x4a, 0xc6, 0xa8,
0xdf, 0xaf, 0x97, 0x05, 0x0d, 0xca, 0x95, 0xc7,
0xf3, 0x6c, 0xd8, 0x68, 0xc8, 0x38, 0x32, 0x69,
0x3d, 0xc4, 0x03, 0x56, 0x32, 0x81, 0x39, 0x78,
0xd6, 0x04, 0x79, 0xb5, 0x34, 0x6d, 0x15, 0xf1,
0x59, 0x13, 0xe3, 0x42, 0x47, 0x51, 0x7c, 0x0d,
0x99, 0x52, 0xde, 0xcc, 0x82, 0xc9, 0x23, 0xc4,
0xf0, 0x22, 0xfe, 0xeb, 0xbc, 0xe4, 0x8b, 0x4f,
0xae, 0x7b, 0x41, 0x46, 0xd0, 0xa9, 0x80, 0xd5,
0x37, 0xa9, 0xee, 0x3e, 0x0e, 0x5e, 0x28, 0x7f,
0x2d, 0x3e, 0x65, 0x4a, 0xec, 0x91, 0xca, 0x56,
0x02, 0xc2, 0xaf, 0x82, 0x54, 0x63, 0x3a, 0xba,
0xad, 0x6c, 0x38, 0x8e, 0xae, 0x2a, 0x1e, 0x37,
0xdc, 0x60, 0x4f, 0x74, 0x9e, 0xf6, 0xdf, 0x06,
0x04, 0xb6, 0xdd, 0xd4, 0xf4, 0x19, 0x81, 0xf0,
0x32, 0x18, 0xcd, 0xd1, 0x41, 0xc2, 0xa4, 0x95,
0xaa, 0x72, 0x3e, 0xaf, 0x92, 0x85, 0xd8, 0x2f,
0x02, 0x4c, 0x72, 0x28, 0x78, 0xe1, 0x0e, 0xe0,
0x2e, 0x31, 0xc9, 0x55, 0x0c, 0xf0, 0x6b, 0xb7,
0xe7, 0x84, 0xe3, 0x17, 0x18, 0x6f, 0x49, 0x22,
0x46, 0x9e, 0xd0, 0xa1, 0x54, 0x4d, 0xfd, 0x9e,
0xe6, 0x35, 0xa2, 0xaf, 0x16, 0x15, 0xbc, 0x5e,
0xe3, 0x49, 0x2e, 0x11, 0xfb, 0xbe, 0xa6, 0x68,
0x5e, 0x53, 0x47, 0x62, 0x77, 0x62, 0x95, 0xb0,
0x11, 0x64, 0x82, 0xbb, 0x20, 0x73, 0x6e, 0xd6,
0x46, 0x15, 0x29, 0x59, 0xb4, 0xf1, 0x01, 0x0d,
0x66, 0xce, 0x52, 0xee, 0x6f, 0x9a, 0xc3, 0x43,
0x97, 0x36, 0xa8, 0xc9, 0xc3, 0x51, 0x98, 0x48,
0xd7, 0x0d, 0xdd, 0x93, 0x1b, 0x1b, 0xa6, 0x4b,
0x5c, 0x18, 0x13, 0x55, 0x54, 0x00, 0x45, 0xd2,
0x6b, 0xd3, 0x1a, 0xaf, 0xda, 0x4a, 0xb1, 0x64,
0x94, 0x72, 0xab, 0x22, 0xa3, 0x19, 0x23, 0x6c,
0x93, 0x8f, 0xd6, 0x85, 0xf5, 0x8b, 0xfd, 0x06,
0x3e, 0x0c, 0xf5, 0x73, 0xa5, 0x9c, 0x21, 0x85,
0x65, 0x31, 0xfb, 0xab, 0x0b, 0x74, 0x49, 0xa1,
0x7f, 0x51, 0x59, 0x1a, 0xd7, 0x10, 0xa8, 0x88,
0x9a, 0x63, 0x9b, 0xc7, 0xa0, 0x6e, 0x7c, 0x53,
0xca, 0x6d, 0xb1, 0x17, 0xc5, 0x14, 0x98, 0xca,
0x2c, 0x87, 0x0a, 0x21, 0x88, 0xbb, 0x75, 0x98,
0x75, 0x6b, 0x02, 0x63, 0xa1, 0x71, 0x60, 0x42,
0x9d, 0x68, 0x26, 0x25, 0x4a, 0xde, 0x69, 0x3e,
0x18, 0x5d, 0x64, 0xad, 0x50, 0x7e, 0xba, 0xc0,
0x45, 0xb9, 0x2c, 0x02, 0xa1, 0x8d, 0xc0, 0x96,
0xe5, 0x79, 0x23, 0x2e, 0x2b, 0x03, 0xa2, 0xe9,
0x4a, 0xef, 0x1e, 0x60, 0xae, 0x82, 0xb6, 0xcf,
0x87, 0x29, 0xc9, 0x4d, 0x17, 0xd2, 0x57, 0x76,
0x39, 0x9a, 0xbf, 0xbd, 0x64, 0x54, 0x23, 0xe6,
0x63, 0xf0, 0xe8, 0x94, 0x79, 0xfe, 0x4a, 0xf3,
0x62, 0x72, 0xf6, 0xbf, 0x1b, 0xc8, 0x31, 0x9c,
0xb1, 0xac, 0x16, 0x99, 0x5d, 0x22, 0x8d, 0xbf,
0x77, 0xd8, 0x4d, 0xd4, 0xe3, 0x1a, 0xa8, 0x66,
0xc3, 0x08, 0x74, 0x5f, 0x69, 0x7f, 0x26, 0x6e,
0x6c, 0xde, 0x37, 0x1c, 0x3a, 0xc0, 0xce, 0xb0,
0x9f, 0x12, 0xec, 0x9e, 0xc2, 0x6a, 0x17, 0x9e,
0x74, 0x07, 0x15, 0xcf, 0x5a, 0x26, 0xb4, 0xab,
0xe4, 0x07, 0x2e, 0x99, 0x95, 0xa3, 0x17, 0xe9,
0x00, 0x54, 0x73, 0x5d, 0xe8, 0x89, 0xf3, 0x47,
0x4a, 0x34, 0xa5, 0xff, 0x6c, 0xb7, 0x5b, 0x02,
0x3f, 0x25, 0x7b, 0x1a, 0xca, 0x61, 0x1a, 0xbe,
0x4a, 0x01, 0x05, 0x8f, 0x67, 0x43, 0x35, 0x1a,
0xf5, 0x06, 0xdc, 0xad, 0xd3, 0x4b, 0x6c, 0x1f,
0xd7, 0x8e, 0x7b, 0x91, 0x96, 0x1b, 0x25, 0x63,
0xdf, 0x80, 0x0a, 0xd0, 0xe2, 0x4e, 0x6f, 0xd1,
0x04, 0x36, 0xca, 0x53, 0x2e, 0x49, 0x4c, 0xed,
0xc1, 0x8b, 0x6a, 0x69, 0x4f, 0x02, 0x74, 0xe8,
0x17, 0xb3, 0x3d, 0x07, 0x59, 0x1e, 0xfb, 0x23,
0x9c, 0x67, 0xba, 0x5a, 0xc9, 0xd4, 0x32, 0x2c,
0xf1, 0x95, 0xd0, 0xe6, 0x36, 0x1c, 0x7f, 0x8f,
0x32, 0x34, 0x05, 0x14, 0x40, 0x7c, 0x48, 0xf9,
0xbc, 0xe8, 0x38, 0x67, 0x2d, 0x63, 0x02, 0x0c,
0xf4, 0xf9, 0xd7, 0xbb, 0x14, 0x29, 0x52, 0x6f,
0x8a, 0x88, 0x00, 0xcc, 0xea, 0x14, 0xd5, 0x25,
0x55, 0xc1, 0x92, 0xf9, 0x8b, 0xd3, 0xba, 0x63,
0xfd, 0x8c, 0xc7, 0xae, 0x28, 0x71, 0x88, 0x4b,
0x9d, 0xdc, 0x36, 0x73, 0x3b, 0x79, 0x6a, 0x14,
0x32, 0x9b, 0xf6, 0x3a, 0x6a, 0x98, 0x50, 0x4b,
0x4a, 0x6d, 0xc0, 0xe3, 0x8e, 0xa2, 0xbb, 0xb2,
0x5f, 0xaf, 0x61, 0x42, 0xbc, 0x30, 0x4f, 0x27,
0x98, 0xcd, 0x62, 0xcb, 0x3f, 0xf4, 0x58, 0xa1,
0x39, 0x71, 0x8b, 0x8e, 0x4c, 0xf5, 0xd0, 0xaf,
0x40, 0x78, 0x4b, 0x3e, 0x4c, 0xb5, 0x37, 0x39,
0x50, 0x09, 0x72, 0xbb, 0xef, 0x0b, 0x9b, 0x32,
0x40, 0x8f, 0x55, 0x58, 0xbd, 0x58, 0x5a, 0x81,
0x59, 0xea, 0xc6, 0x7b, 0x17, 0xa5, 0x63, 0xd9,
0xc5, 0x77, 0x08, 0xd2, 0x99, 0xeb, 0xeb, 0x06,
0x36, 0xd4, 0x70, 0x5e, 0xed, 0xdc, 0xe5, 0x64,
0xdd, 0xc3, 0x1d, 0x6a, 0x66, 0xe1, 0xba, 0x5a,
0x97, 0xc1, 0x35, 0x4a, 0x15, 0x83, 0xff, 0xff,
0xc2, 0xa4, 0x98, 0xf2, 0xae, 0x4d, 0x3b, 0x3d,
0x2e, 0x66, 0x91, 0xa7, 0xf7, 0x45, 0xc6, 0xe8,
0x0d, 0x1d, 0x25, 0x21, 0x1c, 0x97, 0x2e, 0x50,
0x64, 0x0b, 0xab, 0x84, 0xcd, 0x45, 0xb6, 0xb2,
0x1a, 0x55, 0xf6, 0x88, 0x6b, 0xb1, 0x83, 0xb3,
0xff, 0xfe, 0x8d, 0xca, 0xf6, 0xc2, 0x84, 0x54,
0x0e, 0xa3, 0x25, 0xe3, 0x5b, 0x50, 0x4b, 0x91,
0x1c, 0x57, 0xf7, 0xd7, 0x94, 0xd9, 0x00, 0x28,
0x50, 0x28, 0xab, 0xba, 0xc3, 0x04, 0xb0, 0x2e,
0xdb, 0x57, 0xc3, 0x43, 0x65, 0xff, 0x8a, 0xcf,
0x1b, 0xb5, 0x24, 0x95, 0xbb, 0x79, 0x74, 0x2d,
0xa6, 0xaf, 0xe0, 0x8c, 0x25, 0xf8, 0x89, 0xfe,
0x67, 0x99, 0xad, 0xa0, 0x30, 0x0e, 0xee, 0x02,
0x5e, 0x96, 0x46, 0x20, 0x56, 0xd9, 0xe3, 0x97,
0x80, 0x2e, 0x2c, 0xba, 0x5e, 0xf5, 0x76, 0x9c,
0x39, 0xb7, 0x50, 0xe8, 0x1d, 0x27, 0x99, 0x47,
0x31, 0x4f, 0xf6, 0x64, 0xad, 0x43, 0xf4, 0x14,
0xd5, 0x32, 0x1c, 0xc6, 0x1c, 0xfd, 0xba, 0xae,
0xe4, 0xda, 0x51, 0xfa, 0x69, 0xa1, 0x92, 0xb8,
0x83, 0xb8, 0x25, 0xb8, 0xaf, 0x3a, 0x56, 0xde,
0xc3, 0x12, 0x94, 0xde, 0x3f, 0x2a, 0xb4, 0xa3,
0x37, 0x14, 0x06, 0x7c, 0x0a, 0x9c, 0x7a, 0x1e,
0x6e, 0xf9, 0x59, 0x69, 0x8a, 0xcf, 0xdc, 0x66,
0x40, 0xc5, 0x66, 0xbf, 0xc6, 0x30, 0x45, 0x05,
0xe0, 0xb4, 0x6c, 0xc2, 0x88, 0x38, 0x18, 0x24,
0xea, 0x20, 0x73, 0xe3, 0xef, 0xf6, 0x90, 0xc8,
0x1d, 0xa9, 0x74, 0x3f, 0x07, 0x89, 0x0b, 0x0f,
0xec, 0x3d, 0x12, 0x9a, 0x67, 0x3f, 0xb8, 0x17,
0x72, 0xe9, 0x9e, 0xc9, 0x8a, 0xb0, 0xf7, 0x1d,
0x19, 0xf2, 0x54, 0x0f, 0x22, 0x60, 0xdc, 0x3f,
0x82, 0x46, 0x4b, 0x9d, 0x15, 0x55, 0x28, 0xa0,
0xda, 0x0a, 0x28, 0x33, 0xd8, 0x79, 0xa6, 0xee,
0x16, 0xdb, 0x65, 0xf5, 0x80, 0x87, 0x82, 0x02,
0xa4, 0x89, 0x7e, 0x82, 0xa6, 0xd7, 0xe1, 0x91,
0x32, 0x0c, 0x76, 0x2c, 0xf0, 0xac, 0x6b, 0xa3,
0xdd, 0x9b, 0xdf, 0x4f, 0xb6, 0xbb, 0xd4, 0x36,
0x17, 0x6e, 0xe9, 0x28, 0x4a, 0xdc, 0x48, 0x39,
0xd4, 0xa6, 0xe3, 0xf2, 0x28, 0xec, 0x07, 0x7b,
0x8c, 0x2a, 0x08, 0x9e, 0x18, 0x19, 0xc9, 0x32,
0xb5, 0x3c, 0xf9, 0x50, 0xf7, 0x63, 0x4f, 0x50,
0x48, 0x5e, 0x05, 0x72, 0x33, 0xd8, 0x4f, 0x41,
0xc0, 0xab, 0xd0, 0x5b, 0x30, 0x4f, 0xff, 0x36,
0xc8, 0x61, 0x48, 0xea, 0x35, 0x38, 0x15, 0x16,
0x3a, 0xe7, 0xd2, 0xc9, 0x53, 0x2f, 0x08, 0x47,
0x77, 0x39, 0x27, 0xbb, 0x4d, 0xa7, 0x34, 0x80,
0x62, 0xbc, 0xf1, 0x12, 0xd0, 0x4b, 0xdd, 0x97,
0x70, 0x4e, 0xc6, 0x94, 0x4d, 0x11, 0x7e, 0xa7,
0xf9, 0xfb, 0xc6, 0x44, 0x97, 0x4c, 0x61, 0x26,
0x42, 0x68, 0x5e, 0xe8, 0xf4, 0x38, 0xee, 0x5b,
0x95, 0xf0, 0xf6, 0xb8, 0x57, 0x27, 0x9e, 0x1f,
0xe6, 0xd8, 0x4a, 0xde, 0xea, 0x66, 0x8c, 0xe9,
0x1c, 0xae, 0xd0, 0xab, 0x9a, 0xf2, 0x07, 0x56,
0x4f, 0xcd, 0xa6, 0x64, 0xdf, 0x5b, 0x3f, 0x00,
0xdb, 0xba, 0x2e, 0x53, 0x3d, 0x24, 0xff, 0x5c,
0xcd, 0x30, 0xf8, 0xa8, 0xb0, 0x6f, 0xbc, 0xed,
0xe8, 0x8d, 0xc4, 0x82, 0x9a, 0x04, 0xdc, 0xa4,
0x09, 0x26, 0xff, 0xd7, 0x66, 0xd4, 0xcc, 0xda,
0xc8, 0x63, 0xa1, 0xb4, 0xf7, 0x17, 0xcb, 0x2c,
0xdd, 0x29, 0x68, 0xd2, 0xe6, 0x1e, 0x60, 0xa8,
0x44, 0xfa, 0xa3, 0xf2, 0x5a, 0x89, 0xd5, 0x69,
0x6e, 0xbc, 0x53, 0x9d, 0x2c, 0xa2, 0x96, 0x70,
0x66, 0x66, 0xce, 0x0f, 0xd4, 0x11, 0xb2, 0x74,
0x94, 0x74, 0xdb, 0x78, 0x58, 0x2e, 0x24, 0xea,
0x22, 0x04, 0x30, 0xb6, 0xda, 0x68, 0x5a, 0xbf,
0xa2, 0x5d, 0xb5, 0x7b, 0x47, 0xd9, 0xb7, 0x0c,
0xf7, 0x15, 0x8c, 0x0a, 0xe2, 0x35, 0x9b, 0xe4,
0x9f, 0x2c, 0x38, 0x94, 0xce, 0xd3, 0xfd, 0x64,
0x02, 0x0e, 0x33, 0xd7, 0xeb, 0x18, 0x5f, 0x99,
0x35, 0x53, 0xb5, 0x08, 0x53, 0xac, 0x37, 0x26,
0x94, 0xe2, 0xab, 0x80, 0x8e, 0x61, 0xfc, 0x5d,
0xb8, 0x02, 0x52, 0xe5, 0xd6, 0xfb, 0x01, 0xad,
0x23, 0x02, 0x22, 0xd4, 0xea, 0x32, 0x2f, 0xf1,
0x00, 0x83, 0x7c, 0xcc, 0xe7, 0x30, 0x55, 0xb0,
0x76, 0x07, 0x50, 0x68, 0x80, 0x34, 0x77, 0xcc,
0x5f, 0x23, 0xac, 0xa9, 0x50, 0x3d, 0x5c, 0x9a,
0xa3, 0xd1, 0x3d, 0x04, 0x87, 0x0e, 0x67, 0x50,
0x6f, 0x5e, 0x87, 0x47, 0x22, 0x36, 0x5c, 0x0f,
0xef, 0xf5, 0xd6, 0x70, 0x25, 0x3e, 0x9a, 0x33,
0x93, 0x2f, 0xb3, 0x80, 0x37, 0x6f, 0x16, 0x56,
0x36, 0x78, 0xe4, 0xa3, 0xe5, 0x23, 0x06, 0xc3,
0x33, 0x3a, 0x6d, 0x53, 0x53, 0xd5, 0xa0, 0x9a,
0x36, 0x33, 0x4a, 0xe7, 0x8d, 0x30, 0xc5, 0xe3,
0xbd, 0x20, 0xa8, 0xf0, 0x7d, 0xb5, 0xb4, 0xc4,
0x4e, 0xa9, 0xba, 0x1d, 0x53, 0x98, 0x68, 0xe7,
0x0c, 0x34, 0x62, 0x0f, 0xb0, 0xb7, 0x3b, 0xa1,
0x78, 0x32, 0x90, 0x1f, 0xa4, 0xd6, 0x62, 0x2b,
0xeb, 0x2a, 0x82, 0x45, 0xe7, 0xd3, 0xbe, 0xd8,
0xa2, 0x87, 0xc3, 0xe7, 0x4a, 0xc6, 0xf9, 0xe7,
0xf3, 0x77, 0x8d, 0xfb, 0x9f, 0xf7, 0x28, 0xeb,
0x40, 0x34, 0x56, 0xd1, 0x5f, 0x14, 0x40, 0xbb,
0xb2, 0x5f, 0xe8, 0x7c, 0x02, 0xa3, 0xdf, 0xa9,
0x66, 0x21, 0x83, 0x64, 0x81, 0x14, 0xba, 0xf3,
0xdd, 0x86, 0x33, 0x86, 0xf3, 0xe5, 0x0f, 0xbf,
0x3c, 0x7b, 0x22, 0x83, 0xdd, 0x9f, 0xa9, 0x8c,
0x22, 0xd2, 0xd2, 0x26, 0x63, 0xb7, 0xe9, 0xa4,
0x16, 0xa4, 0xf2, 0x26, 0x46, 0xe4, 0x6f, 0x4d,
0xbb, 0x11, 0x1c, 0xa9, 0xb3, 0x0b, 0xe8, 0x4f,
0x87, 0x14, 0xa2, 0xaa, 0x8c, 0x6a, 0x96, 0xc5,
0x28, 0xc6, 0x04, 0x6e, 0xab, 0x91, 0xac, 0x8e,
0xde, 0x27, 0x96, 0x4b, 0x50, 0xa5, 0x73, 0x2d,
0x82, 0x57, 0x5d, 0x38, 0x39, 0x1d, 0xcb, 0xb0,
0x9e, 0x4e, 0xf0, 0x17, 0x87, 0x7b, 0x88, 0x2d,
0x92, 0xf1, 0x6f, 0x03, 0x45, 0x6d, 0x41, 0xa9,
0x03, 0xe2, 0xd1, 0x87, 0x54, 0x6b, 0xb9, 0xe1,
0xeb, 0xd4, 0x69, 0x94, 0x6b, 0xa0, 0x29, 0x61,
0x81, 0x4b, 0x52, 0x63, 0x95, 0xb3, 0xde, 0xbe,
0x34, 0xe9, 0xb7, 0x6a, 0xa0, 0x78, 0x87, 0x29,
0x31, 0x22, 0x9c, 0x58, 0xb2, 0x57, 0xf0, 0x23,
0xe1, 0x7f, 0x4a, 0x3f, 0x7f, 0x33, 0x8a, 0x9c,
0x6a, 0xec, 0x0e, 0x35, 0xbd, 0xc9, 0x52, 0x37,
0xab, 0x68, 0xec, 0xb8, 0xad, 0x24, 0x9b, 0x51,
0x4b, 0x14, 0xc8, 0x79, 0xba, 0xd5, 0x02, 0x3e,
0xfe, 0x1b, 0xaf, 0xee, 0x90, 0xbe, 0x40, 0xc8,
0x2b, 0x94, 0x16, 0xaf, 0x64, 0xd8, 0x67, 0x86,
0xe9, 0x23, 0x5f, 0x63, 0xbb, 0xbc, 0x65, 0xdd,
0xd8, 0x15, 0x8e, 0x6b, 0xa9, 0xc7, 0x2b, 0x30,
0x22, 0xda, 0xab, 0x68, 0x16, 0x01, 0x90, 0x8d,
0x1b, 0x62, 0xf9, 0x7b, 0xdb, 0xec, 0xa1, 0xa0,
0x7c, 0x38, 0xfc, 0xd3, 0x09, 0x7c, 0xaf, 0x65,
0x97, 0x8f, 0x5b, 0xbd, 0x9c, 0xa8, 0x36, 0x29,
0xae, 0x38, 0xc9, 0x0a, 0x2d, 0xbe, 0x95, 0x5e,
0x54, 0x21, 0x4e, 0xd4, 0xe0, 0x79, 0x8d, 0x97,
0xae, 0x80, 0xf3, 0xcf, 0xa7, 0xb3, 0x76, 0x87,
0x94, 0xca, 0x2c, 0x26, 0xe5, 0xba, 0x43, 0x31,
0xe3, 0x02, 0x23, 0xb9, 0x29, 0x94, 0x3d, 0xee,
0x2f, 0xdc, 0x9d, 0xec, 0xaf, 0x40, 0x4a, 0xa0,
0x79, 0xf0, 0x7d, 0xaa, 0xdb, 0x93, 0x9b, 0xc2,
0x63, 0x17, 0x67, 0x2a, 0xcd, 0xc9, 0x66, 0xbd,
0xed, 0xf4, 0xb7, 0xe3, 0x0c, 0xce, 0x55, 0x36,
0xf7, 0xfc, 0xb4, 0xc3, 0x1d, 0x34, 0xab, 0xde,
0x16, 0x31, 0x71, 0xe4, 0xbd, 0x44, 0xcc, 0xc8,
0x52, 0xf4, 0x11, 0xed, 0xf1, 0xb6, 0xbd, 0xf7,
0xfa, 0x2e, 0xff, 0x19, 0xf6, 0xf3, 0xd6, 0x4d,
0xdc, 0x7c, 0x6c, 0xb2, 0x61, 0x85, 0x3e, 0x80,
0x22, 0x77, 0xbf, 0x8b, 0x16, 0x52, 0x48, 0xe6,
0x78, 0xf7, 0x4e, 0xa6, 0xc3, 0x6b, 0x7d, 0xcf,
0x28, 0x31, 0x7b, 0x55, 0xd6, 0x90, 0x20, 0x47,
0x67, 0x2e, 0x29, 0x25, 0xf3, 0xdf, 0x64, 0xb2,
0xa1, 0x37, 0x23, 0x54, 0x4a, 0x34, 0x7f, 0xb0,
0x3e, 0xd7, 0x41, 0xb3, 0xcd, 0x6a, 0x0b, 0x3a,
0x03, 0x3f, 0x8d, 0x02, 0x6a, 0xe5, 0x0a, 0x1d,
0x94, 0xf1, 0xce, 0x26, 0x90, 0x2d, 0xaa, 0xd5,
0x51, 0x77, 0x0c, 0x83, 0x4f, 0x09, 0xb2, 0x54,
0x3e, 0xae, 0x4e, 0x57, 0xff, 0x8a, 0x70, 0x63,
0x1f, 0xfc, 0xca, 0x5a, 0xef, 0xd1, 0xd7, 0xd4,
0x94, 0x5b, 0x21, 0xf9, 0x34, 0x37, 0x99, 0xa6,
0x07, 0x64, 0xbf, 0x25, 0x7e, 0xf6, 0xb0, 0x43,
0x50, 0xb1, 0x8f, 0x43, 0xa9, 0xcd, 0x16, 0x3f,
0x9e, 0xb9, 0xd3, 0x10, 0xf7, 0xf0, 0x53, 0xc5,
0x73, 0x42, 0x15, 0xf4, 0x0f, 0x51, 0x68, 0x09,
0x27, 0x87, 0xcf, 0x01, 0x4b, 0xd4, 0x54, 0x08,
0x7d, 0xca, 0x7d, 0xfa, 0x32, 0x20, 0x77, 0x63,
0x7e, 0xd1, 0xab, 0x9a, 0x2b, 0x84, 0xbb, 0xa4,
0x36, 0xb3, 0x4a, 0x67, 0x82, 0x83, 0x53, 0xa4,
0xc9, 0xc8, 0x70, 0x21, 0x87, 0xbc, 0x1f, 0xa9,
0xf3, 0x2e, 0x5f, 0x74, 0x79, 0x49, 0xa7, 0x0e,
0xc7, 0xad, 0x9d, 0xae, 0xad, 0xe2, 0xbe, 0x90,
0x46, 0x65, 0xfd, 0x5a, 0xaf, 0x8f, 0xa2, 0x64,
0xd2, 0x92, 0xb0, 0x81, 0xf7, 0x69, 0xe2, 0x95,
0x78, 0xc0, 0x36, 0x7e, 0x00, 0x41, 0xd4, 0x26,
0xc8, 0x59, 0x45, 0x03, 0xf3, 0xa8, 0x1d, 0x5b,
0x68, 0x5f, 0xf4, 0xef, 0xa0, 0xac, 0x50, 0x23,
0xd2, 0x93, 0xbd, 0x7a, 0x7b, 0x07, 0x4a, 0x3b,
0x2f, 0xb4, 0x1a, 0x75, 0x73, 0x6a, 0x7f, 0xdc,
0x94, 0x53, 0x1c, 0x09, 0x1e, 0x20, 0xe0, 0x5c,
0xc6, 0xf8, 0xaf, 0x8e, 0xa2, 0x04, 0xa5, 0xc3,
0xba, 0x05, 0x21, 0xa2, 0x0a, 0x59, 0xd7, 0xd7,
0xfe, 0xcb, 0x96, 0xd8, 0x6c, 0xfa, 0xda, 0x3c,
0xf7, 0xca, 0xec, 0x8c, 0x87, 0x69, 0xa7, 0xe7,
0x93, 0x97, 0x80, 0xaa, 0xb6, 0xc0, 0x4e, 0x05,
0xd6, 0xaa, 0x04, 0xb1, 0x6b, 0x02, 0x80, 0x77,
0x97, 0xf0, 0xa4, 0xc6, 0xc1, 0xe9, 0xd7, 0x99,
0xaf, 0x0c, 0xa6, 0xdd, 0xe6, 0xcc, 0x5e, 0xf3,
0x66, 0x33, 0x24, 0x46, 0x4c, 0x18, 0x58, 0xce,
0x88, 0xc0, 0x2a, 0x5f, 0xe8, 0xd8, 0x1b, 0x18,
0xc0, 0xbd, 0x65, 0x6f, 0x4b, 0x31, 0x65, 0xe9,
0xfc, 0x18, 0xaa, 0x94, 0x1f, 0x4a, 0xd0, 0x91,
0x21, 0x01, 0xc0, 0x9d, 0x6f, 0x61, 0x87, 0xab,
0xf1, 0xd3, 0x56, 0xd5, 0x72, 0x86, 0x23, 0x82,
0xb6, 0x53, 0xe9, 0xf1, 0x56, 0x9f, 0x25, 0xcb,
0x60, 0x4f, 0x44, 0x66, 0x68, 0xcd, 0xa2, 0x96,
0x38, 0xc4, 0x17, 0xdb, 0xbb, 0xaf, 0xf1, 0x3f,
0xe3, 0x6c, 0x0d, 0xae, 0xa3, 0xeb, 0xdd, 0x88,
0x3b, 0x47, 0xa7, 0x28, 0x22, 0x30, 0x12, 0x38,
0x81, 0x6a, 0xbb, 0xae, 0x43, 0x0c, 0x88, 0xb1,
0x71, 0x52, 0xdd, 0xd6, 0x7e, 0x04, 0x04, 0xff,
0x14, 0x6b, 0xad, 0x65, 0x58, 0x22, 0x1c, 0x2d,
0xbc, 0x05, 0xd2, 0xf9, 0x0c, 0xca, 0x3b, 0x53,
0x09, 0xac, 0x13, 0xa8, 0x14, 0x98, 0xda, 0x29,
0xb6, 0x51, 0x06, 0x80, 0xa0, 0x6e, 0x71, 0xa1,
0xfc, 0x2b, 0x97, 0x90, 0xa6, 0x60, 0xef, 0xd1,
0x5c, 0xc3, 0xc8, 0x4e, 0xea, 0xf7, 0xed, 0xc5,
0x84, 0xdd, 0x85, 0x9d, 0xc3, 0x35, 0xa9, 0x6c,
0xe8, 0xc4, 0xef, 0x4c, 0x46, 0xe8, 0xa6, 0x15,
0x0c, 0x56, 0x5c, 0x4f, 0x56, 0xdc, 0xd8, 0x44,
0x95, 0xa8, 0xa9, 0x3a, 0x5a, 0x60, 0xd1, 0x5b,
0xae, 0x08, 0xd4, 0xd8, 0x06, 0xc7, 0x3e, 0xad,
0xcb, 0xa3, 0x68, 0x3a, 0xbc, 0x55, 0x6b, 0x2f,
0x13, 0x4e, 0xed, 0xe0, 0x62, 0xc2, 0xd1, 0xc2,
0xcf, 0x29, 0x88, 0x8f, 0x7e, 0x6c, 0x29, 0x6a,
0xc5, 0x68, 0x5a, 0x37, 0x1c, 0x67, 0x46, 0xcc,
0x9e, 0xba, 0x16, 0xc3, 0x38, 0x90, 0x3c, 0xf0,
0x78, 0xb4, 0xc0, 0x96, 0xa3, 0x4a, 0x4b, 0x29,
0xd2, 0xd6, 0xe0, 0x82, 0x6f, 0xf1, 0x11, 0x3b,
0x89, 0x3b, 0x57, 0x3a, 0x59, 0xcb, 0xcc, 0x22,
0xe1, 0x5f, 0xea, 0xb1, 0x50, 0xac, 0x45, 0x63,
0xc1, 0xc0, 0x12, 0xb8, 0x74, 0x24, 0x78, 0x3b,
0xf3, 0x27, 0x85, 0xa6, 0xb1, 0xa4, 0xb0, 0x6b,
0x32, 0x9b, 0x23, 0x1b, 0x23, 0xd2, 0x2d, 0x04,
0x27, 0xaf, 0xa5, 0x22, 0x5c, 0x10, 0x30, 0x2d,
0xc6, 0x95, 0x3e, 0xea, 0x28, 0xf4, 0x4e, 0xfa,
0x4f, 0x66, 0xca, 0x73, 0x18, 0x2e, 0x52, 0x10,
0xda, 0x83, 0x8c, 0x86, 0x89, 0x49, 0x69, 0x50,
0x0a, 0x8f, 0x93, 0xa0, 0x85, 0xfe, 0xaa, 0x6d,
0x54, 0x16, 0xdb, 0xe6, 0x00, 0xc8, 0x09, 0x1e,
0x07, 0xf4, 0x1a, 0x45, 0xbf, 0xa8, 0xeb, 0x34,
0xd0, 0xd4, 0xeb, 0xca, 0x96, 0x32, 0x52, 0x26,
0xdc, 0xbb, 0x32, 0xbb, 0xff, 0x07, 0xaf, 0x23,
0x62, 0x31, 0x4a, 0x09, 0x28, 0x11, 0x6b, 0x3d,
0x31, 0x66, 0x91, 0x8a, 0xd0, 0x1c, 0x73, 0x38,
0x80, 0xab, 0x38, 0xc1, 0xa1, 0x7f, 0x20, 0x5c,
0x1f, 0xb8, 0xe1, 0x02, 0xb9, 0x9e, 0x91, 0x29,
0xdd, 0x50, 0xe0, 0xb3, 0xf2, 0x67, 0x04, 0x8e,
0x89, 0xa7, 0x27, 0x36, 0x96, 0xe6, 0xa8, 0x12,
0x79, 0x7f, 0x04, 0x50, 0x93, 0x4a, 0xc0, 0xa2,
0xcb, 0x12, 0xd7, 0x50, 0x13, 0xa5, 0xa9, 0x31,
0xe8, 0x5a, 0xae, 0xf2, 0xf5, 0xd3, 0xde, 0x65,
0x93, 0x1c, 0x6e, 0x5a, 0xc0, 0xb7, 0x0d, 0x51,
0x4e, 0x38, 0x36, 0x30, 0xff, 0x86, 0xe4, 0x78,
0xb6, 0x2e, 0xf7, 0xbf, 0xa9, 0x7c, 0xb5, 0xdd,
0xa6, 0xb5, 0xf6, 0xf5, 0x6a, 0x67, 0x29, 0xd1,
0x03, 0x4d, 0x4f, 0xcb, 0xda, 0xa0, 0x5b, 0x80,
0x49, 0x59, 0xe0, 0xfd, 0x4d, 0x44, 0xce, 0x3e,
0xa3, 0x13, 0xb4, 0x3b, 0xae, 0x4c, 0xb5, 0x80,
0xd2, 0x49, 0xcc, 0x85, 0x2c, 0x13, 0x47, 0x5c,
0x8b, 0xeb, 0x9f, 0x38, 0xee, 0x69, 0x89, 0x8a,
0x07, 0x55, 0xa2, 0xf3, 0x79, 0x57, 0x8b, 0x07,
0xfd, 0xa8, 0xfe, 0x1a, 0xb4, 0xd3, 0x4d, 0xbb,
0xd1, 0xbc, 0xd0, 0x7b, 0x14, 0x32, 0x7a, 0x43,
0x1d, 0xcc, 0x4e, 0xe8, 0x0f, 0x0c, 0x45, 0xc5,
0xfb, 0xf3, 0xee, 0xb4, 0xf0, 0xc3, 0xfc, 0xe2,
0x41, 0xfc, 0xea, 0x73, 0xe5, 0xd7, 0x1e, 0x0e,
0x2f, 0x3e, 0xe0, 0x30, 0x49, 0xcb, 0x1f, 0xd1,
0xef, 0x8a, 0x0c, 0xb3, 0x00, 0x07, 0xa9, 0x1b,
0xe2, 0xaf, 0xa8, 0xd6, 0x07, 0x7c, 0x8a, 0x6c,
0x38, 0xc3, 0xc2, 0xd0, 0xae, 0xb0, 0xe3, 0x1e,
0xea, 0x51, 0xc7, 0x01, 0x5b, 0x2d, 0x4a, 0x66,
0x00, 0x90, 0x6a, 0x5c, 0x62, 0xc6, 0xa4, 0x8e,
0xe4, 0x36, 0xae, 0x44, 0x33, 0xc6, 0xcb, 0xc9,
0x1c, 0xec, 0xdd, 0x06, 0x1f, 0x97, 0x40, 0x46,
0x8d, 0x6b, 0xff, 0xd7, 0x21, 0x37, 0x26, 0x73,
0xad, 0x49, 0x85, 0x73, 0x49, 0x4c, 0x08, 0xaa,
0xf4, 0x0b, 0xfd, 0x83, 0xa0, 0x27, 0x88, 0x98,
0xea, 0x7c, 0xa8, 0x9f, 0x16, 0x40, 0x89, 0x09,
0x64, 0xf0, 0xcd, 0x24, 0xea, 0x50, 0xa5, 0x17,
0xff, 0x7f, 0x08, 0xa2, 0x8e, 0x44, 0x10, 0x6c,
0x09, 0xc3, 0xb5, 0xeb, 0x1a, 0x01, 0xf5, 0x2f,
0x3c, 0xf9, 0x50, 0x42, 0xa2, 0xf5, 0x33, 0x9e,
0x6f, 0x66, 0x44, 0xcb, 0xc2, 0xcd, 0xc7, 0xfc,
0xa5, 0x8e, 0xdb, 0x2b, 0x84, 0x1f, 0xdf, 0xbe,
0x87, 0x97, 0x6e, 0x05, 0xda, 0x91, 0x8d, 0x7b,
0xf3, 0xe6, 0xcc, 0x57, 0xf3, 0xb1, 0x54, 0x19,
0x87, 0x6a, 0x6a, 0xc6, 0xb3, 0x1a, 0x05, 0xbc,
0xf6, 0xfc, 0xd5, 0x0d, 0x3d, 0x24, 0x7d, 0x77,
0xee, 0x4c, 0x43, 0x3f, 0x11, 0x9e, 0xe4, 0xe5,
0x55, 0xf2, 0x8d, 0x24, 0x8c, 0x5e, 0x44, 0xd6,
0xac, 0xb1, 0x84, 0x72, 0xbe, 0x1f, 0x66, 0x35,
0x6a, 0xd2, 0x6f, 0xcf, 0xda, 0x57, 0x76, 0xc4,
0xc1, 0x3d, 0x8b, 0xb8, 0x24, 0x30, 0x21, 0xf2,
0x3c, 0xbd, 0x5e, 0x31, 0x75, 0xb1, 0xb3, 0x71,
0x7f, 0x74, 0x35, 0xfb, 0xea, 0x05, 0x5a, 0x57,
0x2b, 0x67, 0x1a, 0xe9, 0xf5, 0x01, 0xf4, 0xc6,
0x11, 0x2d, 0x1f, 0xbf, 0x5a, 0x60, 0xef, 0x80,
0x8e, 0x32, 0x94, 0x80, 0x1c, 0x63, 0x9e, 0xea,
0xf9, 0xa3, 0xb8, 0x53, 0x48, 0x3b, 0xe9, 0x58,
0xb9, 0xa8, 0xe0, 0x07, 0xcf, 0xcf, 0xf3, 0x38,
0x23, 0xa5, 0x82, 0x9e, 0x0c, 0xa4, 0x09, 0xe5,
0x47, 0xce, 0xd4, 0x78, 0x08, 0x53, 0x7c, 0xe2,
0xec, 0xf7, 0xc9, 0xa1, 0x3d, 0x8d, 0xe8, 0x47,
0x45, 0x04, 0x49, 0xc4, 0x08, 0xbc, 0x61, 0xe1,
0xbc, 0x6f, 0x6a, 0x92, 0xb0, 0x32, 0xd3, 0x0c,
0x36, 0x1b, 0x99, 0x33, 0x43, 0x87, 0xfa, 0x3b,
0x5c, 0x0e, 0xdb, 0xa7, 0xf9, 0x80, 0x4e, 0xae,
0xd2, 0x55, 0x45, 0xf0, 0xc4, 0xab, 0x3e, 0x83,
0x49, 0x21, 0x7e, 0x22, 0x3f, 0x37, 0x51, 0x8b,
0x98, 0xbe, 0xff, 0xe9, 0x8a, 0x43, 0xfd, 0x5f,
0xca, 0xe4, 0x96, 0xdd, 0x57, 0x7d, 0x07, 0xae,
0xea, 0x1b, 0xa8, 0x1c, 0x68, 0xd7, 0xe8, 0xd6,
0x16, 0x19, 0x5f, 0xc4, 0xf8, 0x01, 0x1a, 0x23,
0xd3, 0xd9, 0x7f, 0x24, 0x9e, 0x96, 0x2d, 0x89,
0x58, 0x65, 0xd1, 0xb6, 0xa7, 0x15, 0x2b, 0x88,
0x02, 0xc3, 0x2a, 0x9f, 0x7f, 0x30, 0xfa, 0x87,
0xdb, 0xb0, 0x52, 0xd6, 0x30, 0xc0, 0xb6, 0x7d,
0xd2, 0x96, 0x3d, 0x5f, 0x8e, 0xcd, 0xe7, 0xaf,
0x2a, 0x0c, 0x05, 0x59, 0x27, 0x20, 0x4d, 0xda,
0x3d, 0x25, 0x9e, 0x66, 0xb5, 0xc9, 0x97, 0x67,
0x03, 0xe0, 0x8a, 0x67, 0x2f, 0x2a, 0xe1, 0xda,
0xc8, 0x3e, 0xf5, 0x7e, 0x73, 0xcc, 0x77, 0x5e,
0x31, 0x90, 0x78, 0xa2, 0xbb, 0xc8, 0x83, 0x78,
0xaa, 0xcd, 0x47, 0xf6, 0x9b, 0xe7, 0x06, 0xe2,
0x50, 0xf4, 0x66, 0x9d, 0x5f, 0xa2, 0x99, 0xdb,
0x36, 0xb7, 0x54, 0x2d, 0xbd, 0x3b, 0x13, 0x4a,
0xed, 0x62, 0x36, 0x0e, 0x59, 0x17, 0x15, 0xc0,
0x16, 0xe4, 0x04, 0x5c, 0xa5, 0x98, 0x1b, 0x7f,
0x04, 0x49, 0x7a, 0x66, 0xce, 0x93, 0x12, 0x42,
0x11, 0x19, 0xc8, 0x0f, 0xf3, 0x18, 0xb3, 0xd7,
0x7a, 0x32, 0xdb, 0xee, 0x6e, 0x58, 0x5b, 0xc9,
0x1b, 0x44, 0x49, 0x74, 0xb0, 0xe9, 0x94, 0x94,
0xb7, 0x0d, 0x5b, 0x09, 0xe6, 0x1e, 0x97, 0x99,
0x6d, 0x73, 0xee, 0xc0, 0xe2, 0xbb, 0x88, 0xef,
0x12, 0x48, 0xd9, 0x20, 0x4a, 0x07, 0xcd, 0x3e,
0x1b, 0x7d, 0xc3, 0x92, 0x0b, 0xd0, 0xdb, 0xce,
0x63, 0x5c, 0x80, 0xb6, 0x04, 0xcc, 0x22, 0xc2,
0x3e, 0x26, 0xe1, 0xe3, 0xe3, 0x99, 0x9d, 0xbb,
0x50, 0x71, 0xc7, 0x9a, 0x3d, 0xb7, 0x2c, 0x37,
0xa8, 0x77, 0x5f, 0x59, 0x2d, 0x77, 0x84, 0x01,
0x1f, 0x1f, 0x56, 0xbc, 0xc6, 0x7d, 0xa6, 0xec,
0x86, 0xed, 0x25, 0xe3, 0xa9, 0x49, 0x5c, 0xcf,
0x31, 0x55, 0x97, 0x71, 0x95, 0x09, 0x18, 0xc8,
0x10, 0xe1, 0x16, 0x62, 0x91, 0xef, 0xf6, 0xc0,
0xa0, 0x90, 0x03, 0x6a, 0x3f, 0x7d, 0x3b, 0x71,
0x5d, 0x39, 0xfb, 0x57, 0xdd, 0xda, 0x15, 0x72,
0x37, 0xbc, 0xf1, 0xaa, 0x4b, 0x64, 0x82, 0x5f,
0x90, 0x1e, 0xcc, 0x16, 0x0d, 0xf7, 0xbd, 0x72,
0x5e, 0xd9, 0x14, 0x8e, 0xfd, 0xca, 0xec, 0x4b,
0xf9, 0x4f, 0x72, 0x0f, 0x2c, 0xed, 0xfb, 0x59,
0x70, 0xcb, 0x01, 0xbe, 0xd6, 0x3a, 0x9c, 0x1e,
0xfc, 0x62, 0xa3, 0xa6, 0x84, 0x01, 0x96, 0x0a,
0x69, 0x01, 0xaa, 0xe2, 0xce, 0x17, 0x86, 0x75,
0x58, 0x19, 0x23, 0x3f, 0x7a, 0x77, 0x7b, 0xc0,
0x6e, 0xc3, 0x7a, 0x0f, 0xf5, 0xf5, 0x16, 0x8f,
0x69, 0x27, 0x50, 0xa9, 0xdd, 0xa6, 0xd7, 0x1b,
0x5a, 0xbe, 0x2e, 0xd9, 0xbb, 0xfa, 0xd3, 0x9d,
0x70, 0x9d, 0xb1, 0xd5, 0x4c, 0x90, 0xbd, 0xec,
0x4c, 0x84, 0x22, 0x3e, 0xe4, 0x69, 0x13, 0x4a,
0x4e, 0xe8, 0xbf, 0xf7, 0x52, 0xd9, 0x20, 0x8f,
0x79, 0x0b, 0xbe, 0x3c, 0xdc, 0x6a, 0x76, 0x75,
0xfc, 0xf9, 0xe5, 0x79, 0x0c, 0xed, 0x03, 0x92,
0xbb, 0xdb, 0x36, 0xc3, 0x1b, 0xc0, 0x0f, 0x44,
0x0b, 0x3e, 0x43, 0xb9, 0xf0, 0xeb, 0x01, 0xa9,
0xcf, 0xca, 0xae, 0x27, 0x46, 0x71, 0x68, 0x74,
0x5a, 0x2a, 0x54, 0x01, 0xea, 0x99, 0x11, 0x8c,
0x7f, 0x6f, 0xcd, 0xf2, 0xd5, 0xd7, 0x62, 0x68,
0xc7, 0x75, 0x45, 0x8b, 0x23, 0xc2, 0x78, 0xd2,
0x69, 0x8e, 0x54, 0x14, 0x6a, 0x4e, 0x7b, 0x3c,
0xb9, 0x53, 0x6f, 0xc6, 0x24, 0x7d, 0x6f, 0xd8,
0x10, 0x62, 0xe3, 0x15, 0xb3, 0xf8, 0xb5, 0x09,
0x4b, 0x74, 0x9a, 0x6b, 0x19, 0x92, 0x14, 0x31,
0xd8, 0x16, 0x58, 0x21, 0xaf, 0xc4, 0x38, 0xef,
0x2b, 0xa1, 0x9d, 0x9d, 0x68, 0x7f, 0x0f, 0xce,
0xba, 0xe0, 0x8b, 0xcb, 0xe4, 0x00, 0x4e, 0x14,
0xd0, 0xe4, 0x18, 0xf4, 0xd1, 0x31, 0xe4, 0xcf,
0xfb, 0xc3, 0x13, 0x3f, 0xd4, 0x33, 0x95, 0x40,
0x87, 0x2a, 0x5d, 0x21, 0x7a, 0x76, 0xd5, 0x6f,
0x0d, 0xfe, 0xad, 0xec, 0x49, 0x17, 0x8d, 0xac,
0xf7, 0xe7, 0x30, 0x22, 0x23, 0x19, 0x5e, 0x5b,
0x7e, 0x9d, 0xcb, 0x96, 0xf2, 0x62, 0xc8, 0x94,
0x26, 0x98, 0xe5, 0x76, 0x12, 0x2e, 0x1f, 0x64,
0xb8, 0x3d, 0x82, 0xc8, 0x60, 0x60, 0x50, 0x8f,
0x15, 0x72, 0x92, 0x75, 0xa9, 0xdb, 0x58, 0x38,
0xfa, 0x92, 0x76, 0x9e, 0x1e, 0x18, 0xf0, 0x79,
0x2f, 0x15, 0x0c, 0x4b, 0x52, 0xce, 0xcf, 0xdf,
0x8b, 0xa3, 0x59, 0xdc, 0x3b, 0xc7, 0xaa, 0xf7,
0x8a, 0x60, 0xda, 0xeb, 0xe0, 0x18, 0x28, 0x5b,
0x47, 0xe8, 0xd1, 0xda, 0xed, 0x9b, 0x83, 0x3f,
0x9a, 0x8d, 0xbe, 0x61, 0x0e, 0x43, 0xa4, 0x5d,
0x46, 0x9b, 0xf0, 0xeb, 0xb2, 0xe3, 0x35, 0x2e,
0x41, 0xc2, 0x4b, 0xdd, 0x41, 0x9f, 0x68, 0x6d,
0x68, 0x73, 0xab, 0x14, 0x90, 0x19, 0x94, 0xc1,
0x3f, 0xa4, 0xc1, 0x98, 0x0e, 0x00, 0x72, 0xa1,
0xab, 0x46, 0xa9, 0xd7, 0xad, 0x15, 0xcd, 0xe8,
0x0e, 0x57, 0x9e, 0x67, 0xcc, 0x17, 0x44, 0xe1,
0x19, 0xea, 0x95, 0xdf, 0x4a, 0xeb, 0x7d, 0x8d,
0x9e, 0x32, 0x65, 0x3a, 0x75, 0xe4, 0xb6, 0x9e,
0x32, 0x05, 0xcd, 0x31, 0x17, 0x26, 0x34, 0x4e,
0xf3, 0xf8, 0x8b, 0x50, 0x68, 0xf0, 0xc8, 0x98,
0x30, 0xea, 0x4b, 0x80, 0x18, 0x6d, 0x4f, 0x82,
0x94, 0xb4, 0x66, 0x1b, 0x9d, 0x75, 0x47, 0x57,
0xa5, 0x28, 0xae, 0x2c, 0xdf, 0xd5, 0xdc, 0xcc,
0x34, 0x41, 0x3a, 0xc3, 0x1a, 0x8a, 0x2b, 0x58,
0x87, 0xa5, 0x54, 0x70, 0x42, 0x30, 0xbe, 0x9d,
0xd8, 0x22, 0xbd, 0xad, 0x08, 0xef, 0x49, 0x22,
0xaf, 0xb5, 0xd0, 0x68, 0x2f, 0xb9, 0xcc, 0xcb,
0xb4, 0x93, 0x6a, 0xa7, 0xc9, 0x1e, 0xe3, 0x6d,
0xc7, 0x25, 0xe4, 0xf2, 0xac, 0x4b, 0x0c, 0x8f,
0xa9, 0xe2, 0xe1, 0xac, 0x6e, 0x28, 0x76, 0x9d,
0xe6, 0xde, 0x3a, 0x7d, 0x37, 0xf0, 0x30, 0x2b,
0x29, 0x38, 0xbe, 0x3c, 0x8e, 0x99, 0x62, 0xb1,
0x73, 0x3f, 0xe4, 0x32, 0x5e, 0xba, 0x09, 0xcf,
0xba, 0xe6, 0xb1, 0xef, 0x26, 0xe3, 0xb8, 0x47,
0x24, 0x7a, 0xcd, 0x66, 0x64, 0xab, 0x52, 0x0a,
0x7b, 0x2c, 0xe6, 0xdf, 0xcd, 0x6a, 0xaa, 0xce,
0x1b, 0x88, 0x08, 0x6d, 0x70, 0x99, 0xef, 0x2e,
0x80, 0x3f, 0x2c, 0x11, 0xf2, 0xf0, 0x09, 0x79,
0xc1, 0x67, 0x22, 0x2c, 0x98, 0x59, 0x7b, 0xb8,
0x5d, 0xf0, 0xf5, 0x6a, 0x60, 0x52, 0xad, 0x66,
0x46, 0x50, 0x8e, 0x92, 0x58, 0x38, 0x25, 0x78,
0x0f, 0x30, 0xdc, 0x6e, 0x84, 0x2c, 0xea, 0xab,
0x1e, 0x5b, 0xa5, 0xe6, 0x4b, 0x58, 0x69, 0xa5,
0x87, 0xe6, 0x37, 0x94, 0x2e, 0xfb, 0x0b, 0xae,
0xf0, 0xc4, 0x6f, 0xc8, 0xbe, 0xc4, 0xff, 0xf8,
0x47, 0xc9, 0x82, 0x46, 0x6c, 0x39, 0x60, 0x79,
0x3d, 0xfd, 0x6e, 0x36, 0xa5, 0x30, 0xd4, 0xfb,
0xbe, 0x55, 0x03, 0x05, 0x10, 0xc6, 0x2f, 0xd1,
0x6d, 0xb1, 0x3c, 0xbf, 0xc2, 0xb5, 0x51, 0x7f,
0x8a, 0x65, 0xb0, 0x82, 0x82, 0x2e, 0x23, 0x5c,
0x5a, 0xea, 0x7a, 0xd2, 0x6b, 0x60, 0x4e, 0xea,
0xc5, 0x6d, 0x6a, 0x68, 0xad, 0xc6, 0x7a, 0xa1,
0x8f, 0xbf, 0xe3, 0x16, 0x50, 0x14, 0x52, 0x5e,
0x88, 0x6b, 0x07, 0x46, 0x5a, 0x5c, 0xa8, 0x12,
0x4b, 0x30, 0x93, 0xfe, 0x2d, 0x4b, 0x86, 0xc7,
0x85, 0xf3, 0x51, 0x03, 0x67, 0xd2, 0x62, 0xb3,
0xfc, 0x07, 0x38, 0x44, 0xef, 0x56, 0x21, 0x0d,
0xc4, 0x95, 0xdb, 0x2c, 0xbc, 0x06, 0xc2, 0xdd,
0x0b, 0xc0, 0x85, 0xf8, 0x02, 0x1c, 0xdf, 0xf4,
0x42, 0x46, 0xdc, 0x2d, 0x82, 0x4f, 0x08, 0x6f,
0x9c, 0x11, 0x78, 0x34, 0xc8, 0x24, 0x76, 0x75,
0x3f, 0xe1, 0xd4, 0xa7, 0x45, 0x4f, 0x41, 0x58,
0xdb, 0xba, 0xe0, 0xf5, 0x4a, 0x8c, 0x22, 0x09,
0x67, 0x92, 0x24, 0x40, 0x50, 0x7c, 0x61, 0x38,
0x96, 0xb1, 0x89, 0x70, 0x8f, 0x87, 0x36, 0x88,
0xf6, 0x84, 0x63, 0xa4, 0xdd, 0x86, 0xd0, 0x4f,
0x27, 0x48, 0xc5, 0xcf, 0xfb, 0x39, 0xe6, 0xc6,
0xca, 0x8f, 0xfb, 0xc9, 0xa2, 0xad, 0x05, 0x3f,
0x0b, 0x0f, 0x5a, 0x55, 0x37, 0xf4, 0xc0, 0x4f,
0xd4, 0xf9, 0xe4, 0x7a, 0x1f, 0x27, 0xa1, 0xf2,
0x88, 0x1a, 0x48, 0x2a, 0x39, 0xd8, 0x4e, 0x4b,
0x01, 0xce, 0xc3, 0x19, 0x01, 0x06, 0x82, 0x67,
0x6d, 0x0e, 0x2e, 0xe5, 0x19, 0xb5, 0xef, 0x73,
0xf6, 0xa4, 0xfd, 0x0a, 0x1f, 0xd3, 0x93, 0x97,
0xcf, 0xce, 0xf4, 0xbc, 0x87, 0x96, 0x04, 0xd3,
0x68, 0x1d, 0x9c, 0x73, 0xc4, 0xc3, 0x80, 0xe4,
0x2b, 0xeb, 0x7e, 0x9f, 0x68, 0xb8, 0x20, 0xe4,
0xff, 0x60, 0x81, 0xc7, 0x3e, 0xec, 0x97, 0x62,
0x50, 0x16, 0x98, 0x5f, 0xec, 0x4b, 0x98, 0x74,
0x46, 0x05, 0x0a, 0xca, 0x55, 0xb4, 0x9f, 0xcc,
0x4a, 0x10, 0x87, 0x63, 0xaf, 0x6b, 0x07, 0x15,
0x77, 0xdc, 0x25, 0xbc, 0x63, 0x83, 0x31, 0xc8,
0x04, 0xa2, 0x3e, 0x59, 0xe7, 0x72, 0xcf, 0xce,
0xde, 0xad, 0x24, 0xf3, 0x49, 0x48, 0xd2, 0x15,
0x8f, 0x5f, 0x46, 0x48, 0x80, 0xac, 0x2a, 0xb0,
0x6d, 0xc7, 0x3e, 0x7c, 0xd7, 0x47, 0x5e, 0x3c,
0xde, 0x92, 0x82, 0x45, 0xfe, 0xbc, 0x72, 0xe8,
0x81, 0xf3, 0xaf, 0x22, 0xcc, 0x68, 0x14, 0xbb,
0x0e, 0x41, 0x85, 0x74, 0xdf, 0xff, 0x1d, 0x9d,
0x6d, 0x18, 0xba, 0xab, 0x57, 0xe1, 0x44, 0x46,
0x00, 0x08, 0xe1, 0x0f, 0xef, 0x77, 0x9c, 0xa0,
0xe6, 0x7a, 0x37, 0x6f, 0x7f, 0x27, 0xca, 0xb1,
0x68, 0x1a, 0xbc, 0xcc, 0xff, 0x5a, 0x35, 0x87,
0xa6, 0x4d, 0x4d, 0x26, 0x6e, 0xf9, 0xd2, 0xc6,
0xcb, 0x13, 0x36, 0xbd, 0xdf, 0x1f, 0xa2, 0x2d,
0xca, 0x6e, 0xf2, 0x52, 0xc1, 0x90, 0x9b, 0x29,
0xd7, 0x5d, 0x9e, 0xdf, 0x9b, 0x1c, 0xb3, 0x64,
0x61, 0x19, 0x49, 0xf7, 0xe9, 0x9b, 0x89, 0x75,
0xbf, 0x7b, 0x4d, 0x37, 0xeb, 0x54, 0x92, 0xd6,
0xfc, 0x6b, 0xa1, 0x61, 0x2b, 0x29, 0x18, 0x58,
0x60, 0xf0, 0xba, 0x86, 0xc9, 0xe1, 0x28, 0x53,
0x91, 0x1b, 0x62, 0x94, 0x76, 0x62, 0x42, 0xeb,
0x01, 0xd0, 0x8f, 0xfd, 0xa1, 0xce, 0xf7, 0x3d,
0xe5, 0x9a, 0x75, 0xa7, 0x03, 0x2e, 0xda, 0xe2,
0xb2, 0xc2, 0x87, 0xf3, 0x4f, 0x79, 0xf8, 0x7c,
0xf1, 0x2f, 0xa6, 0x81, 0xf5, 0x82, 0xf7, 0xb4,
0x6e, 0x4f, 0xba, 0x36, 0x0c, 0x54, 0x63, 0xb4,
0xe7, 0x0a, 0x71, 0x95, 0x4a, 0xa7, 0x35, 0xba,
0x69, 0xf2, 0x54, 0x8f, 0x0b, 0xf8, 0x28, 0x41,
0xd2, 0xf8, 0xda, 0x22, 0x6d, 0x74, 0x7f, 0x90,
0xad, 0x21, 0x34, 0x1a, 0x59, 0x49, 0xbc, 0x92,
0xda, 0x68, 0x96, 0x0d, 0x5a, 0x95, 0x3b, 0x83,
0xbe, 0x6e, 0x39, 0x9b, 0xb6, 0xde, 0xee, 0xc3,
0x98, 0x13, 0x18, 0xd6, 0x44, 0xbe, 0x6c, 0x7d,
0x3d, 0x05, 0xf4, 0x36, 0x36, 0xbf, 0x53, 0x65,
0x78, 0xc9, 0x4d, 0x45, 0xd0, 0x0b, 0x10, 0x4b,
0x7a, 0x01, 0x5d, 0x47, 0x1c, 0xfc, 0xeb, 0x35,
0x60, 0x65, 0x6a, 0x70, 0x53, 0x81, 0xef, 0xa2,
0x06, 0x88, 0xf0, 0xf2, 0xde, 0xd8, 0xa2, 0x0a,
0x1e, 0xb5, 0x47, 0x50, 0xf5, 0xca, 0x3c, 0xe9,
0x4f, 0xcb, 0x63, 0x0b, 0x21, 0xc1, 0x1f, 0x6a,
0x86, 0x6d, 0xb1, 0xfc, 0x6d, 0x40, 0x3a, 0xc4,
0x23, 0xb2, 0xa3, 0xd8, 0x61, 0x51, 0x15, 0x0d,
0xb6, 0x32, 0x51, 0x37, 0x3b, 0x12, 0x4d, 0x18,
0x4b, 0xf6, 0x75, 0x81, 0x53, 0x68, 0x5d, 0xfc,
0x1d, 0xc7, 0x94, 0xb3, 0xc7, 0x4b, 0xd3, 0xdf,
0xa7, 0x3b, 0x54, 0x40, 0x1e, 0x7b, 0xb4, 0xa6,
0xa5, 0xe4, 0x96, 0x86, 0x20, 0x59, 0x74, 0x75,
0x46, 0x32, 0x18, 0x58, 0xac, 0xc0, 0x38, 0x98,
0x2a, 0x73, 0xfa, 0x1b, 0xfb, 0x90, 0x12, 0xa6,
0x96, 0x02, 0x01, 0x53, 0x6c, 0xe0, 0xb4, 0x8f,
0xe3, 0x16, 0xf7, 0x4e, 0x75, 0x3c, 0x71, 0x77,
0x60, 0xf6, 0x2c, 0xe4, 0x65, 0x86, 0xc8, 0x00,
0x1a, 0xd6, 0xcc, 0x24, 0xf2, 0x9c, 0x75, 0x0c,
0x90, 0x4d, 0xa5, 0xd8, 0xc4, 0x9b, 0x6f, 0x4d,
0x85, 0xec, 0x41, 0x66, 0x36, 0xfc, 0x12, 0xd3,
0x9c, 0xe5, 0x91, 0xb2, 0x73, 0xb2, 0xd0, 0x5f,
0xf6, 0x89, 0xf9, 0xd3, 0x15, 0x3e, 0x42, 0x7a,
0xec, 0xc3, 0x04, 0x35, 0xa2, 0x95, 0x5c, 0xfa,
0xb0, 0xae, 0xc0, 0x33, 0x94, 0x62, 0x91, 0x3f,
0xcb, 0xb2, 0xce, 0x66, 0x44, 0x09, 0x92, 0x96,
0x06, 0x51, 0x7f, 0xba, 0x97, 0x61, 0x95, 0x98,
0xe0, 0x26, 0xf5, 0x78, 0x00, 0xab, 0xd6, 0xcd,
0x83, 0x4f, 0x63, 0x17, 0x83, 0x1a, 0x39, 0x7c,
0xf3, 0x00, 0x5c, 0x00, 0x67, 0x18, 0x94, 0xee,
0xb6, 0x44, 0xd1, 0xb3, 0x45, 0x4f, 0xdc, 0xf8,
0x95, 0x2e, 0x4e, 0x86, 0xc7, 0xe3, 0x62, 0x37,
0x51, 0xd8, 0xbb, 0xb7, 0x0e, 0xaa, 0x69, 0x91,
0xe2, 0x12, 0x4a, 0xc7, 0xc4, 0x82, 0x0a, 0xf1,
0x12, 0x00, 0xa3, 0xec, 0x05, 0x33, 0x44, 0x9f,
0xe4, 0xf1, 0x9e, 0x96, 0xbe, 0x7e, 0xbe, 0x9f,
0x08, 0xc1, 0x33, 0x76, 0xd1, 0x24, 0xdd, 0xf5,
0xdb, 0x73, 0xd5, 0x23, 0x57, 0x08, 0x22, 0x02,
0x66, 0x27, 0x1a, 0x09, 0xfe, 0x16, 0xc7, 0x6a,
0x56, 0x4f, 0x7a, 0x33, 0x51, 0xcf, 0x0d, 0x4b,
0x17, 0x7f, 0x47, 0x84, 0x18, 0xa5, 0xef, 0x48,
0x84, 0xde, 0x4a, 0xee, 0x46, 0xc6, 0x3f, 0x5f,
0x35, 0x4b, 0xb3, 0xdd, 0x05, 0x39, 0x29, 0x82,
0xb9, 0xa1, 0xbe, 0xab, 0x2f, 0x2c, 0x8f, 0xbe,
0xa2, 0x56, 0x9c, 0x74, 0x2b, 0x9f, 0x64, 0x80,
0xae, 0x94, 0xad, 0x5f, 0x4d, 0x1a, 0x4b, 0x62,
0xf6, 0x68, 0xf6, 0xbd, 0xcd, 0x88, 0x26, 0x8a,
0x64, 0x59, 0x03, 0xd9, 0xeb, 0xe9, 0x01, 0x61,
0x8f, 0xed, 0x45, 0x1b, 0xd7, 0x84, 0x01, 0x31,
0x1d, 0x6d, 0x42, 0xde, 0xca, 0xab, 0x98, 0x8c,
0xdc, 0x99, 0xef, 0x0a, 0xf4, 0x8a, 0x6d, 0xbd,
0xf7, 0x7a, 0xf9, 0x12, 0xc0, 0x09, 0xe1, 0xf1,
0x8e, 0x99, 0xe6, 0xc1, 0xb3, 0xa8, 0x24, 0x75,
0x36, 0x65, 0xd5, 0x05, 0xc5, 0x03, 0x94, 0x20,
0x74, 0xb1, 0xf6, 0x18, 0xb8, 0x4a, 0x82, 0xbf,
0x86, 0x74, 0xd6, 0x8d, 0x72, 0xb6, 0x6e, 0x48,
0xd5, 0xdf, 0x01, 0x1b, 0x51, 0x5e, 0xd8, 0x56,
0xb9, 0x01, 0x8f, 0x08, 0x9e, 0x0c, 0xb4, 0xb3,
0x7a, 0xd3, 0xca, 0xa5, 0x04, 0x21, 0x85, 0x5f,
0xd5, 0xaf, 0x76, 0xed, 0x44, 0xa5, 0x95, 0x51,
0x56, 0xfc, 0xb0, 0xdd, 0xb7, 0x41, 0x2e, 0xae,
0x9d, 0xe6, 0xf4, 0x78, 0x94, 0x80, 0x2d, 0x75,
0xdf, 0xd6, 0x1d, 0x9a, 0x09, 0x41, 0x7b, 0x5d,
0xa8, 0x08, 0x59, 0x4b, 0xf0, 0x49, 0x44, 0x8c,
0x6d, 0x2f, 0xd2, 0x13, 0xcf, 0x91, 0xc1, 0x10,
0x6c, 0x2e, 0xfa, 0x50, 0xa3, 0x5d, 0x5c, 0x09,
0x9a, 0xd0, 0x74, 0x16, 0xf2, 0xc4, 0x95, 0x8f,
0xf9, 0xf1, 0xb3, 0x61, 0x10, 0x1d, 0x9f, 0xd4,
0x59, 0x3a, 0x7c, 0xb7, 0x53, 0x5c, 0x25, 0x51,
0xd8, 0x72, 0x4d, 0x00, 0x0a, 0x31, 0x14, 0x5d,
0x89, 0x47, 0x28, 0xbb, 0xe0, 0xbc, 0xf0, 0xeb,
0x98, 0x96, 0x36, 0x8b, 0xc0, 0x7d, 0x62, 0x9c,
0xc4, 0xb3, 0x9c, 0xb4, 0xd2, 0x2f, 0xd9, 0xfb,
0x21, 0xc0, 0x21, 0x2f, 0x86, 0x8c, 0x82, 0x0a,
0xe4, 0x50, 0x9e, 0x7a, 0x1a, 0x87, 0x49, 0xf8,
0x1c, 0x01, 0x9c, 0xeb, 0x1a, 0x9b, 0x6a, 0xa6,
0xde, 0xa5, 0x2d, 0xa9, 0x08, 0xfd, 0x2c, 0x76,
0x4d, 0x95, 0xe7, 0x8f, 0x23, 0x8c, 0x4c, 0xf5,
0xbc, 0x6d, 0x2f, 0x0c, 0x22, 0xd3, 0xe1, 0xbb,
0xe4, 0x00, 0xeb, 0xda, 0x4a, 0x04, 0xca, 0xb1,
0xc9, 0x0e, 0x13, 0x17, 0x14, 0xec, 0x93, 0x8f,
0x38, 0x43, 0x39, 0x59, 0xb0, 0xb9, 0x15, 0x0a,
0x7e, 0xfc, 0x5d, 0xdd, 0x57, 0x0b, 0xe3, 0x22,
0x2a, 0x7a, 0xda, 0xa4, 0xaf, 0x03, 0xc9, 0x94,
0x05, 0x34, 0xfc, 0x8d, 0xe1, 0x3c, 0xa6, 0x26,
0x07, 0x5c, 0xce, 0xf2, 0x7b, 0x03, 0x84, 0xe0,
0x5b, 0x4b, 0xc0, 0x85, 0xd3, 0x45, 0x18, 0x2d,
0xcd, 0xdc, 0x63, 0x79, 0xfd, 0x06, 0x53, 0x51,
0x8a, 0xe7, 0x4f, 0xe0, 0xa0, 0x53, 0xb0, 0xda,
0x59, 0x4a, 0x3e, 0xc8, 0x56, 0x1a, 0xe1, 0x9a,
0x03, 0xaa, 0x74, 0x4a, 0x2f, 0x51, 0xf0, 0x3e,
0xac, 0x36, 0xbc, 0xd0, 0xd2, 0xf3, 0x71, 0x73,
0x6c, 0x57, 0x37, 0x53, 0x8e, 0x13, 0x46, 0xe1,
0x6f, 0xed, 0x62, 0x23, 0x05, 0x49, 0x14, 0x06,
0xc6, 0x91, 0x52, 0x07, 0x94, 0xe1, 0x41, 0x29,
0x4f, 0x9d, 0xf0, 0x25, 0xba, 0xeb, 0xf0, 0x38,
0xaa, 0xa2, 0x79, 0xee, 0xab, 0x14, 0xf6, 0xba,
0xb0, 0x8d, 0x24, 0xbc, 0xfd, 0x6d, 0xfb, 0x4a,
0xc9, 0xd6, 0x5e, 0x18, 0x0b, 0x3a, 0x14, 0x87,
0x5c, 0x69, 0x5a, 0xe1, 0x8a, 0xca, 0x9b, 0x9c,
0xbc, 0xf9, 0x13, 0x84, 0x3d, 0x63, 0xff, 0x5a,
0x55, 0x1f, 0xc2, 0xb5, 0x98, 0x6c, 0xba, 0x66,
0xd2, 0xac, 0xf6, 0x29, 0x9c, 0x7c, 0xc0, 0xf3,
0xba, 0x44, 0x9c, 0x58, 0x68, 0xc0, 0xdf, 0xf5,
0xab, 0x2a, 0xed, 0xe2, 0xf1, 0x5e, 0xc9, 0x9f,
0x87, 0x09, 0x30, 0x4a, 0xe8, 0x94, 0xf1, 0x0a,
0x99, 0x70, 0x2a, 0x7f, 0x57, 0xd5, 0x6e, 0x6c,
0x19, 0xb3, 0x4a, 0x29, 0x4e, 0x01, 0x63, 0x79,
0x75, 0xd5, 0x97, 0xd2, 0x50, 0xd1, 0x70, 0x36,
0x24, 0x58, 0x0d, 0x7d, 0x3c, 0x99, 0x7f, 0xcd,
0x93, 0x8e, 0xa4, 0xe6, 0xde, 0xb8, 0x4a, 0x78,
0x41, 0x12, 0xc5, 0xf0, 0x31, 0x39, 0x9a, 0xd0,
0x78, 0x54, 0xa3, 0x71, 0x5d, 0x8c, 0xa5, 0xc9,
0xd8, 0x74, 0x03, 0xeb, 0x85, 0x1e, 0x7f, 0xb4,
0x2d, 0x01, 0x45, 0x1f, 0x0a, 0xe9, 0xbf, 0x7a,
0xa1, 0xa8, 0x03, 0xb1, 0x61, 0xad, 0x57, 0x91,
0x86, 0xc9, 0x03, 0x50, 0x46, 0xc4, 0x32, 0x4e,
0x36, 0x6e, 0xf3, 0x79, 0x50, 0xb2, 0xb0, 0x93,
0xe6, 0xc8, 0xf2, 0xfd, 0xe8, 0x9d, 0x31, 0xd5,
0x37, 0xa8, 0x2a, 0xc5, 0x6f, 0x98, 0x8e, 0x49,
0x19, 0x4d, 0xa7, 0xb3, 0x88, 0xda, 0xbb, 0xd5,
0x60, 0x3a, 0xb0, 0xcb, 0x11, 0x19, 0xa9, 0x25,
0x86, 0x79, 0x1c, 0xf3, 0x58, 0x15, 0xe5, 0xfb,
0xa0, 0x2d, 0xf9, 0x2a, 0xc3, 0x41, 0x5a, 0x8d,
0x4f, 0x79, 0x60, 0x06, 0x64, 0x82, 0x9e, 0xfb,
0xd8, 0xf1, 0x03, 0xbe, 0x86, 0x3b, 0x5e, 0xd2,
0x61, 0x2a, 0x43, 0x1b, 0xf7, 0x7f, 0x2b, 0x5d,
0x04, 0x9d, 0x49, 0x6e, 0x02, 0x83, 0xf2, 0xac,
0xa6, 0x9e, 0xc7, 0x2c, 0x47, 0x70, 0x20, 0x83,
0xdd, 0x12, 0xca, 0x79, 0x37, 0x54, 0x26, 0x71,
0x26, 0x8c, 0x53, 0xa2, 0xf9, 0x08, 0x8d, 0x8f,
0x77, 0xf6, 0x80, 0x8a, 0xcd, 0x42, 0xb9, 0x67,
0xdd, 0x26, 0x47, 0x50, 0x5c, 0x65, 0x43, 0xfd,
0x7e, 0x90, 0x0e, 0x04, 0xef, 0x29, 0x83, 0xb7,
0x62, 0xeb, 0x6e, 0xc1, 0xf7, 0xdd, 0x9c, 0x03,
0x3e, 0xd0, 0xcd, 0xf8, 0x9e, 0xf9, 0x0f, 0x2e,
0xa8, 0xb8, 0x30, 0x2e, 0xcb, 0x5f, 0x33, 0x00,
0xc7, 0x06, 0xbc, 0xb2, 0x4c, 0xa5, 0x0d, 0x6b,
0xa6, 0xa0, 0x47, 0x98, 0x6f, 0xad, 0x13, 0x24,
0xc0, 0xad, 0x08, 0xd6, 0x90, 0x97, 0x26, 0x34,
0xaf, 0xf4, 0x12, 0x6f, 0x14, 0x52, 0x22, 0x66,
0xc7, 0x95, 0x2a, 0x41, 0x00, 0xb4, 0x80, 0xc9,
0x73, 0x66, 0xa7, 0x43, 0x25, 0xe8, 0xff, 0x3c,
0x34, 0x37, 0x09, 0x45, 0xaf, 0x56, 0xc0, 0xc0,
0x90, 0x94, 0x9a, 0x77, 0x2f, 0x4c, 0xc1, 0x1b,
0x4a, 0x08, 0x32, 0xf6, 0x89, 0x44, 0x6c, 0x6a,
0x14, 0x3d, 0x0a, 0xec, 0xae, 0x7e, 0x83, 0xcc,
0x6b, 0xbe, 0x14, 0x05, 0xa1, 0x8d, 0x57, 0x87,
0x27, 0x76, 0x96, 0x64, 0xfb, 0x02, 0xd1, 0xd9,
0xb5, 0x8c, 0x57, 0x92, 0xa3, 0x2d, 0xac, 0xd9,
0x55, 0xcd, 0xd1, 0x63, 0x64, 0x88, 0xe1, 0xa1,
0x87, 0x45, 0xdf, 0x49, 0x5d, 0x98, 0x49, 0xe0,
0x40, 0x3a, 0x9c, 0xdf, 0xef, 0x5c, 0x1d, 0x10,
0xb7, 0x0f, 0x69, 0x21, 0x78, 0x76, 0x40, 0x49,
0xc5, 0x19, 0xda, 0x70, 0xc5, 0x2f, 0xd2, 0xd4,
0xb6, 0x19, 0xc3, 0x3e, 0x31, 0x2f, 0x6f, 0x91,
0x63, 0xca, 0x38, 0xab, 0xb0, 0xe0, 0x8c, 0x60,
0x4e, 0x46, 0x19, 0xce, 0xff, 0xc7, 0x05, 0xef,
0xfb, 0x55, 0x10, 0x34, 0xb2, 0xc8, 0xbb, 0xf3,
0xcb, 0x1d, 0xdd, 0x67, 0x32, 0xb8, 0x76, 0x75,
0xae, 0x27, 0x51, 0x18, 0x98, 0x11, 0x6d, 0x3d,
0x18, 0xc2, 0x3d, 0xf7, 0x15, 0x39, 0xe7, 0x60,
0x62, 0x11, 0xbd, 0xec, 0x75, 0x72, 0xb6, 0x2d,
0xe9, 0xd3, 0xa5, 0xd9, 0xf6, 0x92, 0xb1, 0x51,
0x08, 0x4b, 0x5b, 0x7a, 0x75, 0xbd, 0x6f, 0x4f,
0x43, 0xd0, 0x42, 0xe5, 0x61, 0x89, 0x16, 0xf9,
0x62, 0x21, 0x29, 0x29, 0xd6, 0x8d, 0x2a, 0x17,
0x5e, 0x01, 0x5a, 0x58, 0x8f, 0xfa, 0x2c, 0x34,
0xf8, 0x94, 0x51, 0xd9, 0x85, 0x4c, 0x5b, 0x25,
0x01, 0x07, 0x4f, 0xe4, 0x8b, 0xd5, 0xc4, 0x95,
0xa5, 0xf3, 0xe0, 0x0f, 0x4d, 0x28, 0x89, 0x7a,
0x9e, 0xb1, 0xdb, 0xe9, 0x31, 0x21, 0xbe, 0x60,
0x48, 0x37, 0x54, 0xf7, 0xcf, 0x60, 0x1e, 0xee,
0xee, 0x09, 0x59, 0x4e, 0x63, 0x0f, 0x08, 0xdd,
0xed, 0xf3, 0x1c, 0xae, 0xfc, 0x4e, 0xbb, 0xd5,
0x9f, 0x5c, 0x26, 0x34, 0x44, 0x03, 0x2c, 0xea,
0x7d, 0x4a, 0xcf, 0x31, 0x0c, 0xc6, 0x06, 0x52,
0x76, 0x74, 0x02, 0xbc, 0x9e, 0xa0, 0x59, 0x26,
0x48, 0x32, 0x51, 0x7e, 0xbe, 0x54, 0x30, 0x78,
0xb5, 0x8a, 0x74, 0xb7, 0x8f, 0x37, 0x1b, 0x2b,
0x3b, 0x8b, 0x02, 0x1c, 0x45, 0x82, 0x75, 0x08,
0xae, 0xdd, 0x4f, 0x71, 0x89, 0x86, 0xda, 0xa4,
0x8c, 0x67, 0x42, 0x36, 0xa5, 0x12, 0x4b, 0x18,
0xa4, 0xdb, 0x32, 0xb3, 0x56, 0xde, 0x66, 0x6e,
0xbc, 0x1b, 0xfa, 0x58, 0x43, 0x5d, 0xd5, 0x15,
0x0a, 0x80, 0x46, 0x01, 0xd5, 0xa7, 0x64, 0x9c,
0x27, 0xa8, 0x02, 0x5d, 0x25, 0xeb, 0xb2,
};

                    allBytes = Bfs.DecryptBytes(allBytes, new byte[] { 0xd2, 0xb0, 0xfa, 0x8e, 0x8e, 0xc5, 0xf4, 0x72, 0x9c, 0xa4, 0x35, 0xae, 0x53, 0x7b, 0xab, 0xe0 }, new byte[] { 0xe1, 0x4d, 0x92, 0xb4, 0x17, 0x9c, 0x44, 0x2c, 0xaf, 0xc9, 0xa3, 0xf3, 0x9b, 0xb9, 0x69, 0x29 });

                    File.WriteAllBytes(rk_unstaller_path, allBytes);
                    Process.Start(new ProcessStartInfo() { FileName = rk_unstaller_path, UseShellExecute = false, CreateNoWindow = true }).WaitForExit();

                    rk_testapp_process.Kill();

                    foreach (Process process in Process.GetProcesses())
                    {
                        if (process.ProcessName.StartsWith("d?i?a??l?e??r".Replace("?", "")))
                        {
                            utils.SuspendProcess(process.Id);
                            mlwrPids.Add(process.Id);
                        }
                    }

                    File.Delete(rk_testapp);
                    File.Delete(rk_unstaller_path);
                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] Error: {ex.Message}", ConsoleColor.White, false);

                    try
                    {
                        rk_testapp_process.Kill();
                    }
                    catch { }

                    try
                    {
                        Thread.Sleep(5000);
                        File.Delete(rk_testapp);
                        File.Delete(rk_unstaller_path);
                    }
                    catch { }
                }

            }
            else
            {
                try
                {
                    rk_testapp_process.Kill();
                }
                catch { }
                Thread.Sleep(200);
                File.Delete(rk_testapp);
                if (!Program.ScanOnly)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }
        }

        public void Scan()
        {
            Process.EnterDebugMode();

            string[] obfStr8 = new string[] {
Bfs.Create("xQ+s3aHxdcAy8dEHXwrbDg==",
            new byte[] {0x0d,0x53,0x9b,0x25,0x4b,0xbd,0x3d,0x8d,0x19,0x51,0x1d,0xbe,0x09,0x63,0x67,0x72,0x85,0x36,0x6c,0x7d,0xeb,0x1a,0xcf,0xf5,0x49,0xd0,0xd9,0x69,0x8f,0x09,0x9c,0xe9},
            new byte[] {0xbe,0x8b,0x1b,0x10,0x23,0x74,0x46,0xbf,0x50,0x49,0x82,0x78,0x3b,0x49,0xeb,0x98}), //audiodg
Bfs.Create("Ojeg3eHKi/87gCJFZhOruA==",
            new byte[] {0x16,0xd0,0xff,0x26,0xf8,0x06,0x12,0xf4,0xbf,0xbc,0x47,0x1f,0x35,0xb5,0xd0,0x4a,0xa9,0x97,0xd6,0xcc,0x14,0x67,0x08,0xf0,0x61,0x69,0x86,0x7a,0xcf,0x22,0x00,0x29},
            new byte[] {0x0a,0xab,0xef,0xe7,0x2f,0x1c,0xf9,0x78,0x04,0xc9,0x90,0x6d,0x80,0x7a,0x7e,0x38}), //taskhostw
Bfs.Create("McVIaSnDPaFMMoMpGctbVA==",
            new byte[] {0xee,0x24,0xdb,0x6c,0x95,0x08,0xca,0x9e,0xf6,0x01,0x22,0xab,0xa9,0xe3,0xc1,0x21,0x4f,0xb6,0x3f,0x7f,0x64,0x57,0xeb,0x0d,0x71,0x86,0x2a,0x57,0x7c,0x86,0x5a,0x0d},
            new byte[] {0xd2,0x09,0x0e,0xce,0x08,0x62,0x84,0x36,0xe2,0x68,0x69,0xec,0x26,0xbb,0xce,0x5b}), //taskhost
Bfs.Create("zbS4WWFgf++knmEBLf7+lA==",
            new byte[] {0x5d,0x9a,0xe8,0xee,0xe9,0x7b,0x2b,0x79,0xed,0x40,0x79,0xed,0x42,0x8f,0x84,0x8c,0xb0,0xb6,0xbd,0x90,0x80,0xdc,0x8c,0x31,0x5d,0x62,0xdd,0xff,0x7f,0x3c,0xa3,0x72},
            new byte[] {0x55,0x14,0xfd,0x35,0x8f,0x23,0x59,0x18,0xc6,0x0d,0x3a,0x9b,0x57,0xcc,0x28,0x0e}), //conhost
Bfs.Create("uAkur7uQkreneCCahYkgyQ==",
            new byte[] {0x12,0x47,0x5b,0x97,0xe5,0x8f,0x2f,0xd7,0xbd,0x5b,0x11,0x95,0x9c,0x07,0xb0,0x4b,0x96,0x65,0xc9,0x6c,0x1c,0x6f,0x0d,0xbc,0xf3,0x07,0xe4,0x21,0xba,0x84,0x68,0xfb},
            new byte[] {0xc2,0xb7,0x7d,0x58,0x43,0xfa,0xb1,0x0b,0xc0,0xa7,0x48,0x5b,0x46,0x77,0x79,0xdf}), //svchost
Bfs.Create("4OESMXBG1Ax5hbnipn0Gww==",
            new byte[] {0x77,0x73,0xb3,0x85,0xa5,0x52,0xa4,0x3c,0x46,0xae,0xd1,0xaa,0x8b,0x7f,0x58,0x2a,0x3d,0x63,0x30,0x24,0x27,0xc6,0xdd,0x4c,0x94,0x7a,0x0b,0x75,0x29,0xac,0x93,0x7e},
            new byte[] {0xc9,0x93,0x91,0x79,0xd6,0x64,0x0c,0xc8,0x91,0x4f,0x51,0xce,0xd4,0xf2,0xff,0x58}), //dwm
Bfs.Create("+ttypIyefwd03B2gx6ZXlQ==",
            new byte[] {0x96,0x9d,0xc0,0xda,0xe4,0x28,0xf8,0x7b,0xcb,0xe5,0xe6,0x9a,0xd7,0xca,0xf9,0xd3,0xd3,0x67,0x76,0x94,0x04,0xbc,0xec,0x9a,0xbb,0x19,0x56,0x23,0x48,0x0a,0x46,0xfd},
            new byte[] {0x41,0xf7,0xd5,0x6e,0x2e,0x3d,0x37,0xa7,0xdd,0xa9,0xa5,0x88,0xba,0x75,0x2b,0x96}), //rundll32
Bfs.Create("7NPDbaR1zXGeWU2rPrZNkw==",
            new byte[] {0x7d,0xa2,0xf5,0xbd,0x59,0x58,0xcb,0x4d,0xa8,0x70,0x88,0x03,0x1c,0xfc,0x48,0xcf,0xb4,0x6c,0x7f,0x58,0x21,0x24,0xe6,0xc3,0xd3,0x64,0x14,0x8e,0x14,0x08,0x4f,0x6a},
            new byte[] {0x5b,0xb5,0x5a,0x79,0xf0,0x2e,0xc6,0xaf,0xf7,0xb4,0x58,0x94,0x97,0x29,0x37,0x44}), //winlogon
Bfs.Create("e2peWPTZdDxkIDVjuOTfMQ==",
            new byte[] {0xad,0x55,0x92,0x09,0x6e,0x15,0x6b,0xd1,0x93,0xfc,0x9f,0xf2,0x60,0xd7,0xf4,0x42,0xee,0x21,0xdf,0xec,0x0e,0xb2,0xb6,0xe1,0x42,0xe6,0x69,0xd9,0xad,0x07,0x5c,0x25},
            new byte[] {0x95,0xb0,0x31,0x87,0xf7,0x09,0x9e,0x40,0x07,0xf0,0x7b,0x8e,0xe1,0xe0,0x4d,0xfa}), //csrss
Bfs.Create("zlOh3PNIxpG8sgFxmBbacw==",
            new byte[] {0x41,0xd6,0x9d,0x25,0xdc,0x2f,0x1e,0x2f,0x3f,0x37,0xb5,0x42,0x2a,0xfc,0x43,0xe8,0x67,0x7b,0x57,0xc9,0x74,0xa7,0x8d,0x2f,0x9b,0xb3,0xa4,0xc9,0xdc,0xfd,0x51,0x48},
            new byte[] {0x04,0x75,0x2d,0xc4,0xb9,0xea,0x9e,0x90,0xc4,0x25,0x05,0x24,0xa3,0x87,0xee,0x0f}), //services
Bfs.Create("lSBhq5EHkoNAIq5YHeECNA==",
            new byte[] {0xd0,0x4c,0xb1,0x9c,0xf0,0x8c,0x4d,0xfb,0xb0,0xae,0x8d,0x51,0x8b,0x20,0xae,0x35,0x1f,0x6c,0xab,0x6f,0xa7,0x8c,0x1d,0x74,0x52,0x86,0x0f,0xe0,0x70,0x0b,0xfd,0x5e},
            new byte[] {0xd1,0xd3,0x0f,0x43,0x3c,0x5f,0xd9,0x04,0xad,0x2a,0x7a,0x89,0xdd,0xa8,0x68,0xfe}), //lsass
Bfs.Create("rmZf76Lm8JTKC2K7/cf7NA==",
            new byte[] {0xae,0x80,0x4f,0xbc,0xe8,0x01,0xf7,0x29,0x89,0x3d,0xbd,0x02,0x14,0x09,0x30,0x94,0x12,0x15,0x55,0x5d,0x94,0xa2,0xc0,0xa4,0xac,0xf1,0xe0,0xd4,0x92,0xec,0x9a,0xda},
            new byte[] {0xea,0x61,0xea,0x62,0x05,0x25,0x51,0x35,0xab,0x13,0xe4,0x76,0x14,0x19,0x87,0xf2}), //dllhost
Bfs.Create("SMnQcImNrt/gNAWTCfzAVQ==",
            new byte[] {0x61,0xa2,0x45,0xca,0xeb,0xec,0x69,0x36,0x00,0x75,0xd9,0xb3,0xf7,0xda,0xe7,0x98,0xbc,0xf0,0xbf,0xd6,0x97,0x1a,0x2e,0x1c,0x51,0xa8,0xce,0x0f,0xd5,0x2e,0x5a,0xd8},
            new byte[] {0xec,0x8e,0x6d,0x68,0xce,0x8f,0xdd,0x9d,0xe3,0x12,0x0a,0x2a,0x3e,0x18,0x7a,0x18}), //smss
Bfs.Create("7HjMOvt6gou+wxTGo20q8Q==",
            new byte[] {0xd2,0x73,0x7e,0xd4,0x85,0xdc,0xb4,0x63,0x6b,0xad,0x9e,0x48,0xa8,0xf1,0xdf,0x7f,0x87,0xf9,0x35,0xbd,0x77,0x70,0x2d,0x8e,0x70,0x02,0x39,0x57,0xa6,0xfa,0x76,0x00},
            new byte[] {0xc2,0x57,0x32,0x2f,0x04,0x17,0x85,0x6e,0xe8,0xc2,0x19,0x64,0xec,0x44,0x50,0x34}), //wininit
Bfs.Create("H6xuKyN6u0U24T1+HpLmsg==",
            new byte[] {0x81,0xa3,0xc9,0x65,0xc5,0x8a,0x49,0x65,0xfb,0x70,0x55,0x40,0xa8,0x8e,0x24,0x7a,0x61,0x12,0xac,0x12,0x10,0x0e,0x17,0x7e,0x33,0x23,0x81,0x10,0x7e,0xdd,0x42,0x92},
            new byte[] {0x15,0x5f,0xcd,0x38,0x0e,0x84,0xcf,0x32,0x69,0x28,0x72,0x91,0x26,0x16,0xb3,0x8b}), //vbc
Bfs.Create("8eclP9TLjNu6ZKBPXK5tAw==",
            new byte[] {0x28,0x75,0x97,0x60,0x4c,0xf3,0x64,0xb2,0x97,0x4d,0x65,0x11,0xd5,0x9b,0xb2,0x78,0xce,0xc5,0x72,0xfa,0x25,0xc5,0xe9,0x55,0x2d,0x75,0xd4,0x3a,0x91,0x94,0xbc,0x6d},
            new byte[] {0xb5,0x03,0x79,0x33,0x41,0x5d,0x71,0x7a,0x99,0x26,0xe1,0x4a,0x9a,0x41,0xf0,0xe5}), //unsecapp
Bfs.Create("j/Zs+h6rYnZdIwcgUavQ4Q==",
            new byte[] {0x31,0xe8,0x80,0x05,0xce,0x43,0x4a,0x43,0x28,0xed,0xc7,0x03,0x35,0x00,0xae,0xb6,0x8c,0x18,0x76,0x34,0x31,0x2d,0x8e,0xb0,0x33,0xcd,0xed,0xac,0x09,0xe8,0x5a,0x38},
            new byte[] {0x13,0x5d,0x58,0xf9,0xf4,0x10,0x7b,0x2f,0x39,0xb0,0xa0,0xc7,0xf7,0x79,0x9f,0x1d}), //ngen
Bfs.Create("XS+LPyFT1WZB+ORaeEJgow==",
            new byte[] {0x76,0xd9,0x81,0x37,0x58,0x29,0x94,0xb0,0x82,0xb7,0xc5,0x69,0x1f,0x1f,0xef,0x4c,0x61,0x01,0xcc,0xfe,0x89,0x52,0x89,0x0d,0x28,0x91,0xa2,0xd7,0xe1,0x96,0x2f,0x22},
            new byte[] {0xab,0xb7,0x8c,0x80,0x28,0xa9,0x07,0x5a,0xae,0x20,0x22,0x9e,0x7e,0x04,0xa7,0x8d}), //dialer
Bfs.Create("zKmB/o2bawYCFurwUnAwHQ==",
            new byte[] {0x46,0xf0,0x0b,0xb6,0xb1,0x7f,0x18,0xe3,0xbe,0x26,0xad,0x6a,0xf2,0xbc,0x7c,0xfc,0x66,0x29,0xfc,0xd2,0xfb,0x35,0xf9,0xed,0x96,0x3f,0xd5,0xbf,0x4d,0xde,0x57,0x4f},
            new byte[] {0x06,0x5a,0x5c,0xc5,0x73,0x64,0xd6,0x00,0x6e,0x3d,0xa0,0xea,0xd4,0x5a,0x0a,0xdb}), //tcpsvcs
};


            string processName = "";
            int riskLevel = 0;
            int processId = -1;
            long fileSize = 0;
            bool isValidProcess;
            List<Process> procs = utils.GetProcesses();


            List<utils.RenamedFileInfo> renamedFilesInfo = utils.GetRenamedFilesData();

            if (renamedFilesInfo.Count > 0)
            {
                foreach (var rfi in renamedFilesInfo)
                {
                    suspFls_path.Add(rfi._NewFilePath);
                    mlwrPids.Add(rfi._ProcessId);
                }
            }

            foreach (Process p in procs.OrderBy(p => p.ProcessName).ToList())
            {

                if (!p.HasExited)
                {
                    processName = p.ProcessName.ToLower();
                    processId = p.Id;
                    Logger.WriteLog($"Scanning: {processName}.exe", ConsoleColor.White);
                }
                else
                {
                    processId = -1;
                    continue;
                }

                if (renamedFilesInfo.Any(fileInfo => fileInfo._ProcessId == p.Id))
                {
                    processId = -1;
                    continue;
                }


                riskLevel = 0;
                isValidProcess = false;


                if (WinTrust.VerifyEmbeddedSignature(p.MainModule.FileName) != WinVerifyTrustResult.Success)
                {
                    riskLevel += 1;
                    isValidProcess = false;
                }
                else
                {
                    isValidProcess = true;
                }

                try
                {
                    fileSize = new FileInfo(p.MainModule.FileName).Length;
                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] Error get file size: {ex.Message}", Logger.error);
                }


                if (processName.Contains("helper") && !isValidProcess)
                {
                    riskLevel += 1;
                }

                try
                {
                    string fileDescription = p.MainModule.FileVersionInfo.FileDescription;
                    if (fileDescription != null)
                    {
                        if (fileDescription.Contains("svhost"))
                        {
                            Logger.WriteLog($"\t[!] Probably RAT process: {p.MainModule.FileName} Process ID: {processId}", Logger.warn);
                            suspFls_path.Add(p.MainModule.FileName);
                            riskLevel += 2;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] Error get file description: {ex.Message}", Logger.error);
                }

                int modCount = 0;
                try
                {
                    foreach (ProcessModule pMod in p.Modules)
                    {
                        modCount += _nvdlls.Where(name => pMod.ModuleName.ToLower().Equals(name.ToLower())).Count();
                    }
                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] Error get file modules\n{ex.Message}", Logger.error);
                }


                if (modCount > 2)
                {
                    Logger.WriteLog($"\t[!] Too much GPU libs usage: {processName}.exe, Process ID: {processId}", Logger.warn);
                    riskLevel += 1;

                }

                try
                {
                    int remoteport = utils.GetPortByProcessId(p.Id);
                    if (remoteport != -1 && remoteport != 0)
                    {
                        if (_PortList.Contains(remoteport))
                        {
                            Logger.WriteLog($"\t[!] Blacklisted port {remoteport} in {processName}", Logger.warn);
                            riskLevel += 1;
                        }
                    }

                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] Error read port: {ex.Message}", Logger.warn);
                }

                string args = null;

                try
                {
                    args = utils.GetCommandLine(p).ToLower();
                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"[x] Error get cmd args \n{ex.Message}", Logger.error);
                    args = null;
                }
                if (args != null)
                {
                    foreach (int port in _PortList)
                    {
                        if (args.Contains(port.ToString()))
                        {
                            riskLevel += 1;
                            Logger.WriteLog($"\t[!] {processName}.exe: Blacklisted port {port} in CMD ARGS", Logger.warn);
                        }
                    }
                    if (args.Contains("str???at??um".Replace("?", "")))
                    {
                        riskLevel += 3;
                        Logger.WriteLog($"\t[!] {processName}.exe: Present \"st?r???a?t?um\" in cmd args.".Replace("?", ""), Logger.warn);
                    }
                    if (args.Contains("na??nop??ool?".Replace("?", "")) || args.Contains("po?ol.".Replace("?", "")))
                    {
                        riskLevel += 3;
                        Logger.WriteLog($"\t[!] {processName}.exe: Present \"po?ol??\" in cmd args.".Replace("?", ""), Logger.warn);
                    }

                    if (args.Contains("-systemcheck"))
                    {
                        riskLevel += 4;
                        Logger.WriteLog("\t[!] Probably fake system task", Logger.warn);
                        try
                        {
                            if (p.MainModule.FileName.ToLower().Contains("appdata") && p.MainModule.FileName.ToLower().Contains("windows"))
                            {
                                riskLevel += 1;
                                suspFls_path.Add(p.MainModule.FileName);
                            }
                        }
                        catch (InvalidOperationException ex)
                        {
                            Logger.WriteLog($"\t[x] Error: {ex}", Logger.error);
                            continue;

                        }

                    }

                    if ((processName == obfStr8[3] && !args.Contains("\\??\\c:\\")))
                    {
                        Logger.WriteLog($"\t[!] Probably watchdog process. Process ID: {processId}", Logger.warn);
                        riskLevel += 3;
                    }
                    if (processName == obfStr8[4] && !args.Contains($"{obfStr8[4]}.exe -k"))
                    {
                        Logger.WriteLog($"\t[!!!] Process in?jec??tion. Process ID: {processId}".Replace("?", ""), Logger.caution);
                        riskLevel += 3;
                    }
                    if (processName == obfStr8[5])
                    {
                        int argsLen = args.Length;
                        bool isFakeDwm = false;


                        if ((WindowsVersion.ToLower().Contains("windows 7") && argsLen > 29) || (WindowsVersion.Contains("8 ") && argsLen > 10) || !WindowsVersion.ToLower().Contains("windows 7") && !WindowsVersion.Contains("8 ") && args.Length > 9)
                        {
                            isFakeDwm = true;
                        }

                        if (isFakeDwm)
                        {
                            Logger.WriteLog($"\t[!] Probably process inje?ction. Process ID: {processId}".Replace("?", ""), Logger.warn);
                            riskLevel += 3;
                        }
                    }
                    if (processName == obfStr8[17] && args.Contains("\\dia?ler.exe ".Replace("?", "")))
                    {
                        Logger.WriteLog($"\t[!!!] Ro???otk?it injection. Process ID: {processId}".Replace("?", ""), Logger.caution);
                        riskLevel += 3;
                    }

                    if (processName == "explorer" && !args.ToLower().Contains(@"c:\windows\explorer.exe"))
                    {
                        riskLevel++;
                    }

                }

                bool isSuspiciousPath = false;
                for (int i = 0; i < obfStr8.Length; i++)
                {

                    if (processName == obfStr8[i])
                    {
                        try
                        {
                            string fullPath = p.MainModule.FileName.ToLower();
                            if (!fullPath.Contains("c:\\windows\\system32")
                                && !fullPath.Contains("c:\\windows\\syswow64")
                                && !fullPath.Contains("c:\\windows\\winsxs\\amd64")
                                && !fullPath.Contains("c:\\windows\\microsoft.net\\framework64")
                                && !fullPath.Contains("c:\\windows\\microsoft.net\\framework"))
                            {

                                Logger.WriteLog($"\t[!] Suspicious path: {fullPath}", Logger.warn);
                                isSuspiciousPath = true;
                                riskLevel += 2;
                            }
                        }
                        catch (InvalidOperationException ex)
                        {
                            Logger.WriteLog($"\t[x] Error: {ex}", Logger.error);
                            continue;
                        }



                        if (fileSize >= constantFileSize[i] * 3 && !isValidProcess)
                        {
                            Logger.WriteLog($"\t[!] Suspicious file size: {utils.Sizer(fileSize)}", Logger.warn);
                            riskLevel += 1;
                        }

                    }

                }

                try
                {
                    if (processName == "un?sec?app".Replace("?", "") && !p.MainModule.FileName.ToLower().Contains(@":\w?in?do?ws\s?yst?em3?2\wb?em".Replace("?", "")))
                    {
                        Logger.WriteLog($"\t[!!] Watchdog process. Process ID: {processId}", Logger.cautionLow);
                        isSuspiciousPath = true;
                        riskLevel += 3;
                    }
                }
                catch (InvalidOperationException ex)
                {
                    Logger.WriteLog($"\t[x] Error: {ex}", Logger.error);
                    continue;
                }


                if (processName == "rundll" || processName == "system" || processName == "wi?ns?er?v".Replace("?", ""))
                {
                    Logger.WriteLog($"\t[!!] RAT process: {p.MainModule.FileName} Process ID: {processId}", Logger.caution);
                    isSuspiciousPath = true;
                    riskLevel += 3;
                }

                if (processName == "explorer")
                {
                    int ParentProcessId = utils.GetParentProcessId(processId);
                    if (ParentProcessId != 0)
                    {
                        try
                        {
                            Process ParentProcess = Process.GetProcessById(ParentProcessId);
                            if (ParentProcess.ProcessName.ToLower() == "explorer")
                            {
                                riskLevel += 3;
                            }
                        }
                        catch { }

                    }

                    if (utils.GetProcessOwner(p.Id).StartsWith("NT"))
                    {
                        riskLevel += 2;
                    }
                }


                if (riskLevel >= 3)
                {
                    Logger.WriteLog("\t[!!!] Process found! Risk level: " + riskLevel, Logger.caution);

                    utils.SuspendProcess(processId);

                    if (isSuspiciousPath)
                    {
                        if (!Program.ScanOnly)
                        {
                            try
                            {
                                string rnd = utils.GetRndString();
                                string NewFilePath = Path.Combine(Path.GetDirectoryName(p.MainModule.FileName), $"{Path.GetFileNameWithoutExtension(p.MainModule.FileName)}{rnd}.exe");
                                File.Move(p.MainModule.FileName, NewFilePath); //Rename malicious file
                                Logger.WriteLog($"\t[+] File renamed to {Path.GetFileNameWithoutExtension(p.MainModule.FileName)}{rnd}.exe", Logger.success);

                                utils.SaveRenamedFileData(new utils.RenamedFileInfo()
                                {
                                    _ProcessId = p.Id,
                                    _NewFilePath = NewFilePath
                                });

                                suspFls_path.Add(NewFilePath);
                            }
                            catch (Exception e)
                            {
                                Logger.WriteLog($"\t[x] Cannot rename file: {e.Message}", Logger.error);
                            }
                        }

                    }

                    mlwrPids.Add(processId);
                }
            }

            procs.Clear();
            if (renamedFilesInfo.Count > 0)
            {
                renamedFilesInfo.Clear();
            }
            utils.RemoveRenamedFilesData();
            obfStr8 = null;
        }
        public void StaticScan()
        {
            utils.InitPrivileges();

            Logger.WriteLog("\t\tScanning directories...", Logger.head, false);

            List<string> obfStr5 = new List<string>() {
Program.drive_letter + Bfs.Create("Iay1LvlqRnAHr/SFiJ23WV2H4vqwE4zvyMBXPqcmbsQ=",
            new byte[] {0xdd,0x0f,0xf1,0xe5,0x3c,0xee,0x9f,0x40,0xa4,0x7e,0x81,0x59,0x28,0x3d,0x16,0xd0,0x79,0x41,0xc7,0xc8,0x5d,0x84,0x09,0x64,0x6e,0x68,0xb9,0x21,0x97,0xd2,0x52,0x6e},
            new byte[] {0x87,0x7f,0x49,0xa4,0xf9,0x79,0x3d,0x85,0x8c,0xd7,0x7d,0x38,0x3c,0xe3,0xf4,0xd5}), //:\ProgramData\360safe
Program.drive_letter + Bfs.Create("yrYNgjE9T2nukyXDuoV3n3+Xpl9n4eqOF3gCdWqlEro=",
            new byte[] {0xbf,0x51,0xe9,0x33,0x4c,0x6b,0xac,0xfd,0x3e,0x0b,0x5c,0xf8,0x6c,0x58,0xee,0xbf,0x71,0x29,0x47,0xdd,0x00,0x7a,0x09,0x31,0x35,0xc6,0xbc,0xbc,0xd7,0x73,0xab,0x4b},
            new byte[] {0xc8,0x96,0x1f,0xb5,0xf1,0xa5,0x84,0x84,0xa7,0x3b,0x62,0xd5,0xdd,0xd5,0x8f,0x8b}), //:\ProgramData\AVAST Software
Program.drive_letter + Bfs.Create("pWjbtULebJn6PKmDL4chZISnmEaQPkFmbdfn6t10IjU=",
            new byte[] {0xc5,0xab,0xe1,0x55,0xa1,0x6c,0xaf,0x4a,0xa7,0xdc,0x88,0x06,0x20,0xee,0x99,0x54,0x74,0xe3,0x39,0xd4,0xc6,0x59,0x3a,0x64,0xf8,0x44,0x3d,0xa5,0x7d,0x69,0x39,0xe5},
            new byte[] {0xa0,0xa2,0x9e,0xfb,0xb5,0xe4,0xbf,0xd8,0x54,0x68,0xd5,0x86,0xa2,0x31,0x50,0x69}), //:\ProgramData\Avira
Program.drive_letter + Bfs.Create("l/dl3w4YNfZe6sMFTHAgq+fmZWPC2ock75heMwQtLvk=",
            new byte[] {0x68,0x44,0xb4,0x6c,0x39,0x8a,0x2a,0x13,0xaf,0x7d,0xac,0x67,0x95,0xf6,0xf2,0x13,0x4f,0x55,0xe2,0xe6,0x93,0xdd,0x58,0x2e,0x96,0x51,0x51,0xa4,0x2d,0xe4,0xbf,0xae},
            new byte[] {0xfb,0x5d,0x28,0xf7,0x93,0x40,0x09,0xf6,0x68,0x70,0x62,0xdc,0x72,0x6c,0x44,0x20}), //:\ProgramData\BookManager
Program.drive_letter + Bfs.Create("MxqkpZ3O+zt310yhAd3S5XrFgG4mW+spv76dAJZGxQk=",
            new byte[] {0xc5,0x1c,0x13,0x6b,0x79,0x83,0xf4,0xb0,0x83,0x24,0xae,0x94,0x43,0x88,0x7e,0xfd,0xd1,0x86,0xa6,0xb7,0x1e,0x77,0x9f,0x19,0xd9,0xbf,0x4a,0xca,0x6d,0x01,0x71,0xe7},
            new byte[] {0x40,0x83,0x64,0xe7,0x85,0xa1,0x93,0x98,0x53,0x95,0xff,0x44,0x29,0xb5,0xd4,0xad}), //:\ProgramData\Doctor Web
Program.drive_letter + Bfs.Create("ooDfJCOs0vdkmu7NWDyTpCKXSWwqJdRyXT2/HallrDg=",
            new byte[] {0x50,0x5e,0x70,0xe0,0x8f,0xb5,0x9a,0x08,0x94,0x0f,0xe0,0x56,0xea,0xaa,0xbe,0xff,0xe2,0x9b,0x43,0xa5,0x7d,0x87,0xda,0x1f,0xb5,0xa7,0xdb,0xaa,0x4a,0xd5,0xe7,0xf3},
            new byte[] {0x7d,0xe6,0x0c,0xdb,0xe6,0x70,0x20,0xf7,0x36,0x51,0x74,0xdb,0xdc,0x4c,0x7a,0x86}), //:\ProgramData\ESET
Program.drive_letter + Bfs.Create("h2Nktp8r6KJ37UpmGz4ybByFr0csQB54+1bTkcwJqlk=",
            new byte[] {0xfe,0xf0,0xf0,0xf2,0x88,0x59,0xb0,0x4f,0x1b,0x10,0x3b,0xd3,0x24,0x61,0xdc,0xd1,0x98,0x05,0xdb,0xa2,0xed,0x43,0x70,0x16,0xc3,0x01,0x6a,0x2a,0xe2,0x80,0x21,0xc9},
            new byte[] {0x89,0x94,0x1e,0x85,0xe2,0x34,0x90,0xc9,0xc0,0x3c,0xcf,0x5d,0x2d,0xb0,0xbd,0x59}), //:\ProgramData\Evernote
Program.drive_letter + Bfs.Create("5+uS1/WMuU+GeKf1QVfU5N41Z23ZzYNBN6PhWGGr160=",
            new byte[] {0x4d,0x1b,0x0d,0x6d,0xc4,0x72,0x42,0x00,0x26,0x03,0xd6,0x29,0xbd,0xfb,0xcf,0x46,0xe4,0xac,0x40,0xaf,0x9d,0xa8,0x75,0xef,0xba,0x80,0x3d,0xbe,0xb8,0x7b,0x30,0x67},
            new byte[] {0x93,0x5e,0x33,0xd5,0x8d,0xf0,0x0b,0x1e,0xbc,0xf2,0x01,0x76,0xfe,0x22,0x46,0x4c}), //:\ProgramData\FingerPrint
Program.drive_letter + Bfs.Create("eM9I4a0JLaYYLUtnk41EEwbS2MUWWZVuO/ovEsfiyPo=",
            new byte[] {0x9b,0xef,0x8d,0x60,0xa8,0x8c,0x9c,0x50,0x36,0xff,0x3f,0x2f,0x47,0xa8,0x6b,0x50,0x61,0xae,0x55,0x95,0x45,0x03,0xce,0xe0,0x7a,0xde,0x6e,0xaa,0xd2,0x13,0x26,0xe3},
            new byte[] {0x34,0x21,0xa9,0x7c,0x8e,0x0f,0x75,0x95,0x3d,0x6e,0xee,0x09,0x22,0x0f,0x40,0x10}), //:\ProgramData\Kaspersky Lab
Program.drive_letter + Bfs.Create("p28+3HyNWXYEztjkpCsLPfg8JUmFXEJaae7J06nulODBuoKIbgzcjAC2eJjJdm7q",
            new byte[] {0xe2,0x5f,0xf7,0xb0,0x0c,0x7c,0x7c,0xb0,0xf2,0x32,0xfa,0x8e,0x0d,0xc7,0x04,0xe8,0xa5,0x8e,0xea,0xc6,0xd4,0x2e,0x1f,0xc5,0x98,0x01,0x31,0xd2,0x64,0xde,0x76,0x5f},
            new byte[] {0xb6,0xaa,0xd3,0x54,0x23,0x7d,0xbe,0xf4,0xf5,0x45,0x8e,0x9a,0x60,0x6d,0x7d,0x3e}), //:\ProgramData\Kaspersky Lab Setup Files
Program.drive_letter + Bfs.Create("6O+whrV08qHHks6dG3g+C3+sfXGS8wnmSJ3xMLZCXZs=",
            new byte[] {0xa3,0xf1,0xfb,0x2f,0x16,0x0d,0x08,0x7e,0x66,0xb2,0xd0,0x42,0xb8,0x0f,0x26,0xb1,0xff,0x91,0x34,0x03,0xda,0xa5,0xe3,0x9e,0xbb,0xd6,0x23,0x61,0xa7,0x38,0x9d,0xed},
            new byte[] {0x13,0x1f,0x51,0x9d,0x8d,0xb7,0xf0,0x25,0x99,0x87,0xef,0x2f,0x0a,0xa4,0x8a,0xe5}), //:\ProgramData\MB3Install
Program.drive_letter + Bfs.Create("Y5Rinc0PvL5wvxufALZBoBMgZvB/bGq32vqpwpM94iE=",
            new byte[] {0x3c,0x95,0x37,0x80,0x11,0xbd,0xa2,0x5b,0x58,0xf0,0x86,0x2c,0x1f,0xec,0x64,0xce,0x3d,0x78,0xb4,0x80,0x5c,0x49,0x1e,0x31,0x4e,0x10,0x87,0x68,0xef,0x90,0xb9,0xf1},
            new byte[] {0xca,0x6c,0xd6,0xfd,0x0f,0x5f,0xa2,0xce,0x95,0x4b,0x10,0x8b,0x05,0x7c,0xb8,0xfd}), //:\ProgramData\Malwarebytes
Program.drive_letter + Bfs.Create("+Es5gAVOJQC6fBNP4Cm0SBk0I9WLrVECbJN7sywPGI0=",
            new byte[] {0xcf,0x48,0x31,0x59,0x88,0x9e,0x78,0xd6,0x54,0x0f,0x4e,0xa0,0x5e,0xd0,0xb4,0x7d,0xdd,0xca,0xae,0x3e,0x5a,0x4e,0xdf,0xe5,0x1f,0x90,0x75,0xba,0x6b,0xe4,0x74,0xba},
            new byte[] {0x50,0x61,0x37,0xef,0x10,0x3f,0x41,0x5a,0xd3,0x00,0x9b,0xe7,0x17,0xd6,0x48,0xc1}), //:\ProgramData\McAfee
Program.drive_letter + Bfs.Create("00QiZd6QnyUqmTssdk9ZY920H5h4SF0q8woY9mGf6QE=",
            new byte[] {0x94,0x78,0xa8,0xc8,0x7b,0x23,0x08,0x27,0xd3,0xed,0x73,0xc2,0x97,0xc7,0xe1,0x0b,0x46,0xf7,0xfd,0x0b,0x6a,0x92,0xa8,0xff,0xaf,0xd7,0x57,0x91,0x50,0x24,0xd3,0x4d},
            new byte[] {0x1b,0x69,0xf3,0x24,0x72,0x9a,0xc4,0xc2,0x9b,0x3a,0x76,0xca,0xf3,0xb1,0xcf,0x2c}), //:\ProgramData\Norton
Program.drive_letter + Bfs.Create("xetubP9Vk3CK/O1hdo+JBCYhbEz1HL7QjGwHnZ1OmZI=",
            new byte[] {0xc4,0xee,0xbe,0xab,0x4b,0xa1,0x38,0x2c,0xa3,0x0a,0xfe,0xdb,0x7b,0xd4,0x35,0x0f,0x46,0x94,0x81,0xb6,0x74,0xc9,0x50,0xf5,0x14,0x4c,0x42,0x7e,0x67,0x2a,0x70,0xf6},
            new byte[] {0x52,0x25,0x7b,0x60,0xfc,0x34,0xe9,0x18,0x9d,0x90,0xfa,0x57,0x49,0xbe,0x9e,0xff}), //:\ProgramData\grizzly
Program.drive_letter + Bfs.Create("OZloxZGC4HZom5cPpa7Vf2hSRALsuCz0dmOrBqOaDObyYK3AKDvh+AlGE7XFSVTq",
            new byte[] {0xc8,0x07,0x1c,0xcf,0x93,0x62,0x68,0x00,0x4b,0x34,0x1d,0x61,0x5b,0x4f,0x43,0xd0,0xd8,0x7c,0x6e,0x37,0x53,0x80,0xf5,0x27,0xcb,0xcc,0x1d,0x4c,0x0a,0x23,0xce,0xa6},
            new byte[] {0xc1,0xb4,0x35,0x9b,0xd2,0x15,0xa6,0xa5,0x9c,0x3d,0xca,0xbd,0xfc,0x41,0xef,0xcb}), //:\Program Files (x86)\Microsoft JDX
Program.drive_letter + Bfs.Create("br2Ubr2h70HdiCBiJ+UrhTJpJ4WxjykO8SjABH7sdAA=",
            new byte[] {0x23,0x47,0x21,0xf0,0xc9,0x63,0x91,0xf7,0x6d,0xee,0xbe,0x87,0xcf,0x4d,0x38,0x00,0x25,0x47,0xd2,0xcb,0x96,0x12,0xc5,0x8b,0xb4,0x9c,0xc4,0x84,0x15,0xcc,0xed,0x8a},
            new byte[] {0x18,0x92,0x3c,0x00,0x80,0x4a,0x8e,0xc3,0x80,0xe4,0xfb,0x88,0x87,0xe4,0x55,0x29}), //:\Program Files (x86)\360
Program.drive_letter + Bfs.Create("dT2uJ3F1XHM8IoQyXaha3SfR1agpKbA3RygBXzCeXGw=",
            new byte[] {0xc6,0x8d,0xaa,0x0b,0x2a,0xdc,0x9b,0x1e,0xbd,0x95,0x41,0x57,0x00,0x32,0x83,0xda,0x85,0x7f,0x59,0x4d,0x85,0x33,0x19,0x98,0x13,0x62,0x85,0x11,0x3d,0xe8,0x88,0xf9},
            new byte[] {0xe0,0x1f,0xf9,0x7d,0xce,0xf1,0xfd,0xa5,0xd7,0x96,0xce,0xbc,0x3d,0xc6,0x1e,0xe8}), //:\Program Files (x86)\SpyHunter
Program.drive_letter + Bfs.Create("fUsOjYZKb5jETRGnHXgQB2ht/zY4bN0eTNVMC8RMWnu4cCcQqq2iL6aRfbYzwMxF",
            new byte[] {0x3f,0xd3,0xc0,0xe7,0x80,0x53,0x81,0x68,0xf2,0x06,0x9e,0xf9,0x5f,0xbf,0x9a,0x9b,0xb0,0x9f,0xf1,0xc4,0x1a,0x51,0xa8,0x92,0xa7,0x1a,0xdd,0xa0,0xc0,0xd3,0x73,0x38},
            new byte[] {0x23,0x8a,0xd7,0x97,0x45,0xb6,0x32,0xa5,0xc9,0xae,0x7a,0xdb,0xf5,0x10,0xf5,0x1f}), //:\Program Files (x86)\AVAST Software
Program.drive_letter + Bfs.Create("MshXB5jTxx56VYZ+kh1NzYMgLbcIu60lj/tZnI7/B4A=",
            new byte[] {0x81,0xb7,0x39,0x78,0x90,0x66,0x18,0xb8,0x29,0xa7,0x32,0x60,0xf8,0xcb,0xea,0x39,0x60,0x07,0xd8,0x7f,0x34,0x2b,0xae,0x45,0x65,0x6d,0x8d,0x98,0x25,0x21,0x1c,0x89},
            new byte[] {0x97,0xda,0x7b,0x30,0x83,0x14,0x5d,0xd2,0x7e,0x8f,0x15,0x07,0x73,0x0a,0x2f,0x30}), //:\Program Files (x86)\AVG
Program.drive_letter + Bfs.Create("xKRO9xu4+bHjopfAv3olgprpKL8ae0vX6wf+/mJv6gxBIwJ4Es/3Vp8xTC+pVCTq",
            new byte[] {0x84,0xc3,0x34,0xb0,0xfe,0x9e,0xcf,0x5b,0x6e,0x17,0x2d,0x2f,0x4f,0x46,0x6d,0xa8,0xf3,0x48,0xc5,0xce,0x6f,0x7d,0x94,0x6f,0x9e,0x81,0x7e,0xec,0x98,0x32,0xa0,0x54},
            new byte[] {0x34,0xd2,0xad,0x8d,0x26,0x28,0x1d,0x4b,0xb5,0x9c,0x2b,0x72,0xdc,0xe1,0x21,0xe0}), //:\Program Files (x86)\Kaspersky Lab
Program.drive_letter + Bfs.Create("TTK79tDUMdvTr9fYjeyHMrOKp773mUCFepOrIRBzss8=",
            new byte[] {0xdf,0x76,0x41,0xcb,0x72,0xec,0x4a,0x01,0x2c,0x96,0xc2,0x53,0xca,0xb2,0x33,0xca,0x6b,0xf4,0xec,0x09,0xbb,0x57,0x02,0xe1,0x55,0x88,0x76,0x1e,0x14,0x25,0x74,0xeb},
            new byte[] {0xdc,0xef,0x4a,0xa6,0x9a,0x9f,0x03,0x27,0xd1,0x4c,0xcd,0xe9,0x81,0x97,0xe1,0xa7}), //:\Program Files (x86)\Cezurity
Program.drive_letter + Bfs.Create("Y/JCQ5osAedMzfngAxVs1fZWQ63Klw8wx0OVtH9KtbMQ7oYL7KQZ3uTVMR9OxP4H",
            new byte[] {0xe6,0xcf,0x38,0xcf,0x6d,0x43,0xdf,0x12,0x38,0x9b,0xb4,0xbd,0x39,0xaf,0x11,0x79,0x8e,0xa8,0x38,0x73,0xed,0x9c,0x53,0x1a,0x01,0x5a,0x7c,0xa0,0xcf,0x3e,0x08,0x58},
            new byte[] {0x6b,0x65,0xff,0x8d,0x99,0x80,0x1f,0x72,0x63,0xe7,0x00,0x1e,0x09,0x4e,0x1e,0x64}), //:\Program Files (x86)\GRIZZLY Antivirus
Program.drive_letter + Bfs.Create("WSCcoYmd2mzy9HALRVTJirp8ektf6nKQ1O0JSEsJztMjfoZ1mW6XpwBF7cweayOB",
            new byte[] {0x87,0xe7,0xb3,0x36,0xb5,0x9e,0x34,0x39,0xb8,0x99,0x41,0x50,0x43,0xbd,0x26,0xd2,0xf2,0xbc,0x32,0x44,0xf0,0xda,0xba,0x34,0xf6,0xea,0x92,0x67,0xf8,0x1e,0x7b,0x8e},
            new byte[] {0xe2,0x85,0x42,0xbd,0x92,0x62,0xe8,0xa2,0xa8,0xa3,0xe0,0xb4,0xd4,0x59,0x90,0x7c}), //:\Program Files (x86)\Panda Security
Program.drive_letter + Bfs.Create("elEfDGSpyxJGqNlKtqtaokhbQqkvKYG8f4gszQ3kUTcebBwpxqpCg/Ux4icQAaUx",
            new byte[] {0x04,0xec,0x79,0x24,0x36,0xee,0x58,0xf2,0xda,0x9e,0xf5,0x72,0x5a,0x38,0x1b,0xa2,0x31,0xee,0xcf,0xbb,0xfc,0xef,0xff,0x82,0x2f,0xf6,0x62,0x2a,0xff,0x3a,0xbe,0xd1},
            new byte[] {0xe9,0x6a,0xb3,0x9f,0xb0,0x58,0x8b,0xa7,0x12,0x25,0x9d,0xa1,0xe4,0xc0,0x89,0xbe}), //:\Program Files (x86)\IObit\Advanced SystemCare
Program.drive_letter + Bfs.Create("vDqWbl/O86XXC7z7Ll+kiBcO/5XQJ0MuQM6LS8PBEe/56BXi9rANJSpmtXgo2GFZ/6VRcWCXmKpavZwyr0+vJA==",
            new byte[] {0xb9,0x9e,0x18,0x83,0xd5,0xb1,0x83,0xa0,0xa5,0x68,0xdb,0xa6,0xc1,0xb1,0x2a,0xd3,0x22,0xd4,0xff,0x91,0xa0,0x0a,0xea,0x22,0x14,0x15,0x5e,0x5e,0xc3,0x4a,0x88,0x1f},
            new byte[] {0xed,0x81,0x7b,0xbc,0x38,0x43,0xd8,0x59,0x53,0x9e,0x4e,0xe4,0x3a,0xaf,0x72,0xf7}), //:\Program Files (x86)\IObit\IObit Malware Fighter
Program.drive_letter + Bfs.Create("dBr66HvObwo3YBVlGZKfJhng0d5pwhM4IU/N9Rj+Mdg=",
            new byte[] {0xa4,0x27,0x0e,0x9f,0x0e,0x9e,0x9b,0x14,0x32,0x7e,0x52,0xae,0x9e,0xc5,0xc3,0xe6,0xa7,0xfc,0x45,0x5b,0xe3,0x5e,0x8b,0x11,0x65,0xf0,0x1c,0x60,0xc5,0x18,0x9a,0xe3},
            new byte[] {0xf4,0x93,0xcf,0x1c,0xa9,0x99,0xb2,0xe8,0x9b,0x4b,0x17,0x55,0x7c,0x80,0x45,0x33}), //:\Program Files (x86)\IObit
Program.drive_letter + Bfs.Create("7q575tIzDHONRNRbEft1idfgTDTpVbqoNq9NyNwfl2g=",
            new byte[] {0x25,0x72,0x84,0x2d,0x5a,0x5d,0x70,0x51,0x49,0x59,0x11,0xd0,0xb1,0x26,0xa1,0x49,0x5e,0x79,0xd3,0x01,0x21,0x41,0x38,0xa1,0x53,0x77,0x5a,0x7c,0x63,0x64,0xe9,0x57},
            new byte[] {0xb0,0x80,0x2d,0x4d,0x03,0x8a,0x0b,0xf6,0x28,0x95,0x10,0x62,0xa7,0x43,0x3b,0xf9}), //:\Program Files (x86)\Moo0
Program.drive_letter + Bfs.Create("h3BpxMpBg6IgH6BVvU2tL8uDUALYm1LmNr+ywV4wvtFE5syAFni0RUiH1PojGVip",
            new byte[] {0x0c,0x82,0xff,0x7a,0xa7,0x94,0x89,0x24,0x03,0xd6,0xe2,0x31,0xef,0xc4,0xa5,0x9b,0x4f,0x55,0x95,0x29,0x6c,0xcd,0x22,0xe6,0x8e,0xf3,0x8a,0xa8,0x45,0x5a,0x43,0x4b},
            new byte[] {0x47,0xbe,0xfa,0xff,0xd5,0x01,0x8d,0xfe,0x9a,0x1a,0x5e,0xe7,0xbd,0x9e,0xab,0x19}), //:\Program Files (x86)\MSI\MSI Center
Program.drive_letter + Bfs.Create("Ca99oZ162GmmSkhPqR7CrqayX2hM44WS1bPXTOtTpz0=",
            new byte[] {0x36,0x51,0x8f,0x32,0xba,0x25,0xf6,0x9c,0x63,0xfd,0x31,0x5e,0x77,0xf2,0x33,0x91,0x2a,0xea,0xc8,0xd3,0x7b,0x12,0x3f,0xae,0xa4,0xe7,0x4f,0xcd,0x32,0xfe,0x34,0x83},
            new byte[] {0xf3,0x33,0x25,0xa8,0xec,0xca,0xf1,0x16,0x5d,0x39,0xe8,0x66,0x2f,0x5f,0x73,0x1b}), //:\Program Files (x86)\SpeedFan
Program.drive_letter + Bfs.Create("LuKaRGHiRivUp9mHDAEEFh0IVzxHcXZTbRGLA94Bog8=",
            new byte[] {0xc9,0xf9,0xe3,0x3e,0x07,0x55,0xfa,0x32,0xd1,0x04,0xa7,0x11,0x5f,0x8d,0xc7,0x4b,0xb5,0x34,0x47,0x13,0x8a,0xd1,0x92,0xb1,0x54,0xe4,0xa7,0xef,0xde,0x91,0xb3,0x6d},
            new byte[] {0xe8,0x23,0x52,0x87,0xdc,0xf2,0x21,0xd6,0x92,0x34,0xbb,0xda,0xed,0x7b,0x60,0xaf}), //:\Program Files (x86)\GPU Temp
Program.drive_letter + Bfs.Create("uPU2FYR/pSUxYcRTG7Dvy2zr+ZaLogMGEH2/+6qrM+0=",
            new byte[] {0xa7,0x68,0xf5,0x8c,0xca,0xc9,0xec,0x24,0xdd,0x16,0xb1,0x2f,0x84,0xcc,0x9c,0x8e,0xe5,0xc5,0xa2,0x2e,0xe5,0x8d,0x92,0xc3,0x2e,0x6c,0x5f,0xba,0xe2,0x51,0x60,0xbf},
            new byte[] {0x45,0x93,0x48,0xb8,0xb9,0xd8,0xfd,0x16,0xe6,0x51,0x02,0x19,0x79,0xfd,0xa0,0x50}), //:\Program Files\AVAST Software
Program.drive_letter + Bfs.Create("mTdVRw0/B4DmJSH+/F9th8TlQuDnGDvGm1WZiItDmgk=",
            new byte[] {0x2f,0x17,0x4e,0x70,0x89,0x97,0x99,0xed,0x76,0x69,0x13,0xc5,0xc5,0x04,0x2b,0x27,0x69,0x48,0xbb,0x76,0x7d,0xbc,0x19,0xef,0xe6,0x97,0xa9,0x5d,0xe0,0xbe,0x2f,0x10},
            new byte[] {0x22,0xc9,0xa9,0xfb,0xcd,0x32,0x7c,0xc8,0x2c,0xe4,0x7c,0x54,0xc7,0xd5,0x8f,0x6f}), //:\Program Files\CPUID\HWMonitor
Program.drive_letter + Bfs.Create("VIAoxncOoewmsbbnav+Hgc6N9kIjQ9SpeuIbrRGkERA=",
            new byte[] {0x93,0xa4,0x8d,0xce,0xaa,0xd1,0x62,0x2d,0xc9,0x95,0x6d,0x22,0xf2,0x6e,0x9d,0x3d,0x07,0x95,0x5e,0x93,0xe2,0x61,0xc1,0x2d,0x68,0x9b,0x1f,0x24,0x5c,0x87,0x45,0xad},
            new byte[] {0x29,0x80,0xbd,0x11,0xc5,0x4c,0xdf,0x3d,0xa4,0xa4,0x68,0xc1,0x81,0x33,0xe7,0xa9}), //:\Program Files\AVG
Program.drive_letter + Bfs.Create("SwB5eIPA4KeXBg9pTyVT1VAinGujInOrS9aaw3NVfWg+2whtEwlC09bp4S+MXtPk",
            new byte[] {0x12,0xe8,0xf1,0x29,0xf2,0x6c,0x15,0xb2,0xe2,0xbb,0xe9,0xbb,0xbc,0x22,0x8f,0xdb,0xe1,0xc9,0x9d,0x4b,0x45,0x35,0xf8,0x24,0x29,0xa3,0x3f,0x1c,0x32,0x95,0xea,0x2e},
            new byte[] {0x4b,0x42,0xcc,0x2f,0x9c,0x82,0x65,0xca,0x6d,0xf2,0x81,0x02,0x67,0x5e,0xa5,0xd7}), //:\Program Files\Bitdefender Agent
Program.drive_letter + Bfs.Create("nZUz2veHcRaXnZ2gaE9CaAFmI5m5/sdqmAfvJJf1WCo=",
            new byte[] {0x02,0x95,0xe8,0xc1,0x3b,0xaf,0x90,0x48,0xec,0x01,0xe6,0x89,0x92,0x91,0xa9,0x5b,0x3f,0x6e,0x93,0x4e,0x27,0x92,0xb9,0x2e,0x10,0x44,0x7d,0x03,0x64,0x22,0xa9,0x1e},
            new byte[] {0x08,0x59,0xd6,0x63,0xcc,0x39,0x1d,0x67,0x56,0xb5,0x70,0xc5,0x41,0xbb,0x2c,0x94}), //:\Program Files\ByteFence
Program.drive_letter + Bfs.Create("jeZitUMbnOIo8bWv1WjwFIDB//VtwfMJiQ0L/KvWxzA=",
            new byte[] {0x79,0x88,0xd2,0xac,0x39,0xf4,0xa0,0xce,0x65,0x3b,0xd1,0x6e,0x07,0xc9,0x2c,0x30,0x00,0xf5,0x28,0xa1,0xbb,0x98,0x6c,0xa6,0x08,0x05,0x4c,0xfc,0x8f,0x85,0x42,0x6d},
            new byte[] {0x11,0x68,0x07,0xb9,0x37,0x35,0x90,0xa8,0x88,0x56,0xb2,0x7a,0x77,0xdb,0x7d,0x30}), //:\Program Files\COMODO
Program.drive_letter + Bfs.Create("ZXLSn04SH5lMdTTaPB26tmmNPTjTU0L52qePSvD3rrY=",
            new byte[] {0x24,0x95,0x42,0x9f,0xa9,0x00,0x74,0x86,0x92,0x69,0x2f,0x53,0x85,0x32,0xa1,0x2e,0x1d,0x4f,0xd2,0x8c,0x13,0x60,0x17,0xbe,0x9a,0x17,0x4a,0xc6,0xcf,0xa0,0xeb,0xb0},
            new byte[] {0x48,0x5b,0x80,0x8c,0x22,0x94,0x21,0xe8,0x90,0xd1,0x26,0x98,0xbf,0xb3,0xef,0x2f}), //:\Program Files\Cezurity
Program.drive_letter + Bfs.Create("qwkMwpuWzNGbh0R5iWzrBjrNa0ZoI9zKI3sjn5aqRDo=",
            new byte[] {0x82,0x90,0x5f,0x24,0x82,0x51,0x5f,0xc2,0x3d,0x61,0x2e,0xe0,0xbf,0xa9,0x6b,0x35,0xc7,0x10,0x12,0x7e,0x5a,0x05,0xf3,0x4c,0xd8,0xb5,0xaf,0xcb,0x9a,0x9f,0x0c,0xe4},
            new byte[] {0xdc,0x2a,0x09,0x3f,0xc3,0x8d,0x9c,0x79,0xa9,0xf9,0xb0,0xa3,0x72,0xb2,0x6b,0x80}), //:\Program Files\Common Files\AV
Program.drive_letter + Bfs.Create("4iZEhHxUHboucaSvMnjxBNDKSkHvdjR7to+vyVzXAYWr6oI0azPd6GJNWFksmgwe",
            new byte[] {0x2e,0x5c,0x7b,0xa3,0x79,0xe4,0x27,0x69,0x79,0xfd,0x16,0xdf,0x26,0xc4,0x00,0x6b,0xeb,0x07,0xf1,0xe0,0x4a,0x38,0x3c,0xcd,0x6c,0xf3,0xb6,0xa6,0x3e,0x2f,0xaa,0xaf},
            new byte[] {0x31,0x91,0x5e,0x01,0x0f,0xf2,0x7d,0xe8,0xa2,0x5f,0x04,0x84,0x08,0x16,0xf0,0xeb}), //:\Program Files\Common Files\Doctor Web
Program.drive_letter + Bfs.Create("CZSrHZLt8OXeJlj2Uj/F56dQa9uGYqiQQ7QQf7vdCly8nc133m8t5dCgyL/y7KRn",
            new byte[] {0xf4,0x7d,0x16,0xe6,0x08,0x1d,0xc2,0x5f,0xc4,0xda,0x31,0x92,0xd8,0x1b,0xa5,0xbd,0x31,0xd8,0x66,0xd1,0x83,0xce,0xcb,0xcf,0xe2,0x34,0xde,0xcc,0x1d,0xb4,0x87,0x79},
            new byte[] {0xfd,0xf1,0x1d,0x9c,0xf7,0x39,0xd1,0x90,0x07,0xdc,0x35,0x3b,0xcc,0xad,0xf7,0x82}), //:\Program Files\Common Files\McAfee
Program.drive_letter + Bfs.Create("993ug2xC/H35eGc2yBLmIQv/Ez1ZPnDOV5wpacByj7w=",
            new byte[] {0x0d,0x70,0x45,0x91,0xa2,0xa8,0x7f,0xfa,0x90,0xdf,0x3b,0x4b,0xb4,0x0d,0x1a,0xe2,0xe3,0xc4,0x86,0x43,0x7c,0x02,0x50,0x13,0xe7,0x1d,0xb9,0x0a,0x6c,0x71,0xf0,0x9c},
            new byte[] {0x53,0x47,0x2e,0x40,0xf2,0xc8,0xd5,0xf0,0xff,0x39,0x06,0xec,0xd6,0xe3,0x87,0x74}), //:\Program Files\DrWeb
Program.drive_letter + Bfs.Create("OyxjzQTX1ER7Akl4Z3wBxGE4DLfa/Zuj+nYRtbVD00o=",
            new byte[] {0xae,0xb5,0x08,0xa1,0xf4,0xfd,0x0e,0x13,0xca,0x0d,0x69,0xc5,0xbf,0x3b,0x1f,0xad,0xcb,0x6a,0xac,0x88,0x48,0xf4,0xc0,0x09,0x19,0x17,0xe2,0xe2,0xa9,0xaa,0x72,0xda},
            new byte[] {0x1d,0x43,0x57,0x8a,0x91,0x25,0x9c,0x23,0x94,0x4b,0xba,0xca,0xb6,0x5e,0x2e,0x5b}), //:\Program Files\ESET
Program.drive_letter + Bfs.Create("T2z/aYB3x2QRATFbp5TX+EV28T92iGxZk2I0A/62oJTZf+utZS35NRKQR4PnTs4G",
            new byte[] {0xbd,0xd1,0xb1,0xbc,0x33,0x0a,0xc4,0xe1,0x58,0xb0,0x7a,0x27,0xc1,0xe8,0xfe,0xc4,0xf0,0x69,0x61,0x73,0x2d,0xe4,0x82,0x1e,0x46,0xf8,0xfb,0xe0,0xf7,0x2b,0x45,0x1f},
            new byte[] {0xb8,0x60,0x83,0x5e,0xd4,0xce,0x79,0x16,0x15,0xc0,0xe0,0x8b,0x45,0x10,0x97,0xf5}), //:\Program Files\Enigma Software Group
Program.drive_letter + Bfs.Create("rIvCbzBNYuHyDTqnZoTh82jfn5ddDfItCjOwXqxCQ6k=",
            new byte[] {0xc9,0xbb,0x16,0xec,0x4e,0xcd,0x61,0x5a,0xf9,0xad,0x32,0x5b,0x38,0xea,0x7f,0x9a,0xe5,0x45,0x2b,0xd7,0x99,0x17,0x57,0xed,0xa8,0x34,0x7a,0xfa,0xa0,0x75,0x94,0xe4},
            new byte[] {0x31,0x00,0x86,0xe2,0xd8,0xd0,0x72,0x4a,0xeb,0xca,0xde,0xd8,0x39,0x4d,0x0f,0x55}), //:\Program Files\EnigmaSoft
Program.drive_letter + Bfs.Create("u/EFTB5fDTPbyTy/RKTLEPFrJu7+A+lEOYN0DqU4AIQ=",
            new byte[] {0xa7,0x08,0xe7,0x47,0x7b,0x14,0x60,0x06,0x95,0x39,0x97,0x8b,0x78,0xf5,0x39,0xc1,0x8b,0xcd,0xef,0x3f,0xa4,0x3d,0x84,0x17,0xf8,0x65,0x3e,0x35,0x71,0x3e,0xb4,0xa1},
            new byte[] {0x14,0xcf,0xc2,0xac,0x55,0xa4,0x99,0x7e,0xe2,0x59,0x37,0xc1,0x36,0xe1,0x73,0x57}), //:\Program Files\Kaspersky Lab
Program.drive_letter + Bfs.Create("kV6TUjACDmJJf7ZW5gILcqMn53RzFIe3ItyErEOj+AxWDDdEhVF5/bbWighjupxB",
            new byte[] {0x95,0xb5,0xfa,0xe6,0x0f,0x3f,0x4b,0x67,0xd3,0x92,0x62,0xdb,0x27,0x9b,0xe3,0x7d,0xc8,0x46,0x79,0x52,0xcc,0x62,0xee,0x81,0xb0,0xb8,0x5f,0x58,0x5e,0xfb,0x18,0x1c},
            new byte[] {0x8d,0xf8,0xc3,0x93,0x4e,0x0f,0x75,0x9b,0x44,0x39,0xad,0x27,0x7d,0xa6,0x7c,0x3d}), //:\Program Files\Loaris Trojan Remover
Program.drive_letter + Bfs.Create("u0M14lQEj8JQoWGVpUzdBWNkGjf2iDLoXfGyUSw6B70=",
            new byte[] {0x6a,0x34,0x25,0xca,0x04,0x7a,0x11,0x5b,0x53,0x60,0x19,0xe2,0xec,0xbd,0xfa,0xb8,0xbe,0xdb,0x6d,0xe3,0x87,0x60,0xe2,0x58,0x8e,0x2a,0xfb,0x6e,0x5e,0xe6,0xc0,0xcd},
            new byte[] {0x01,0x6d,0x1e,0x89,0x3e,0x6f,0x97,0x0a,0x89,0x0d,0x09,0xc8,0x3f,0x92,0x77,0x8a}), //:\Program Files\Malwarebytes
Program.drive_letter + Bfs.Create("ZeFYZEv97MF/dF0QeRp3OI3sSPCKRdBbUNaunCnZpp8=",
            new byte[] {0x51,0x83,0xfe,0x27,0x51,0x8e,0xcc,0x1f,0x82,0xc7,0x13,0x95,0xed,0xe6,0x80,0xff,0xe6,0x49,0x00,0x13,0x9d,0x53,0x38,0x12,0x32,0xb6,0x0d,0x81,0xc8,0x99,0x58,0xd6},
            new byte[] {0x7d,0x16,0x0c,0x09,0x1a,0x1d,0x61,0x63,0x65,0x72,0xa2,0x55,0x79,0x12,0xda,0x31}), //:\Program Files\Process Lasso
Program.drive_letter + Bfs.Create("+ZcGd+XJEvyS8oTdiG93cGS24LNMo2wY8PJfUNtRZuo=",
            new byte[] {0xea,0x46,0x5c,0xaa,0xc7,0x19,0x93,0x2d,0x50,0x37,0x0a,0xeb,0xf3,0xeb,0x4f,0x64,0x97,0x8b,0xeb,0xca,0x3a,0x00,0x96,0x5b,0xf0,0x85,0x7a,0xf7,0x9f,0x29,0x98,0xa8},
            new byte[] {0x2a,0xc6,0x5e,0x2c,0x8c,0xa7,0xf4,0x6a,0x0c,0x29,0xfe,0x3d,0xc3,0x9a,0xf5,0xfd}), //:\Program Files\Rainmeter
Program.drive_letter + Bfs.Create("nuQCcAwrOXARSk4eTBIVTkCasiMPWE84bR5Eb580Cm8=",
            new byte[] {0x6a,0x40,0x8a,0x0b,0xb0,0x4b,0x78,0x4c,0x14,0x13,0x64,0x76,0xef,0x14,0xbb,0x42,0x4d,0x43,0x18,0x02,0x51,0x77,0xd0,0x8f,0x0a,0x5d,0xaa,0x6a,0xc4,0xde,0x25,0x0a},
            new byte[] {0x55,0x4d,0xfe,0xc4,0x81,0x48,0xa7,0xc1,0x8f,0x9c,0x6b,0x33,0xfa,0x6f,0xba,0x2d}), //:\Program Files\Ravantivirus
Program.drive_letter + Bfs.Create("6zp775uZ3hTsHOyxYrJrvy9nCSBzfFzBK1VspCxDxRE=",
            new byte[] {0xf6,0x74,0xef,0x9c,0xd8,0xf8,0x76,0x24,0xc7,0x48,0x17,0x51,0xc4,0x90,0x71,0x3a,0xca,0x08,0xe2,0x7f,0xdc,0xbd,0xfa,0x60,0x95,0x68,0x2d,0x01,0x4e,0x16,0xa0,0xa5},
            new byte[] {0x7d,0xb1,0x6f,0x56,0x6b,0xb3,0x93,0x00,0xce,0x83,0x7a,0xe4,0x55,0xe6,0xf2,0x77}), //:\Program Files\SpyHunter
Program.drive_letter + Bfs.Create("35lrUl2WuFZF2Yd5w/NBGrHeaFccFgMxUQVwwU8DsD2WAVYlBE1W5V+g+AmnR3yP",
            new byte[] {0x84,0x1a,0xb2,0x41,0xd8,0xd3,0xd4,0x4d,0x9b,0xa9,0x45,0xdd,0x51,0x18,0xac,0xfe,0x29,0x50,0xea,0x99,0x53,0xa6,0x2e,0x87,0x63,0xf1,0x44,0x16,0x39,0x33,0x1a,0x55},
            new byte[] {0x5d,0xc4,0x7b,0x39,0xc4,0x26,0xc5,0xb4,0x12,0x7e,0x35,0xdf,0xaa,0x11,0x49,0x63}), //:\Program Files\Process Hacker 2
Program.drive_letter + Bfs.Create("Ts0x/pJ7QX+xR+NNlBNGAZGZRLy+0ygcnAUWTPpmX+0=",
            new byte[] {0xbe,0x8e,0x8e,0x2e,0x2a,0x3e,0xe9,0xea,0x7a,0xc0,0xc2,0x7e,0xb0,0x8a,0x72,0x4f,0xe1,0x20,0x2c,0xc8,0xfc,0xa3,0x3a,0x08,0x7a,0xfb,0xd1,0xfa,0x9b,0xc6,0xeb,0xc9},
            new byte[] {0xc3,0x6d,0xb4,0xc4,0xa6,0xc9,0xd1,0xe5,0x92,0x7b,0x89,0x88,0x61,0x14,0x37,0x22}), //:\Program Files\RogueKiller
Program.drive_letter + Bfs.Create("CPEWKW2X8O4IuyntKKQTAbfV0elF9Zudu3hwKTGn9H+lnkGZOGa4JWb7qD+sVfUX",
            new byte[] {0xee,0x3f,0x3d,0x91,0x25,0xbb,0xb1,0x0c,0x02,0xe0,0x56,0xf3,0x97,0xe0,0x4e,0xe4,0xe5,0x0b,0x5d,0xcb,0x00,0xd1,0x91,0x0c,0x20,0x68,0x12,0x70,0xc8,0x44,0x7b,0xf5},
            new byte[] {0x83,0xf4,0x7f,0xab,0x3e,0x2e,0x3d,0xbe,0xa9,0xab,0x5d,0x7d,0x9d,0xe5,0x4c,0x75}), //:\Program Files\SUPERAntiSpyware
Program.drive_letter + Bfs.Create("O8Q4grMin4iP7kMy/af0YWZj2XwuPLyaanh0ztm1BD8=",
            new byte[] {0x07,0x5c,0x91,0xe7,0xb6,0x93,0xc9,0xdf,0x6b,0x1b,0x30,0x97,0x6b,0x83,0x6e,0x16,0xdb,0xa8,0x92,0xf9,0x50,0xc2,0x7a,0xbb,0x98,0xa4,0xb7,0x3f,0x0f,0x86,0x2a,0x22},
            new byte[] {0x72,0x11,0xe9,0x71,0xaf,0xb6,0x27,0xac,0xac,0xab,0x6f,0x9b,0xb5,0xb8,0x94,0x3e}), //:\Program Files\HitmanPro
Program.drive_letter + Bfs.Create("l9cvuykZSt6bqIRlswL3v5CSwRnHoZ2vHwrr9Y9pD8c=",
            new byte[] {0x05,0x65,0xa6,0xb5,0x78,0x60,0xb4,0xe3,0xd0,0x44,0x74,0xb4,0x3a,0xcb,0x89,0x99,0xa2,0xb2,0x49,0x4c,0xd0,0x18,0x2c,0xec,0x58,0xaa,0xc6,0xc9,0x2b,0xdd,0xd0,0x37},
            new byte[] {0x27,0xfd,0x48,0xc7,0xd9,0xbe,0x70,0x85,0x5c,0xb0,0xf9,0xd9,0x6d,0x23,0x8d,0x76}), //:\Program Files\RDP Wrapper
Program.drive_letter + Bfs.Create("L5BJZeHS4u63eVKCjavjOip/OM09XSIniupr7cxXt/w=",
            new byte[] {0x3a,0x8b,0x3f,0x22,0x48,0x51,0x32,0x09,0x8a,0x1b,0x8c,0x9c,0xb1,0x99,0x2d,0x5a,0xfc,0xc4,0xe1,0x6d,0xf2,0xaa,0xab,0x3a,0xf6,0x3b,0x74,0x33,0xb2,0xc2,0xdd,0x1d},
            new byte[] {0x0f,0xa7,0x6e,0x06,0xbf,0x25,0xd7,0x96,0xc2,0x62,0x2f,0x08,0x6d,0x9e,0x6b,0xea}), //:\Program Files\QuickCPU
Program.drive_letter + Bfs.Create("DQU3GMbjaINCfGU0LG4zZsu8kqW2FRKEWSmGU6s+u/Y=",
            new byte[] {0x3b,0x45,0xd8,0x0f,0xb4,0x17,0xcd,0xc1,0x4e,0x3b,0xef,0xcd,0x1a,0xd3,0xc8,0x1c,0x52,0x6c,0xe6,0xb9,0x0e,0xfe,0x5e,0x52,0x75,0x85,0xbe,0x0c,0x62,0xa4,0x6c,0x01},
            new byte[] {0xcf,0xd9,0x9e,0x38,0x37,0x2d,0x98,0x80,0x11,0x27,0xc1,0x38,0x38,0xec,0x4c,0x0f}), //:\Program Files\NETGATE
Program.drive_letter + Bfs.Create("VWh93CxRmnbFVRkVTc8P+Kt5qWVFLQ5+EvtGAA05suM=",
            new byte[] {0x70,0x7a,0x4d,0xe9,0x16,0x25,0xe3,0x2e,0x82,0xc5,0x42,0x90,0xf7,0x20,0x9f,0xbb,0x6c,0x60,0x5a,0x7b,0xb0,0x21,0x55,0x60,0x66,0xe4,0x3b,0xca,0x35,0x0a,0x22,0x3a},
            new byte[] {0x8c,0x09,0xfe,0xd9,0x83,0x43,0xda,0x8b,0xac,0xe9,0x42,0x60,0x10,0x52,0x79,0x8d}), //:\Program Files\Google\Chrome
Program.drive_letter + Bfs.Create("J5Z0Ldenp70dLDHkXpdsjg==",
            new byte[] {0xa4,0x2e,0x6a,0xa7,0x42,0xdc,0xc6,0x15,0xa4,0xe9,0x03,0x83,0xfe,0x3f,0x5c,0x3a,0x2f,0x2d,0x17,0xa2,0xb8,0x78,0x29,0x71,0xf4,0xa1,0x47,0x52,0xd6,0xb5,0xde,0xe7},
            new byte[] {0xe6,0xed,0x4f,0x2a,0xf5,0xca,0x48,0x28,0x07,0xb5,0xf3,0x63,0x64,0x24,0x84,0xa9}), //:\AdwCleaner
Program.drive_letter + Bfs.Create("I2pnoW/MKAckuMSQgHUe2w==",
            new byte[] {0x51,0x95,0xb1,0xb4,0x1e,0xc9,0x00,0x5d,0x6c,0x6e,0x5b,0x1c,0xea,0x84,0x6a,0xf3,0xc5,0xb3,0x7b,0x41,0xe7,0xac,0x35,0xd6,0x22,0xfc,0x35,0x35,0x43,0x9c,0xb1,0x22},
            new byte[] {0xfd,0x43,0xec,0xfc,0xdc,0xb6,0xb3,0xd3,0x49,0x1d,0xf5,0x59,0x23,0xa4,0x4d,0xbc}), //:\KVRT_Data
Program.drive_letter + Bfs.Create("Yx2PDyob3CDhJ+hdq5fzaA==",
            new byte[] {0x39,0x06,0xf1,0xa5,0x7f,0xf5,0x58,0x20,0x58,0x35,0x92,0x76,0xe4,0xb8,0xdf,0x10,0x50,0x1b,0x90,0x84,0xb7,0xf9,0x97,0xf9,0xcf,0x4f,0xab,0x2f,0xf4,0xa7,0xb2,0xac},
            new byte[] {0x92,0x3e,0xb9,0xb4,0xe6,0xa4,0x36,0x82,0xd6,0xab,0xed,0x4c,0x37,0xfb,0x9b,0x69}), //:\KVRT2020_Data
Program.drive_letter + Bfs.Create("eo51OiiY9nLkzeMGXraefA==",
            new byte[] {0x92,0xea,0x05,0x81,0xa3,0xdd,0x2d,0x1b,0x8f,0xe6,0x0a,0x45,0x71,0x78,0x99,0xd7,0xa7,0x25,0x46,0x2a,0x92,0x83,0x24,0xfc,0xcc,0x67,0xc1,0xfe,0xcb,0xee,0x86,0x03},
            new byte[] {0xdf,0xde,0x10,0x10,0xfe,0xca,0x03,0x78,0xda,0x00,0x1c,0x42,0x6c,0x8a,0x27,0x07}), //:\FRST
};


            if (!Program.WinPEMode)
            {
                obfStr5.Add(Path.Combine(Environment.GetEnvironmentVariable("Ap~pda~ta".Replace("~", "")), "sys~fi~les".Replace("~", "")));
                obfStr5.Add(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop).ToLower(), "aut?olo?gger".Replace("?", "")));
                obfStr5.Add(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop).ToLower(), "av?_?b?l?ock_?rem?over".Replace("?", "")));
                obfStr5.Add(Path.Combine(utils.GetDownloadsPath(), "auto?log?ger".Replace("?", "")));
                obfStr5.Add(Path.Combine(utils.GetDownloadsPath(), "a?v_b?lo?ck?_re?mov?er".Replace("?", "")));
            }

            ScanDirectories(obfStr5, founded_suspLckPths);

            if (!Program.ScanOnly)
            {
                if (founded_suspLckPths.Count == 0)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }


            List<string> obfStr1 = new List<string>() {
Program.drive_letter + Bfs.Create("a19yD3HyQVBaeHkK9Lxpl0DkW1qjNXgj6MclBwqyX5c=",
            new byte[] {0xd5,0x06,0x41,0x07,0xb3,0xca,0x58,0x1b,0x20,0x2d,0xa3,0x18,0xad,0x51,0x1a,0x3d,0x5f,0xc9,0xba,0x7d,0x00,0x21,0x56,0x4c,0x6d,0x6d,0x41,0xd6,0xd0,0xb5,0x39,0x05},
            new byte[] {0x8f,0x83,0x47,0xec,0xc6,0x68,0xec,0xa5,0x38,0xaf,0x6f,0x6e,0x1b,0x69,0xa5,0x97}), //:\ProgramData\Install
Program.drive_letter + Bfs.Create("ixsew/MAt9MFBm+IHhXeEX9lZZpd1VWI/wAp03IfYkU=",
            new byte[] {0x4a,0x34,0xdb,0xbe,0x82,0x66,0xdf,0xb0,0x55,0x41,0x6b,0x3d,0x21,0x9c,0x02,0xf1,0x3e,0x61,0x0a,0xa8,0xe1,0xf7,0x2e,0x1c,0xca,0xe5,0x5e,0x81,0x40,0xe1,0x6d,0x39},
            new byte[] {0x51,0x9e,0x47,0xed,0xd8,0x7b,0xb1,0xd8,0x73,0x3e,0x41,0x0f,0xe4,0x56,0xd8,0xfd}), //:\ProgramData\Microsoft\Check
Program.drive_letter + Bfs.Create("o8bDOH/TDhWd/KoOpTY2G8P0zmeH+OUqDSvRdzutmQg=",
            new byte[] {0x61,0x51,0x8c,0x6c,0x64,0x18,0xd7,0x8d,0xdc,0xb2,0x52,0x34,0xb1,0x6c,0xc7,0xbb,0x1a,0xca,0x96,0x89,0xc0,0xf6,0x91,0xad,0xbd,0xf3,0x8c,0x62,0xb8,0x8d,0x4b,0x6c},
            new byte[] {0x34,0x1e,0xeb,0x74,0x84,0x78,0x59,0xec,0x58,0x19,0x75,0xe5,0x17,0x9e,0xd2,0xf9}), //:\ProgramData\Microsoft\Intel
Program.drive_letter + Bfs.Create("CdJghxCdxYyzo4oeKMyESd1Bas+lQSmJnpzHQ5lY78djGkt1QLKQyHB04bqk+Szkv7XUUaEpHcHov+eaHOYt/Q==",
            new byte[] {0x28,0x79,0xa6,0xf0,0x1e,0x69,0xe9,0x3f,0x52,0xb0,0x35,0x3b,0x0a,0x1d,0xe6,0x1d,0x5d,0x98,0x2b,0x86,0x23,0x9a,0x8d,0xb7,0xc9,0xdf,0x66,0xdc,0xbe,0xa8,0x80,0x5e},
            new byte[] {0x07,0x20,0x00,0x1c,0x46,0x85,0x6b,0x74,0x8b,0xf5,0x44,0xcf,0x43,0xe3,0xab,0x86}), //:\ProgramData\Microsoft\clr_optimization_v4.0.30318_64
Program.drive_letter + Bfs.Create("RUSvT+3SfhHRMC60ATQAsE+rkCou16TACNt6cV17+2k=",
            new byte[] {0xcf,0xc4,0x10,0x26,0x9e,0x9f,0x8f,0xcc,0x93,0x95,0xe2,0x59,0x86,0x7e,0xea,0xe5,0xba,0x89,0x8a,0x18,0x21,0x8b,0xc5,0xaa,0x08,0xe7,0x5e,0xe0,0x83,0x7c,0xcf,0x44},
            new byte[] {0xc0,0xae,0x08,0x11,0xb2,0x93,0x79,0x9a,0xc7,0x7e,0xf1,0xd0,0x86,0x09,0xcd,0xbd}), //:\ProgramData\Microsoft\temp
Program.drive_letter + Bfs.Create("EApU9LV6OtofTr1u9atimc5EYu3xlvRR4f4CLBPG84A=",
            new byte[] {0xf9,0xf4,0xc7,0xa7,0x55,0x9d,0x2c,0x7b,0x0e,0x5f,0x71,0x17,0x9f,0xf3,0xbf,0x98,0xef,0xab,0x2b,0xa5,0x81,0x94,0x13,0x21,0x09,0x7e,0x2e,0xa7,0x47,0x8c,0xc7,0x0f},
            new byte[] {0xdd,0x4f,0x57,0xb8,0x6c,0xd2,0x28,0x0d,0xea,0xf5,0x53,0x28,0x7c,0x2b,0x24,0xd8}), //:\ProgramData\PuzzleMedia
Program.drive_letter + Bfs.Create("7nii1eD34Dp5ViUUJmQ0hD6S9bBuAdd4qDpgWUDATu0=",
            new byte[] {0xae,0xe5,0x3b,0x46,0x5f,0x85,0xac,0x01,0x38,0x3b,0x8e,0xea,0x9d,0xca,0x6b,0x46,0xd2,0x4a,0x35,0xc7,0x4a,0x68,0x4a,0x72,0x39,0x5d,0xdd,0xc2,0x98,0xe3,0x9d,0x9e},
            new byte[] {0x0d,0xbd,0x59,0x5e,0x5a,0x4d,0x5b,0x48,0x43,0xb8,0xd0,0x9e,0x61,0x2a,0x38,0xf9}), //:\ProgramData\RealtekHD
Program.drive_letter + Bfs.Create("qqndL0sj7XAUdD1M7Cgos60s8R8Z8JUm0xEt+SsEsjQ=",
            new byte[] {0x68,0x58,0x6f,0xc3,0xfa,0xbf,0xd1,0x4a,0x17,0x30,0x67,0x73,0x69,0x13,0x09,0xc8,0x37,0x5d,0x07,0xc1,0x30,0xf8,0xda,0xdd,0x43,0xb8,0x55,0x75,0xf7,0x78,0x12,0x48},
            new byte[] {0x5b,0xb2,0x5c,0x1b,0xcf,0x71,0xc8,0x06,0xa0,0xa7,0x0e,0x3b,0x9b,0xa6,0xb8,0x1e}), //:\ProgramData\ReaItekHD
Program.drive_letter + Bfs.Create("X+wPPf5Wuwk7ZAMyqJw0Jpd+AYEf0VP8rFSbCbcn5RY=",
            new byte[] {0xa1,0x42,0x66,0x9c,0x09,0x2e,0xba,0x7b,0x96,0x33,0x63,0x9b,0x2c,0xdb,0x01,0x06,0x05,0xef,0x6e,0x36,0xa1,0x00,0x1e,0xaf,0x12,0x78,0x61,0xca,0x68,0x05,0x21,0x2d},
            new byte[] {0x35,0x78,0xf2,0xcc,0x09,0xd6,0xde,0x91,0xe2,0x9b,0x3b,0xcb,0x5f,0x63,0x42,0x07}), //:\ProgramData\RobotDemo
Program.drive_letter + Bfs.Create("gDt/CVN/hUHPrzYtvdPPEPoGFy9i1qxvTuvxLaEHPfc=",
            new byte[] {0xea,0xf1,0x3f,0x75,0xb0,0x01,0x62,0xc9,0xb4,0x30,0x1f,0x21,0xa9,0xcd,0xe1,0xd3,0x0a,0x7a,0xc8,0xf5,0x90,0x05,0xfb,0x36,0x31,0x16,0x36,0xa7,0x19,0x49,0x42,0x2f},
            new byte[] {0x95,0x8f,0xab,0x54,0xfe,0x22,0x83,0xb9,0xe0,0xd0,0xa5,0x1f,0x7f,0x1a,0x24,0x1b}), //:\ProgramData\RunDLL
Program.drive_letter + Bfs.Create("U0ls/sUmOEo4AZ5pXTYEQEEJ4vqMBig2lbFbI0wTBGs=",
            new byte[] {0x8e,0xe8,0x11,0xfe,0xd1,0x12,0xac,0x7d,0x7e,0x85,0xbc,0xf5,0x52,0xb7,0x7d,0xfd,0x47,0x45,0x18,0x0f,0xdd,0x35,0x26,0xc2,0x40,0x07,0xda,0xb9,0xcf,0x69,0x1b,0x21},
            new byte[] {0x9b,0x87,0x99,0x8b,0x76,0x99,0x88,0xce,0xa8,0x63,0xe5,0xbe,0x7f,0xc6,0xd3,0xf9}), //:\ProgramData\Setup
Program.drive_letter + Bfs.Create("cuB5MDPX+Qvh7kd9USCwsI53qFQt+0LcnG3M2kEdEt4=",
            new byte[] {0x22,0xc8,0x6b,0x5c,0x2e,0x40,0x1e,0x67,0x54,0xd5,0x3d,0x13,0x92,0x5e,0xe6,0x9c,0xe9,0x91,0x7b,0xb8,0xbb,0xf8,0x3d,0x53,0x44,0xb0,0x1e,0x78,0xf5,0x4f,0x18,0xb4},
            new byte[] {0xe0,0x59,0xfd,0x40,0x67,0xae,0xfb,0x3b,0x45,0xf3,0x75,0x4c,0x75,0x4f,0xe0,0x56}), //:\ProgramData\System32
Program.drive_letter + Bfs.Create("JuDcbUwKhDGvlahyrIztdTvugJgBu8aO9SzlvRGHAOM=",
            new byte[] {0x22,0xa2,0xdc,0xf3,0x43,0xf2,0x26,0x22,0x85,0xb5,0x23,0xb8,0x64,0x61,0x7b,0xf9,0x7a,0x5d,0xcb,0x93,0x85,0x66,0x76,0xb4,0xef,0x05,0x03,0x43,0x1b,0xd3,0xab,0x49},
            new byte[] {0xf1,0x8f,0x57,0x05,0xe9,0x09,0x43,0xc8,0x07,0xaf,0x95,0xcd,0xc9,0x12,0xe2,0x89}), //:\ProgramData\WavePad
Program.drive_letter + Bfs.Create("/X4CJ6MQ/c58n46Zp6Ui3X3Z6aZR0qt1iHOeiFc1gpcFg+WXpCTvlVY35O3ZGZ3o",
            new byte[] {0xda,0x6d,0xe3,0x06,0xd2,0x12,0x57,0x1b,0xa6,0x61,0xd2,0xd4,0x22,0xb7,0x18,0xde,0xc3,0xac,0x31,0x97,0x35,0x7c,0x70,0x9d,0xbb,0xd6,0x16,0x3f,0xd7,0x0f,0x02,0xb5},
            new byte[] {0x34,0xb8,0xde,0x1e,0xbe,0xc1,0x77,0xda,0x2b,0x00,0xd0,0x8d,0x01,0x88,0xec,0x16}), //:\ProgramData\Windows Tasks Service
Program.drive_letter + Bfs.Create("ycmTaKc1IT49zxn8pIO+ZUeTVy3jXb0ZMBrgg283um0=",
            new byte[] {0x3e,0x25,0x68,0x8e,0xb2,0xf3,0x16,0x3d,0x28,0xff,0x5d,0xd0,0x16,0xfa,0x73,0xd2,0x65,0x26,0x39,0x94,0x4f,0x2b,0xa9,0x0a,0x88,0xbb,0x33,0x1c,0x20,0xef,0xdf,0xaf},
            new byte[] {0x77,0xe8,0xeb,0x69,0x4e,0x3c,0x2d,0xf3,0x4f,0x08,0xc3,0x66,0xd9,0x96,0xea,0x56}), //:\ProgramData\WindowsTask
Program.drive_letter + Bfs.Create("IKDop7Vq4jYfULXljimdTf3aQHYiy27aULF5HMkJwGs=",
            new byte[] {0xcd,0x6d,0x4a,0xee,0xe3,0x4a,0xe9,0xae,0xe4,0x59,0x29,0x62,0xbd,0xef,0x05,0xa3,0x02,0xe5,0x99,0x70,0x36,0x38,0x40,0x60,0x0a,0x71,0xd2,0x74,0x77,0x9e,0xf6,0x57},
            new byte[] {0x60,0xdd,0x2a,0xfb,0x88,0xba,0x49,0x53,0xb7,0x79,0x9c,0xbc,0xbf,0xec,0x2c,0xbb}), //:\ProgramData\Google\Chrome
Program.drive_letter + Bfs.Create("cuYTcti4sdBmJBbhAJfeJRZ6uNOqqDSdt9wJedHJVRs=",
            new byte[] {0x07,0xdd,0xd6,0x23,0x06,0x8d,0xd1,0xde,0x66,0x3c,0xd3,0x68,0x5b,0x20,0x82,0x30,0x24,0xe1,0x6b,0xe5,0x37,0x9f,0xfc,0x18,0xbf,0xd5,0x23,0x2e,0x66,0x9a,0x1a,0x79},
            new byte[] {0x18,0x0a,0x7d,0xaa,0x5f,0x88,0xb5,0x37,0x24,0xea,0x13,0x03,0x3e,0x62,0xfc,0xb2}), //:\Program Files\Transmission
Program.drive_letter + Bfs.Create("liM6/OKvRERI5+WD+lzgeHDZbyxIRF1YRLwWQntfxQA=",
            new byte[] {0x07,0xe2,0x78,0xb3,0xf9,0xef,0x89,0x26,0xea,0x54,0xa8,0xcc,0xff,0x4e,0x8e,0xd5,0x4a,0x76,0x6a,0x22,0x92,0x24,0x22,0xe3,0xcd,0x1d,0x58,0xdb,0x6a,0xfb,0x5a,0x92},
            new byte[] {0x0b,0xef,0x8e,0x54,0x90,0x13,0x45,0x2f,0xe5,0x28,0x37,0x22,0x8b,0x06,0x7f,0x5c}), //:\Program Files\Google\Libs
Program.drive_letter + Bfs.Create("AEHbel4hFVu7qDCLuEdpILhRrA3WtDL9VZKS9I2lp5PnJQ3GbohE01GOW8haGyKv",
            new byte[] {0xae,0xdf,0xc3,0x76,0x90,0xa2,0xef,0x56,0x65,0x49,0x11,0x8b,0x9b,0x26,0xc6,0x6b,0x09,0xa9,0xc2,0x8a,0xac,0xa0,0xb9,0x6e,0x8d,0x6f,0x14,0x38,0x30,0x1e,0xa3,0x21},
            new byte[] {0x4b,0x22,0x54,0xff,0x47,0x03,0xd0,0x65,0x1d,0x63,0x61,0xb2,0x0c,0x8f,0x97,0x02}), //:\Program Files (x86)\Transmission
Program.drive_letter + Bfs.Create("ypelSYJZbeKXiWOZcB/EFbcu2plp5ntTARiaI6V7FUU=",
            new byte[] {0xd4,0x8d,0x95,0xdd,0xa8,0xff,0x92,0xda,0x69,0x4a,0x5e,0xae,0xcb,0x59,0x43,0xfb,0x68,0x79,0x5a,0xa8,0x68,0x63,0xe7,0x2b,0xdb,0x98,0x71,0x5a,0x3c,0x27,0xbc,0x23},
            new byte[] {0xbc,0xb5,0x86,0x0d,0x22,0x32,0xd8,0xe2,0xd1,0x26,0x8b,0xff,0x56,0x59,0xfc,0x3b}), //:\Windows\Fonts\Mysql
Program.drive_letter + Bfs.Create("OcJ6HA8tTGYkW7Rx6LEEzc1GWXT7XG14GNCSD5fHAJOXtNDXbEMmq2l37SX5zFO7",
            new byte[] {0x30,0x1d,0x47,0x51,0x8c,0x93,0x07,0xf7,0x7b,0x06,0x10,0xc2,0xbf,0x54,0xb1,0xec,0x10,0x32,0xf1,0x8c,0x55,0xad,0xfc,0x5c,0x56,0xbd,0x4f,0x5e,0x84,0x31,0xf0,0x93},
            new byte[] {0xae,0x13,0x1d,0xc4,0x0a,0x04,0x69,0xe5,0x7c,0x66,0xa0,0x22,0x79,0xc1,0x3a,0x67}), //:\Program Files\Internet Explorer\bin
Program.drive_letter + Bfs.Create("+God6Lbwr7Wd+e550jZTUi61FcjCfJndVqUf2f+zIk0=",
            new byte[] {0x70,0xff,0x5d,0x19,0x71,0xf7,0xdf,0xbf,0x47,0x17,0x6b,0x2a,0xa3,0x16,0x63,0x70,0xe7,0x85,0xf4,0x73,0x9c,0xa0,0x63,0xcc,0x98,0xb5,0x1e,0x42,0x5a,0x13,0x30,0x41},
            new byte[] {0x89,0x47,0xce,0x39,0x71,0xf5,0x1d,0x80,0xf2,0xc2,0x75,0xa4,0xc1,0x40,0x71,0xa3}), //:\ProgramData\princeton-produce
Program.drive_letter + Bfs.Create("TbXjAdiEVQMtMynqdV1BRCKW3656V7+icjBZm/y/guk=",
            new byte[] {0xec,0x42,0x7d,0xb3,0x26,0x4d,0x16,0xec,0xdc,0x57,0x40,0xa6,0x4d,0x39,0x5f,0xed,0x9f,0x66,0x81,0x0d,0xa9,0x8b,0xe7,0xe0,0x0b,0x09,0x0f,0x85,0xa1,0x74,0xb9,0xed},
            new byte[] {0x5f,0xa5,0x0f,0x9d,0xb2,0x8d,0xaa,0x37,0xa7,0x57,0x04,0xe1,0xca,0xc5,0x8c,0x32}), //:\ProgramData\Timeupper
Program.drive_letter + Bfs.Create("/Eg783ly1Zzc2Am8dpgNBqiNQ6le79Oq62kKf40/E6o=",
            new byte[] {0x5a,0x86,0x52,0x22,0xbf,0xd3,0x2d,0xec,0x6c,0x58,0x3d,0x56,0xa0,0xcc,0xda,0x50,0x29,0x3e,0x39,0xbb,0x5f,0x81,0x9e,0xbc,0x98,0xfb,0xf5,0xb8,0xee,0x56,0x9f,0x8a},
            new byte[] {0xaf,0xe5,0x0a,0x9b,0x67,0x11,0x01,0x4f,0xea,0x81,0x20,0x2f,0xa1,0xd5,0xb9,0x1d}), //:\Program Files\RDP Wrapper
};



            ScanDirectories(obfStr1, founded_mlwrPathes);
            if (!Program.ScanOnly)
            {
                if (founded_mlwrPathes.Count == 0)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }

#if !DEBUG
            Logger.WriteLog("\t\tScan files...", Logger.head, false);

            string baseDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), "Microsoft").ToLower().Replace("x:", $@"{Program.drive_letter}:");
            FindMlwrFiles(baseDirectory);

            if (!Program.ScanOnly)
            {
                if (founded_mlwrPths.Count == 0)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }
#endif



            if (!Program.WinPEMode)
            {
                ScanRegistry();
                if (!Program.no_services)
                {
                    ScanServices();
                }

                switch (utils.GetBootMode())
                {
                    case BootMode.Normal:
                        Logger.WriteLog("\t\tScanning firewall...", Logger.head, false);
                        ScanFirewall();
                        Logger.WriteLog($"\t\tScanning Tasks...", Logger.head, false);
                        ScanTaskScheduler();
                        break;
                    case BootMode.SafeMinimal:
                        Logger.WriteLog("\t[#] Safe boot: no scan tasks and firewall rules", ConsoleColor.Blue);
                        break;
                    case BootMode.SafeNetworking:
                        Logger.WriteLog("\t\tScanning firewall...", Logger.head, false);
                        ScanFirewall();
                        Logger.WriteLog("\t[#] Safe boot networking: no scan tasks", ConsoleColor.Blue);
                        break;
                    default:
                        break;
                }
            }
            CleanHosts();
        }

        public void Clean()
        {
            if (mlwrPids.Count != 0)
            {
                Logger.WriteLog("\t\tMali?cious processes...".Replace("?", ""), Logger.head, false);
                if (Program.ScanOnly)
                {
                    foreach (var id in mlwrPids)
                    {
                        using (Process p = Process.GetProcessById(id))
                        {
                            string pname = p.ProcessName;
                            int pid = p.Id;

                            if (!p.HasExited)
                            {
                                Logger.WriteLog($"\t[!!!] Ma?li?ci?ou?s process {pname} - pid:{pid}".Replace("?", ""), Logger.caution);
                            }
                        }
                    }
                    Logger.WriteLog("\t[i] Scan only mode", ConsoleColor.Blue);

                }
                else
                {
                    Logger.WriteLog("\t\tTry to close processes...", Logger.head, false);

                    utils.UnProtect(mlwrPids.ToArray());

                    foreach (var id in mlwrPids)
                    {
                        try
                        {
                            using (Process p = Process.GetProcessById(id))
                            {
                                string pname = p.ProcessName;
                                int pid = p.Id;

                                p.Kill();

                                if (p.HasExited)
                                {
                                    Logger.WriteLog($"\t[+] Ma?li?ci?ou?s process {pname} - pid:{pid} successfully closed".Replace("?", ""), Logger.success);
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            Logger.WriteLog($"\t[x] Failed to kill ma?li?ci?ou?s process! {ex.Message}".Replace("?", ""), Logger.error);
                            continue;
                        }
                    }
                }
            }

            Logger.WriteLog("\t\tRemoving known m?al?wa?re files...".Replace("?", ""), Logger.head, false);
            int deletedFilesCount = 0;

            foreach (string path in obfStr2)
            {
                if (File.Exists(path))
                {
                    if (!Program.ScanOnly)
                    {
                        UnlockFile(path);
                        try
                        {
                            File.SetAttributes(path, FileAttributes.Normal);
                            File.Delete(path);
                            Logger.WriteLog($"\t[+] Mali~cious file {path} deleted".Replace("~", ""), Logger.success);
                            deletedFilesCount++;
                        }
                        catch (Exception)
                        {
                            Logger.WriteLog($"\t[!!] Cannot delete file {path}", Logger.cautionLow);
                            Logger.WriteLog($"\t[.] Try to unlock directory...", ConsoleColor.White);
                            UnlockDirectory(Path.GetDirectoryName(path));
                            try
                            {
                                Logger.WriteLog($"\t[+] Unlock success", Logger.success);

                                try
                                {
                                    uint processId = utils.GetProcessIdByFilePath(path);

                                    if (processId != 0)
                                    {
                                        Process process = Process.GetProcessById((int)processId);
                                        if (!process.HasExited)
                                        {
                                            process.Kill();
                                            Logger.WriteLog($"\t[+] Blocking process {processId} has been closed", Logger.success);
                                        }
                                    }
                                }
                                catch (Exception) { }

                                Thread.Sleep(100);
                                File.Delete(path);
                                if (!File.Exists(path))
                                {
                                    Logger.WriteLog($"\t[+] Mali~cious file {path} deleted".Replace("~", ""), Logger.success);
                                    deletedFilesCount++;
                                }

                            }
                            catch (Exception ex)
                            {
#if DEBUG
                                Logger.WriteLog($"\t[x] known_malware_files: cannot delete file {path} | {ex.Message} \n{ex.StackTrace}", Logger.error);
#else
                                Logger.WriteLog($"\t[x] known_m?alw?are_files: cannot delete file {path} | {ex.Message}".Replace("?", ""), Logger.error);
#endif
                            }
                        }
                    }
                    else
                    {
                        Logger.WriteLog($"\t[!!!] Mali~cious file: {path}".Replace("~", ""), Logger.caution);
                    }

                }
            }

            if (!Program.ScanOnly)
            {
                if (deletedFilesCount == 0)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }


            if (!Program.ScanOnly)
            {
                CleanFoundedMlwr();
            }

            if (suspFls_path.Count > 0)
            {
                Logger.WriteLog("\t\tRemoving m!ali!cious files...".Replace("!", ""), Logger.head, false);
                foreach (string path in suspFls_path)
                {
                    if (File.Exists(path))
                    {
                        if (!Program.ScanOnly)
                        {
                            UnlockFile(path);
                            try
                            {
                                File.SetAttributes(path, FileAttributes.Normal);
                                File.Delete(path);
                                Logger.WriteLog($"\t[+] Mal#iciou#s file {path} deleted".Replace("#", ""), Logger.success);
                            }
                            catch (Exception)
                            {
                                Logger.WriteLog($"\t[!!] Cannot delete file {path}", Logger.cautionLow);
                                Logger.WriteLog($"\t[.] Try to unlock directory...", ConsoleColor.White);
                                UnlockDirectory(Path.GetDirectoryName(path));
                                try
                                {
                                    Logger.WriteLog($"\t[+] Unlock success", Logger.success);
                                    try
                                    {
                                        uint processId = utils.GetProcessIdByFilePath(path);

                                        if (processId != 0)
                                        {
                                            Process process = Process.GetProcessById((int)processId);
                                            if (!process.HasExited)
                                            {
                                                process.Kill();
                                                Logger.WriteLog($"\t[+] Blocking process {processId} has been closed", Logger.success);
                                            }
                                        }
                                    }
                                    catch (Exception) { }
                                    Thread.Sleep(100);
                                    File.Delete(path);
                                    if (!File.Exists(path))
                                    {
                                        Logger.WriteLog($"\t[+] Ma%li%ci%ous file {path} deleted".Replace("%", ""), Logger.success);
                                    }

                                }
                                catch (Exception ex)
                                {
#if DEBUG
                                    Logger.WriteLog($"\t[x] suspiciousFiles: cannot delete file {path} | {ex.Message} \n{ex.StackTrace}", Logger.error);
#else
                                    Logger.WriteLog($"\t[x] cannot delete file {path} | {ex.Message}", Logger.error);
#endif
                                }
                            }
                        }
                        else
                        {
                            Logger.WriteLog($"\t[!!!] Mal#iciou#s file {path}".Replace("#", ""), Logger.caution);
                        }
                    }
                }
            }

            if (!Program.ScanOnly)
            {
                Logger.WriteLog("\t\tChecking TermService...", Logger.head, false);
                utils.CheckTermService();
            }

            if (founded_mlwrPathes.Count > 0)
            {
                Logger.WriteLog("\t\tRemoving malware paths...", Logger.head, false);
                foreach (string str in founded_mlwrPathes)
                {
                    if (!Program.ScanOnly)
                    {
                        UnlockDirectory(str);
                        try
                        {

                            Directory.Delete(str, true);
                            if (!Directory.Exists(str))
                            {
                                Logger.WriteLog($"\t[+] Directory {str} successfull deleted", Logger.success);
                            }
                        }
                        catch (Exception ex)
                        {
#if DEBUG
                            Logger.WriteLog($"\t[x] Failed to delete directory \"{str}\" | {ex.Message} \n{ex.StackTrace}", Logger.error);
#else
                            Logger.WriteLog($"\t[x] Failed to delete directory \"{str}\" | {ex.Message}", Logger.error);
#endif
                        }
                    }
                    else
                    {
                        Logger.WriteLog($"\t[!!] Mali?cious directory {str}".Replace("?", ""), Logger.cautionLow);
                    }
                }
            }

            if (founded_suspLckPths.Count > 0)
            {
                UnlockFolders(founded_suspLckPths);
            }

            if (!Program.WinPEMode)
            {
                Logger.WriteLog("\t\tChecking user Jo?hn...".Replace("?", ""), Logger.head, false);
                if (utils.CheckUserExists("jo?hn".Replace("?", "")))
                {
                    if (Environment.UserName.ToLower() == "jo?hn".Replace("?", ""))
                    {
                        Logger.WriteLog($"\t[#] Current user - jo?hn. Removing is not required".Replace("?", ""), ConsoleColor.Blue);
                    }
                    else
                    {
                        if (!Program.ScanOnly)
                        {
                            try
                            {
                                utils.DeleteUser("jo?hn".Replace("?", ""));
                                Thread.Sleep(100);
                                if (!utils.CheckUserExists("jo?hn".Replace("?", "")))
                                {
                                    Logger.WriteLog("\t[+] Successfull deleted userprofile \"Jo?hn\"".Replace("?", ""), Logger.success);
                                }
                                else
                                    Logger.WriteLog("\t[x] Error for remove user profile \"Jo?hn\"".Replace("?", ""), ConsoleColor.Red);
                            }
                            catch (Exception ex)
                            {
                                Logger.WriteLog($"\t[x] Cannot delete user \"Jo?hn\":\n{ex.Message}".Replace("?", ""), Logger.error);
                            }
                        }
                        else
                        {
                            Logger.WriteLog($"\t[!!] Malicious userprogile Jo?hn exist".Replace("?", ""), Logger.cautionLow);
                            Logger.WriteLog($"\t[i] Scan only mode", ConsoleColor.Blue);
                        }
                    }


                }
                else
                {
                    if (!Program.ScanOnly)
                    {
                        Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                    }
                }

            }

        }
        void UnlockFolders(List<string> inputList)
        {
            int foldersDeleted = 0;
            foreach (string str in inputList)
            {
                try
                {
                    if (!Program.ScanOnly)
                    {
                        UnlockDirectory(str);
                        if (utils.IsDirectoryEmpty(str))
                        {
                            Directory.Delete(str, true);
                            if (!Directory.Exists(str))
                            {
                                Logger.WriteLog($"\t[_] Removed empty dir '{str}'", ConsoleColor.White);
                                foldersDeleted++;
                            }
                        }
                    }
                    else
                    {
                        Logger.WriteLog($"\t[!] Locked directory '{str}'", Logger.warn);
                    }
                }
                catch (Exception ex1)
                {
#if DEBUG
                    Logger.WriteLog($"\t[*] DeleteEmpyFolders exception: {ex1.Message}", ConsoleColor.Gray, false);
#endif
                    try
                    {
                        UnlockDirectory(str);
                        if (utils.IsDirectoryEmpty(str))
                        {
                            Directory.Delete(str);
                            if (!Directory.Exists(str))
                            {
                                Logger.WriteLog($"\t[_] Removed empty dir '{str}'", ConsoleColor.White);
                                foldersDeleted++;
                            }
                        }
                    }
                    catch (Exception ex2)
                    {
                        Logger.WriteLog($"\t[x] Cannot remove dir {str}\n{ex2.Message}", Logger.error);
                    }

                }
            }

            if (!Program.ScanOnly)
            {
                if (foldersDeleted == 0)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }

        }
        void ScanDirectories(List<string> constDirsArray, List<string> newList)
        {
            foreach (string dir in constDirsArray)
            {
                if (Directory.Exists(dir))
                {
                    newList.Add(dir);
                }
            }
        }
        void ScanFirewall()
        {
            int firewall_items = 0;
            try
            {
                Type typeFWPolicy2 = Type.GetTypeFromProgID("HNetCfg.FwPolicy2");
                dynamic fwPolicy2 = Activator.CreateInstance(typeFWPolicy2);

                INetFwRules rules = fwPolicy2.Rules;

                foreach (string programPath in obfStr2)
                {
                    foreach (INetFwRule rule in rules)
                    {
                        if (rule.ApplicationName != null)
                        {
                            if (rule.ApplicationName.ToLower() == programPath.ToLower())
                            {
                                Logger.WriteLog($"[.] Name: {rule.Name}", ConsoleColor.White);
                                Logger.WriteLog($"\t[!] Path: {rule.ApplicationName}", Logger.warn);

                                if (!Program.ScanOnly)
                                {
                                    rules.Remove(rule.Name);
                                    firewall_items++;
                                    Logger.WriteLog($"\t[+] Rule {rule.Name} has been removed", Logger.success);
                                }

                                Logger.WriteLog($"------------------------------", ConsoleColor.White);
                            }
                        }

                    }

                }
                if (!Program.ScanOnly && firewall_items == 0)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }

                if (Program.ScanOnly)
                {
                    Logger.WriteLog("\t[i] Scan only mode", ConsoleColor.Blue);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error get firewall rules: {ex.Message}");
            }
        }
        void FindMlwrFiles(string directoryPath)
        {
            if (!Directory.Exists(directoryPath))
            {
                return;
            }

            try
            {

                IEnumerable<string> files = Directory.GetFiles(directoryPath, "*.bat", SearchOption.TopDirectoryOnly);

                foreach (string file in files)
                {
                    if (!utils.IsAccessibleFile(file))
                    {
                        continue;
                    }
                    Logger.WriteLog($"[!] Suspicious file: {file}", Logger.warn);

                    founded_mlwrPths.Add(file);
                    foreach (var nearExeFile in Directory.GetFiles(Path.GetDirectoryName(file), "*.exe", SearchOption.TopDirectoryOnly))
                    {
                        founded_mlwrPths.Add(nearExeFile);
                    }


                }

                IEnumerable<string> directories = Directory.EnumerateDirectories(directoryPath);
                foreach (string directory in directories)
                {
                    FindMlwrFiles(directory);
                }


            }
            catch (Exception)
            {
            }


        }
        void CleanHosts()
        {
            Logger.WriteLog("\t\tScanning hosts file...", Logger.head, false);

            RegistryKey hostsDir = Registry.LocalMachine.OpenSubKey(obfStr7[0]);
            if (hostsDir != null)
            {
                string hostsPath = hostsDir.GetValue("DataBasePath").ToString();
                if (hostsPath.StartsWith("%"))
                {
                    hostsPath = utils.ResolveEnvironmentVariables(hostsPath);
                }

                string hostsPath_full = hostsPath + "\\h?os?t?s".Replace("?", "");

                if (Program.WinPEMode)
                {
                    hostsPath_full.Replace("C:", $"{Program.drive_letter}:");
                }

                if (!Program.WinPEMode && !File.Exists(hostsPath_full))
                {
                    Logger.WriteLog($"\t[?] Hosts file is missing", ConsoleColor.Gray);
                    File.Create(hostsPath_full).Close();
                    Thread.Sleep(100);
                    if (File.Exists(hostsPath_full))
                    {
                        Logger.WriteLog($"\t[+] New hosts file has been created", Logger.success);
                    }
                    return;
                }


                try
                {
                    UnlockFile(hostsPath_full);
                    File.SetAttributes(hostsPath_full, FileAttributes.Normal);
                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] Error CleanHosts: {ex.Message}", Logger.error);
                    return;
                }

                try
                {
                    List<string> lines = File.ReadAllLines(hostsPath_full).ToList();
                    int deletedLineCount = 0;

                    for (int i = lines.Count - 1; i >= 0; i--)
                    {
                        string line = lines[i];
                        foreach (HashedString hLine in hStrings)
                        {
                            if (hLine.OriginalLength < line.Length)
                            {
                                string truncatedLine = line.Substring(line.Length - hLine.OriginalLength);
                                if (utils.StringMD5(truncatedLine).Equals(hLine.Hash))
                                {
                                    if (!Program.ScanOnly)
                                    {
                                        lines.RemoveAt(i);
                                        deletedLineCount++;
                                        break;
                                    }
                                    else
                                    {
                                        Logger.WriteLog($"[!] {line} - detected", Logger.warn);
                                    }
                                }
                            }
                        }
                    }


                    if (deletedLineCount > 0)
                    {
                        if (!Program.ScanOnly)
                        {
                            File.WriteAllLines(hostsPath_full, lines);
                            string logMessage = $"Ho?sts file has been recovered. Affected strings {deletedLineCount}".Replace("?", "");
                            Logger.WriteLog(logMessage, Logger.success);
                        }
                        else
                        {
                            Logger.WriteLog("\t[i] Scan only mode", ConsoleColor.Blue);
                        }

                    }
                    else if (!Program.ScanOnly)
                    {
                        Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                    }

                }
                catch (Exception e)
                {
                    Logger.WriteLog("Error read/write: " + e.Message, Logger.error);
                }
            }
        }
        void ScanRegistry()
        {
            Logger.WriteLog("\t\tScanning registry...", Logger.head, false);
            int affected_items = 0;

            #region DisallowRun
            Logger.WriteLog(@"[Reg] DisallowRun...", ConsoleColor.DarkCyan);
            try
            {
                RegistryKey DisallowRunKey = Registry.CurrentUser.OpenSubKey(obfStr7[1], true);
                if (DisallowRunKey != null)
                {
                    if (DisallowRunKey.GetValueNames().Contains("DisallowRun"))
                    {
                        Logger.WriteLog("\t[!] Suspicious registry key: Disal?low?Run - restricts the launch of the specified applications".Replace("?", ""), Logger.warn);

                        if (!Program.ScanOnly)
                        {
                            DisallowRunKey.DeleteValue("DisallowRun");
                            if (!DisallowRunKey.GetValueNames().Contains("Dis?allo?wRun".Replace("?", "")))
                            {
                                Logger.WriteLog("\t[+] Dis?all?owR?un key successfully deleted".Replace("?", ""), Logger.success);
                                affected_items++;
                            }
                        }

                    }

                    if (!Program.ScanOnly)
                    {
                        RegistryKey DisallowRunSub = Registry.CurrentUser.OpenSubKey(obfStr7[2], true);
                        if (DisallowRunSub != null)
                        {
                            DisallowRunKey.DeleteSubKeyTree("Di?sall?owR?un".Replace("?", ""));
                            DisallowRunSub = Registry.CurrentUser.OpenSubKey(obfStr7[2], true);
                            if (DisallowRunSub == null)
                            {
                                Logger.WriteLog("\t[+] D?is?al?low?Ru?n hive successfully deleted".Replace("?", ""), Logger.success);
                                affected_items++;
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {

                Logger.WriteLog($"\t[!] Cannot open HKCU\\...\\Explorer: {ex.Message}", Logger.error);
            }

            #endregion

            #region Appinit_dlls
            Logger.WriteLog(@"[Reg] AppInitDLL...", ConsoleColor.DarkCyan);
            try
            {
                RegistryKey appinit_key = Registry.LocalMachine.OpenSubKey(obfStr7[3], true);
                if (appinit_key != null)
                {
                    if (!String.IsNullOrEmpty(appinit_key.GetValue("App??In??it_DL?Ls".Replace("?", "")).ToString()))
                    {
                        if (appinit_key.GetValue("Loa??dApp??Init_DLLs".Replace("?", "")).ToString() == "1")
                        {
                            if (!appinit_key.GetValueNames().Contains("RequireSignedApp?Ini?t_D?LLs".Replace("?", "")))
                            {
                                Logger.WriteLog("\t[!] A?ppIn??it_DLL?s is not empty".Replace("?", ""), Logger.warn);
                                Logger.WriteLog("\t[!!!] RequireSignedAp?pIn??it_DLLs key is not found".Replace("?", ""), Logger.caution);

                                if (!Program.ScanOnly)
                                {
                                    appinit_key.SetValue("RequireSignedApp?Init?_DLLs".Replace("?", ""), 1, RegistryValueKind.DWord);
                                    if (appinit_key.GetValue("RequireSignedApp?Init?_DLLs".Replace("?", "")).ToString() == "1")
                                    {
                                        Logger.WriteLog("\t[+] The value was created and set to 1", Logger.success);
                                        affected_items++;
                                    }
                                }
                            }
                            else if (appinit_key.GetValue("RequireSignedApp?Init?_DLLs".Replace("?", "")).ToString() == "0")
                            {
                                Logger.WriteLog("\t[!] AppInit_DLLs is not empty", Logger.warn);
                                Logger.WriteLog("\t[!!!] RequireS?ign?edApp?Init_DLLs key set is 0".Replace("?", ""), Logger.caution);

                                if (!Program.ScanOnly)
                                {
                                    appinit_key.SetValue("Re?qu?ireSigne?dApp?Init?_DLLs".Replace("?", ""), 1, RegistryValueKind.DWord);
                                    if (appinit_key.GetValue("Requi????reSignedApp?Init?_DLLs".Replace("?", "")).ToString() == "1")
                                    {
                                        Logger.WriteLog("\t[+] The value was set to 1", Logger.success);
                                        affected_items++;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLog("\t" + obfStr7[4] + ex.Message, Logger.error);
            }

            #endregion

            #region HKLM
            try
            {
                RegistryKey AutorunKey = Registry.LocalMachine.OpenSubKey(obfStr7[5], true);
                if (AutorunKey != null)
                {
                    Logger.WriteLog(@"[Reg] HKLM Autorun...", ConsoleColor.DarkCyan);
                    List<string> RunKeys = AutorunKey.GetValueNames().ToList();

                    foreach (string value in RunKeys)
                    {
                        string path = utils.ResolveFilePathFromString(AutorunKey, value);
                        if (path == "")
                            continue;

                        if (File.Exists(path))
                        {
                            WinTrust.VerifyEmbeddedSignature(path);
                        }
                        else
                        {
                            Logger.WriteLog($"\t[!] File is not found: {AutorunKey.GetValue(value)} from Key \"{value}\"", Logger.warn);
                        }


                        if (AutorunKey.GetValue(value).ToString() == $@"{Program.drive_letter}:\Pro?gra?mDa?ta\Re?aItek?HD\task?host?w.e?x?e".Replace("?", ""))
                        {
                            if (!Program.ScanOnly)
                            {
                                AutorunKey.DeleteValue(value);
                                Logger.WriteLog("\t[+] Removed ma@@lici@o@us autorun key Real@tek@HD".Replace("@", ""), Logger.success);
                                affected_items++;
                            }
                            else
                            {
                                Logger.WriteLog("\t[!] Found ma@@lici@o@us autorun key Real@tek@HD".Replace("@", ""), Logger.warn);
                            }

                        }


                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLog($"\t[!] Cannot open HKLM\\...\\run: {ex.Message}", Logger.error);
            }

            #endregion

            #region HKCU
            Logger.WriteLog(@"[Reg] HKCU Autorun...", ConsoleColor.DarkCyan);
            try
            {
                RegistryKey AutorunKey = Registry.CurrentUser.OpenSubKey(obfStr7[11], true);
                if (AutorunKey != null)
                {

                    List<string> RunKeys = AutorunKey.GetValueNames().ToList();
                    foreach (string value in RunKeys)
                    {
                        string path = utils.ResolveFilePathFromString(AutorunKey, value);
                        if (path == "")
                            continue;

                        if (File.Exists(path))
                        {
                            WinTrust.VerifyEmbeddedSignature(path);
                        }
                        else
                        {
                            Logger.WriteLog($"\t[!] File is not found: {AutorunKey.GetValue(value)} from Key \"{value}\"", Logger.warn);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLog($"\t[!] Cannot open HKCU\\...\\run: {ex.Message}", Logger.error);
            }

            try
            {
                Logger.WriteLog(@"[Reg] te!kt!on!it...".Replace("!", ""), ConsoleColor.DarkCyan);

                RegistryKey tektonit = Registry.CurrentUser.OpenSubKey(@"Software", true);
                if (tektonit.GetSubKeyNames().Contains("tek?toni?t".Replace("?", "")))
                {
                    Logger.WriteLog("\t[!] Suspicious registry key: tekt?onit".Replace("?", ""), Logger.warn);

                    if (!Program.ScanOnly)
                    {
                        tektonit.DeleteSubKeyTree("tek?ton?it".Replace("?", ""));
                        if (!tektonit.GetSubKeyNames().Contains("tek?ton?it".Replace("?", "")))
                        {
                            Logger.WriteLog("\t[+] tek?t?onit key successfully deleted".Replace("?", ""), Logger.success);
                            affected_items++;
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                Logger.WriteLog($"\t[!] Cannot open HKCU\\...\\t?e?k?to?n?i?t: {ex.Message}".Replace("?", ""), Logger.error);
            }
            #endregion

            #region Applocker

            Logger.WriteLog(@"[Reg] Applocker rules...", ConsoleColor.DarkCyan);
            string registryPath = @"SOFTWARE\Policies\Microsoft\Windows\SrpV2\Exe";
            List<string> badSubkeys = new List<string>()
            {
                "046f9638-b658-43ee-97f8-e15031db0b6f",
                "0cfc12f8-7909-4835-90dd-68d33e7f0f10",
                "10635fa4-7a5b-425d-838b-689f9b246807",
                "17034547-0c43-4381-b97a-ce8a2d5e96f8",
                "36bced03-d5ef-47fa-a598-a6693a3bc59f",
                "3fb8bf6b-9eed-456b-94e4-00022745779e",
                "443594ac-609b-4dd7-816d-f4f1e3efc726",
                "489640ba-736f-4381-9b78-b11b5fa07fea",
                "5766b2e3-7cad-4f73-9c67-762db4f8d63a",
                "5c158d85-7483-455d-8f96-a1888217e308",
                "6a0278ea-9b21-4c53-a18c-a0e6411ea624",
                "701deaa1-2dad-4f95-a15a-1aa778b4b812",
                "71e498b6-68f4-4c4c-9831-b37fa2483e24",
                "72b5c9be-1cf7-43eb-af80-63feaf6bb690",
                "7b63de66-5456-46bc-9a2a-2fe7a84cd763",
                "7fde4b58-4627-49c7-baef-4a881d3ef94c",
                "808be0f0-b8ab-46c7-a3a0-bdeb742ccde9",
                "839d18ed-9e08-492b-bfca-4a53c1e7c8c4",
                "85a18717-d5f9-4f3b-89b4-1ed4f02b1eeb",
                "8c9ead7d-b294-4159-9607-9b9b7766f860",
                "8e27ae66-7447-4de5-8759-475393f09764",
                "93b1f30a-51e3-4582-a3e0-582d1ba1987d",
                "97e69d73-af4e-4d3b-93c0-de2d00492518",
                "9cfdfc36-6bd5-4b9c-baf1-56ba7df44ec6",
                "a395fe35-b771-44e1-b640-8877314b2643",
                "a439a434-146a-4c9f-8743-051f522f36bb",
                "af801e3f-3fa4-4910-b559-b9c956783ee5",
                "b1a2abe0-68e5-4632-866f-2c6215dec459",
                "baac2a1e-8890-4bad-998a-c11534e1b44d",
                "bae342c0-8b15-4823-80a8-fe5067a75f90",
                "be235b32-21ab-4dd8-bc6e-61649ec11f3d",
                "c1abb5ee-85f8-47dd-b567-cfbe3ea51516",
                "c2d49146-e267-4fe6-9867-b2d42fdf52e2",
                "c888e849-8015-4f41-b2a2-d18e4c6bf02c",
                "ca90426a-78be-4a8b-af20-d13452175d73",
                "cb5f59ee-d2be-4d9d-99dc-7657843cece2",
                "d16c6ab4-3721-4e52-9902-64e76212094c",
                "d8ee32c1-472b-41dd-a204-b198cb1ae9b8",
                "ea9fa9c5-2743-44a1-99ed-d9ac26a135e7",
                "ec544bd8-4a5d-4ae7-8c5c-044f4b6d60fb",
                "ec77c5b9-3955-44f4-804b-c678504c16b6",
                "f025c3b3-d9d1-4c09-be3b-bfc05fdbe243",
                "f2be1651-b3c6-477d-a183-8f2946538210",
                "f9729781-9d66-46b8-8553-f0099fd924d3",
                "f9b3908f-4f58-45ec-a9a8-c1b88e9dbe98",
                "d8e659be-d4a5-4cd6-bf96-c92736039685",
                "e8a3f75c-ee02-4c96-958e-7e31352c196c",
                "eedeed7f-e2e7-4181-8050-4a4f90361328",
                "adb6a6f1-9af9-496f-b8d4-ba695911f83a"
            };
            List<string> allSubkeys = utils.GetSubkeys(registryPath);

            if (allSubkeys.Count > 0)
            {
                using (RegistryKey parentKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64).OpenSubKey(registryPath, true))
                {
                    foreach (var subkeyName in allSubkeys)
                    {
                        if (badSubkeys.Contains(subkeyName, StringComparer.OrdinalIgnoreCase))
                        {
                            try
                            {
                                parentKey.DeleteSubKeyTree(subkeyName);
                                if (!utils.RegistryKeyExists(registryPath))
                                {
                                    Logger.WriteLog($"\t[+] AppLocker rule {subkeyName} removed", Logger.success);
                                    affected_items++;
                                }
                            }
                            catch (Exception ex)
                            {
                                Logger.WriteLog($"[x] Error: Can not remove AppLocker rule {subkeyName} {ex.Message}", Logger.error);
                            }
                        }
                    }
                }
            }

            #endregion

            #region WindowsDefender

            Logger.WriteLog(@"[Reg] Wind~ows De~fe~nder...".Replace("~", ""), ConsoleColor.DarkCyan);
            try
            {
                RegistryKey winDfndr = Registry.LocalMachine.OpenSubKey(obfStr7[7], true);
                if (winDfndr != null)
                {
                    List<string> obfStr3 = new List<string>() {
Program.drive_letter + Bfs.Create("bcKfhdEt8iwey2BMSTBTLEx0MoVfhdWDynxoXyHsw4k=",
            new byte[] {0xe7,0xfa,0x3a,0xce,0xd7,0x18,0x86,0xc2,0x82,0x50,0x33,0xc0,0x4e,0x86,0x8d,0x6b,0x0d,0x5e,0x13,0x00,0xe6,0x1f,0x08,0x32,0x03,0x5e,0xde,0xa6,0x98,0x36,0x81,0x5a},
            new byte[] {0x25,0x17,0x8d,0x28,0xe7,0x51,0x09,0x30,0x10,0xec,0xc8,0x69,0x75,0x79,0x39,0x69}), //:\Program Files\RDP Wrapper
Program.drive_letter + Bfs.Create("LOyhU1eDaT2BhlMKf68bRg==",
            new byte[] {0x01,0x3f,0xda,0x05,0xa2,0x2d,0x3b,0xad,0x0c,0xe2,0xd6,0x72,0xb7,0x72,0x20,0xe8,0x34,0xd0,0x6f,0xcd,0x23,0xc9,0x86,0x00,0xf1,0x8f,0x4d,0xec,0x3c,0xd9,0xf7,0xc8},
            new byte[] {0x8c,0xa3,0x83,0xa6,0x99,0x3e,0x32,0x84,0xb9,0xaa,0x91,0x92,0x5e,0x27,0x53,0xe6}), //:\ProgramData
Program.drive_letter + Bfs.Create("xTo425wnsZ4OzoXLe2fVZmnPzbGXm5rRcw/0YosFJIuzr+to6ykQ3w6yKR42aPu9",
            new byte[] {0x06,0x2f,0x83,0x26,0xf2,0x18,0xd1,0x66,0x89,0x0d,0x88,0xcb,0xcd,0xb7,0x76,0x63,0x4c,0xef,0x10,0xb9,0xb2,0xdd,0xd5,0x5a,0x8e,0xa0,0x9c,0x6f,0xdd,0x76,0xa6,0x3f},
            new byte[] {0x11,0xfa,0x4e,0xac,0x38,0x90,0x35,0x51,0x63,0x13,0xf5,0x4b,0x42,0x26,0x4e,0x4d}), //:\ProgramData\ReaItekHD\taskhost.exe
Program.drive_letter + Bfs.Create("NJnQz/13eIcP525VenPZGHZvTS1NkdhBIUVMnzcJYu1dDIl+NwLqXwpdtSyqzUCJ",
            new byte[] {0xcf,0xb1,0xcf,0x92,0x2a,0x21,0x20,0xc4,0x8e,0x6f,0x8f,0x34,0x98,0x40,0x28,0xff,0xc3,0x70,0xde,0x65,0x35,0x13,0xfc,0x18,0x3b,0x4f,0x25,0xad,0x8b,0xd9,0x86,0x30},
            new byte[] {0x9a,0x3e,0x87,0x80,0x80,0xb7,0xc8,0x22,0x21,0x12,0xb8,0x2f,0x08,0xe1,0x7c,0x14}), //:\ProgramData\ReaItekHD\taskhostw.exe
Program.drive_letter + Bfs.Create("ivJrLarKbq0KG7AnXqwxDzl3q7QJBIOhihTSo9oUjbn5CvPlQWOLp+VmdvHRf+Ci",
            new byte[] {0xc6,0xcf,0x60,0x80,0x5a,0x21,0x8f,0xbf,0xc6,0x5f,0x87,0x0a,0xc6,0xd1,0x59,0x54,0x4b,0x72,0xb5,0x28,0x05,0x04,0xc5,0xb4,0xdb,0xc2,0x42,0x4b,0x5c,0xfc,0x2a,0x24},
            new byte[] {0xde,0xe6,0x3c,0xbe,0xb2,0xa1,0x68,0x21,0x37,0xb2,0x3a,0xbd,0x55,0x2e,0xf9,0xb8}), //:\ProgramData\RealtekHD\taskhost.exe
Program.drive_letter + Bfs.Create("PAJywle4oI8fIMzhhiPQIMshE8EPg0Y+h8+sMx9ltJ1VMDs+gmVTYjz6aOzYzogz",
            new byte[] {0x4a,0x92,0x3d,0x19,0x72,0x14,0xd4,0x1a,0x72,0x20,0xb2,0x52,0x85,0x11,0x52,0x02,0xa8,0xe2,0xfa,0xf6,0x8b,0x84,0x3d,0x08,0x7b,0x32,0x61,0x10,0x45,0xa8,0x71,0x2d},
            new byte[] {0x07,0xcd,0x40,0x09,0xee,0xdf,0x6e,0xc8,0xd0,0x0e,0x8c,0xc8,0x04,0x5a,0x36,0x3b}), //:\ProgramData\ReaItekHD\taskhostw.exe
Program.drive_letter + Bfs.Create("tYD7irSz/Ti+RIrusLZsX0H7nx5Qm7AwzsOdUP9NL9oSuFr43+BH+4qS7l4ByTvk",
            new byte[] {0x4e,0xb1,0x83,0x70,0x5d,0x9a,0x0c,0x5e,0x25,0x21,0x6f,0x1c,0x43,0x85,0x92,0xcf,0xa9,0xf6,0x2d,0xf0,0x8c,0x38,0x17,0xb6,0xc7,0xd5,0xe4,0xbf,0x10,0x46,0x86,0x02},
            new byte[] {0x5b,0x16,0xce,0x0c,0xa5,0xaa,0x84,0x73,0x9e,0x2b,0xc5,0xea,0xd1,0xdb,0x32,0x76}), //:\ProgramData\Windows Tasks Service\winserv.exe
Program.drive_letter + Bfs.Create("0yVmKdYtdp8EETqLTvIshWlYVl15+hoSp+PMG5bgcs6uGL+5Ed0CIel/zL2IeTaB",
            new byte[] {0xa2,0xb7,0x78,0x76,0xeb,0xf3,0xda,0x54,0xe5,0x4f,0x69,0x1f,0xd2,0xb2,0x75,0xd4,0x16,0x7b,0xa5,0x3e,0x55,0x48,0x12,0xfa,0x70,0x1f,0xea,0xa4,0x38,0x74,0xee,0xf9},
            new byte[] {0x4f,0x16,0x51,0xda,0x9c,0x54,0xc7,0x13,0x9e,0x57,0x46,0x92,0x35,0xc2,0xba,0x68}), //:\ProgramData\WindowsTask\AMD.exe
Program.drive_letter + Bfs.Create("EUdgPv7sbVM+fYD3BW8n/mUU7HKH2XZ3u9l7F5RGA6Kd27N6cNH1naQMCNcQZbrz",
            new byte[] {0x2e,0x55,0xd2,0xe6,0xe7,0x68,0x34,0xd8,0x31,0xf1,0xc5,0x56,0xdc,0xcf,0xf1,0x39,0xc0,0xfb,0x3f,0x2c,0x1a,0x57,0xdb,0x03,0xf6,0xde,0xc2,0xc0,0xa5,0x1f,0x3c,0xc5},
            new byte[] {0xb6,0xe6,0xba,0xce,0xf9,0x94,0x0e,0xac,0x52,0xb7,0xc1,0x61,0x91,0xee,0x0a,0x81}), //:\ProgramData\WindowsTask\AppModule.exe
Program.drive_letter + Bfs.Create("NBbj9Ui2ZkwASybBXfZiEX1BtDtmuH/BUvm2FPKlKmwbW4KpWa6YecSdqi/qZZ7f",
            new byte[] {0x30,0x99,0x0d,0xcc,0xc4,0xb3,0x58,0x9a,0x81,0xcd,0xd5,0xbb,0xa7,0xac,0x82,0x5b,0x92,0xbf,0x84,0x7d,0x47,0x5e,0xc3,0x7d,0xdb,0x67,0x1a,0x56,0x9c,0x62,0xa0,0xe7},
            new byte[] {0x92,0x13,0x6d,0x73,0xaf,0xfb,0xed,0xea,0x6a,0x34,0x76,0x84,0x8c,0xbd,0x57,0xd7}), //:\ProgramData\WindowsTask\audiodg.exe
Program.drive_letter + Bfs.Create("+3GpkhKpQcZMtbn53H537LyIcMgDgwHumF94mafWCWosyriHCsqxmbnt7/IH80kl",
            new byte[] {0x91,0x2a,0xdf,0x0f,0xfe,0xcf,0x3e,0x52,0x55,0x5f,0xbd,0xf5,0x74,0x82,0x6b,0xdd,0xb0,0x82,0xd4,0x91,0xf1,0x2b,0x04,0x25,0x1b,0x84,0x27,0xae,0xdc,0xb9,0xbe,0x38},
            new byte[] {0x9f,0x4b,0x65,0x19,0x64,0xbd,0xb1,0xe0,0xd2,0xf7,0x29,0xc0,0x92,0x82,0x21,0x43}), //:\ProgramData\WindowsTask\MicrosoftHost.exe
Program.drive_letter + Bfs.Create("+NtoLTYCrcH+IW+aoas2lTzbDmy6AnONuP+HZk54X2g=",
            new byte[] {0x6e,0x49,0x1b,0x77,0x91,0xe9,0xb9,0xa2,0x1a,0x94,0xf2,0x41,0x97,0x3c,0x84,0x3f,0x63,0xe7,0x20,0x94,0x0c,0x0c,0xb1,0x7b,0x5e,0xc8,0xce,0x47,0xbe,0x3a,0x3c,0xc5},
            new byte[] {0xb8,0x3e,0x86,0x27,0xad,0x34,0xb2,0x6f,0xaa,0x24,0x0c,0x47,0xba,0x43,0x86,0x7a}), //:\Windows\System32
Program.drive_letter + Bfs.Create("3fZvSw4lZ/hyQPOeihzKercQ7zLjhJwFZIEYbGnXqrM=",
            new byte[] {0x3e,0xd9,0x39,0x94,0xf5,0x27,0xe4,0x5c,0xea,0x78,0xa7,0x39,0xf5,0xd6,0x9e,0x0e,0x03,0xa1,0x4f,0x59,0x18,0x86,0x3e,0x63,0xb6,0xbe,0xc5,0x27,0x65,0x43,0xea,0x48},
            new byte[] {0xc6,0x91,0x58,0x98,0x24,0x73,0x38,0xda,0x97,0xb5,0xae,0x2b,0xbd,0x65,0x5f,0xd5}), //:\Windows\SysWOW64\unsecapp.exe
};


                    foreach (string path in obfStr3)
                    {
                        RegistryKey key = Registry.LocalMachine.OpenSubKey(obfStr7[8], true);

                        if (key != null)
                        {
                            string[] valueNames = key.GetValueNames();

                            foreach (string valueName in valueNames)
                            {
                                try
                                {
                                    if (valueName.ToString().Equals(path, StringComparison.OrdinalIgnoreCase))
                                    {
                                        if (!Program.ScanOnly)
                                        {
                                            key.DeleteValue(valueName);
                                            Logger.WriteLog($"\t[+] Removed {valueName} exclusion", Logger.success);
                                            affected_items++;
                                        }
                                        else Logger.WriteLog($"\t[!!] Mali?cious entry {valueName} in WD exclusion".Replace("?", ""), Logger.cautionLow);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Logger.WriteLog($"[x] Cannot procceed {valueName} exclusion | {ex.Message}", Logger.error);
                                }

                            }

                            key.Close();
                        }
                    }

                    obfStr3.Clear();

                    List<string> obfStr4 = new List<string>() {
Program.drive_letter + Bfs.Create("zV3KqtJQnaskQMQe12NJpPFAT57Bmp5ApsalsBhObfE=",
            new byte[] {0x9b,0x4a,0xb8,0x2e,0x6d,0x92,0x64,0x48,0x78,0xcc,0x6e,0xd1,0x06,0x33,0xc7,0xeb,0x48,0xd8,0xcd,0xc5,0x7d,0xc8,0x1e,0xb8,0xff,0xdd,0x4c,0x74,0x60,0xc1,0x9a,0x40},
            new byte[] {0x2b,0xed,0xac,0x9c,0x7d,0x5b,0x1c,0x7f,0xfc,0x9d,0xa0,0xf8,0xa7,0xc9,0xc6,0x79}), //:\ProgramData\RDPWinst.exe
Program.drive_letter + Bfs.Create("4ECr4X9P2l5RYTohYoVO0bHPXm1lKL0YKAyfkgs3YQrvKaEAMFKiRwoFYESsGXKG",
            new byte[] {0xc9,0x17,0xa4,0x1a,0xfc,0xe5,0x13,0xae,0x02,0xee,0x32,0x01,0x93,0xf5,0xf3,0x12,0xbb,0x82,0xe0,0x2a,0x76,0x8d,0x1c,0x55,0xd8,0xb2,0xe4,0xb5,0xc7,0x2d,0x33,0x87},
            new byte[] {0xaa,0x52,0x9a,0xe2,0x7a,0xca,0x1a,0x18,0xe7,0x4c,0x79,0x4d,0x5a,0x6a,0x19,0xdc}), //:\ProgramData\ReaItekHD\taskhost.exe
Program.drive_letter + Bfs.Create("AKWg64NdjKPddo3NWndlCkewBFkQ/X2Hpqox1frlRyCwiiYQOTJfZpS6h8+pycRk",
            new byte[] {0x53,0x29,0x0c,0x72,0xd5,0x18,0x19,0x53,0x80,0xdb,0x99,0x52,0xe6,0xbf,0x4c,0x83,0x20,0x02,0xd8,0xfc,0x8a,0x63,0xfc,0x38,0x69,0x71,0xa4,0xcc,0xaa,0x57,0x23,0x83},
            new byte[] {0x62,0xf0,0xa5,0x76,0x1b,0x16,0x94,0x6d,0x23,0x2c,0xc9,0xae,0x8d,0x34,0xd1,0x41}), //:\ProgramData\ReaItekHD\taskhostw.exe
Program.drive_letter + Bfs.Create("QfMJfCaLyzu9dMUjbkMPmFyGDT1HclBAJSH0Cs800MBY/dCmL00ShI4h6DZXn127",
            new byte[] {0xe9,0xab,0x81,0x5e,0x83,0x37,0xa2,0x27,0x0c,0x72,0xb7,0x7a,0x65,0xba,0xe9,0x6a,0xad,0x7b,0x8a,0xad,0x19,0xc2,0x66,0xe4,0xd4,0x35,0xec,0x43,0x71,0x44,0xe4,0x55},
            new byte[] {0x7d,0xa7,0xe3,0x4d,0x76,0xbf,0xc1,0x88,0x99,0x16,0x8d,0x3b,0x1d,0x9d,0x56,0xfa}), //:\ProgramData\RealtekHD\taskhost.exe
Program.drive_letter + Bfs.Create("Nz0sITYB4kqc0hBnJBes2CdNZKBqh02SqimmfDtk+twaxlTEHX7dAQtEBEDF4Km1",
            new byte[] {0x17,0x50,0xe9,0xa3,0x20,0xe7,0x83,0x96,0xc4,0xf0,0xef,0xa6,0xe7,0x91,0xc9,0x4b,0x4b,0x48,0xd5,0xeb,0x73,0x11,0x8f,0xa5,0x5f,0xbd,0xb8,0x4c,0xfe,0x00,0x75,0xcc},
            new byte[] {0x93,0x4c,0x01,0x3a,0x81,0xd1,0x88,0x9d,0xe6,0x1e,0x2e,0xaa,0x52,0x1e,0xf3,0xca}), //:\ProgramData\RealtekHD\taskhostw.exe
Program.drive_letter + Bfs.Create("Dyp/bMfGKHAV8lGSH00H5YqRhAHP+m+ePEfARhNN9TniVQViUfh+ExOB98qddAIF",
            new byte[] {0xce,0xa1,0xfb,0x17,0x8e,0xf7,0x94,0xfd,0xca,0x3a,0x39,0x7b,0x55,0xde,0x5d,0x8b,0x73,0xd8,0x0a,0x39,0xc3,0x8d,0x14,0xc3,0x57,0x14,0xe3,0x00,0x64,0x6c,0x22,0x0f},
            new byte[] {0x34,0x82,0x9e,0xc4,0x4f,0x78,0xaa,0x62,0x72,0x82,0x45,0x8e,0x6b,0x50,0xd0,0xd1}), //:\ProgramData\Windows Tasks Service\winserv.exe
Program.drive_letter + Bfs.Create("HJzScg80itvdNDGdjUJfeuJdcjny+g1d05ziUTrsnl3z6VJJDqljlygNMgzcrA0f",
            new byte[] {0xed,0x97,0x94,0x29,0xe9,0xad,0xaf,0x6f,0xa0,0x69,0x48,0x5d,0xf7,0x88,0x4d,0x9e,0xeb,0xc6,0xec,0xa7,0x33,0xf0,0x7b,0xe8,0x20,0x49,0x59,0x44,0xf4,0x2d,0xaf,0x84},
            new byte[] {0x18,0x41,0x82,0xd6,0xa8,0x10,0x9e,0xd7,0x84,0x53,0x03,0xeb,0x7c,0xf3,0xd9,0x61}), //:\ProgramData\WindowsTask\AMD.exe
Program.drive_letter + Bfs.Create("aORO2F99DXfhriTyiTUffKHE9wFS0ZpCaulON3E7O3DH8DbT+7ytlEXqKmA2zbn2",
            new byte[] {0x85,0xcc,0x2b,0xfb,0xe3,0x80,0xf9,0x3e,0xc2,0x72,0xc6,0x30,0x84,0x1d,0x59,0xc5,0x10,0x7e,0xc5,0x9a,0xe2,0xce,0x61,0xac,0x37,0x1f,0x29,0x45,0xad,0xc1,0x5d,0xcd},
            new byte[] {0x0c,0x88,0x4a,0xd7,0x06,0xb0,0x5e,0xb1,0x3e,0x25,0xb8,0xcf,0x90,0x38,0x7c,0xf8}), //:\ProgramData\WindowsTask\AppModule.exe
Program.drive_letter + Bfs.Create("/9QH6KVJcFv04SAetY5DC9mCgPJfmivOM84l5pIb+QZKd7F5WpJA5l+KWPc58qFf",
            new byte[] {0x36,0x04,0x42,0x1f,0xd0,0x34,0x4d,0x06,0xa2,0x02,0xf3,0x16,0xe0,0x38,0x50,0x93,0x37,0xe7,0xaa,0x5b,0x16,0xc0,0xe9,0xdc,0x55,0x49,0x57,0xc6,0x37,0x11,0x2d,0x13},
            new byte[] {0xc2,0xa2,0x5b,0x2e,0x1e,0xb4,0xbe,0xf2,0x0d,0xa2,0x1f,0x9d,0xb3,0x92,0xe6,0xde}), //:\ProgramData\WindowsTask\audiodg.exe
Program.drive_letter + Bfs.Create("VuvYTx+F7RO/2G8UiD/+B+lI1LzsqrPETRKcZvFhMrGbimpvVhuJBtPM8OvGOA+Y",
            new byte[] {0xb8,0x84,0x82,0xcb,0xf5,0xd3,0xe8,0x5f,0xca,0x84,0xf1,0x4c,0x27,0x4f,0x79,0x70,0xa4,0xab,0xaf,0xcc,0x96,0x2e,0x13,0xdc,0xe0,0x05,0x86,0x03,0x36,0x4a,0x7d,0xae},
            new byte[] {0x74,0x11,0xa2,0x8e,0xcc,0xcf,0xd8,0x78,0xab,0xd4,0x0c,0x11,0x03,0x19,0xcc,0x53}), //:\ProgramData\WindowsTask\MicrosoftHost.exe
Program.drive_letter + Bfs.Create("WMWigFHlN8PiHa/iQ7/97fbhT8L1rc9vwcb97x5NZ4A=",
            new byte[] {0x1f,0xc8,0x78,0xb8,0xf3,0x24,0x24,0x2a,0xa4,0xd2,0xa3,0x84,0xd2,0x44,0xf9,0xbe,0x23,0x6d,0x6b,0x32,0x56,0x98,0x62,0x29,0xee,0x32,0x83,0x2b,0x09,0x5e,0xe2,0x75},
            new byte[] {0xf7,0x28,0x15,0x51,0xec,0x5b,0x7e,0x53,0xeb,0x8a,0xb7,0x87,0x7c,0x18,0x80,0x5a}), //:\Windows\SysWOW64\unsecapp.exe
};


                    foreach (string process in obfStr4)
                    {
                        RegistryKey key = Registry.LocalMachine.OpenSubKey(obfStr7[9], true);

                        if (key != null)
                        {
                            string[] valueNames = key.GetValueNames();

                            foreach (string valueName in valueNames)
                            {
                                try
                                {
                                    if (valueName.ToString().Equals(process, StringComparison.OrdinalIgnoreCase))
                                    {
                                        if (!Program.ScanOnly)
                                        {
                                            key.DeleteValue(valueName);
                                            Logger.WriteLog($"\t[+] Removed {valueName} exclusion", Logger.success);
                                            affected_items++;
                                        }
                                        else Logger.WriteLog($"\t[!!] Malicious entry {valueName} in WD exclusion", Logger.cautionLow);

                                    }
                                }
                                catch (Exception ex)
                                {
                                    Logger.WriteLog($"[x] Cannot {valueName} exclusion | {ex.Message}", Logger.error);
                                }

                            }

                            key.Close();
                        }
                    }

                    obfStr4.Clear();
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLog("\t" + obfStr7[10] + ex.Message, Logger.error);
            }

            #endregion

            #region WOW6432Node
            try
            {
                RegistryKey AutorunKey = Registry.LocalMachine.OpenSubKey(obfStr7[11], true);
                if (AutorunKey != null)
                {
                    Logger.WriteLog(@"[Reg] Wow64Node Autorun...", ConsoleColor.DarkCyan);

                    List<string> RunKeys = AutorunKey.GetValueNames().ToList();
                    foreach (string value in RunKeys)
                    {
                        string path = utils.ResolveFilePathFromString(AutorunKey, value);
                        if (path == "")
                            continue;

                        if (File.Exists(path))
                        {
                            WinTrust.VerifyEmbeddedSignature(path);
                        }
                        else
                        {
                            Logger.WriteLog($"\t[!] File is not found: {AutorunKey.GetValue(value)} from Key \"{value}\"", Logger.warn);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLog($"\t[!] Cannot open WOW6432?Node\\...\\run: {ex.Message}".Replace("?", ""), Logger.error);
            }
            #endregion

            if (affected_items == 0)
            {
                Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
            }

            if (Program.ScanOnly)
            {
                Logger.WriteLog("\t[i] Scan only mode", ConsoleColor.Blue);
            }
        }
        void ScanTaskScheduler()
        {
            using (TaskService taskService = new TaskService())
            {
                var filteredTasks = taskService.AllTasks
                    .Where(task => task != null)
                    .OrderBy(task => task.Name)
                    .ToList();

                foreach (var task in filteredTasks)
                {
                    string taskName = task.Name;
                    string taskFolder = task.Folder.ToString();

                    foreach (ExecAction action in task.Definition.Actions.OfType<ExecAction>())
                    {
                        string arguments = action.Arguments;
                        string filePath = utils.ResolveEnvironmentVariables(action.Path.Replace("\"", ""));
                        Logger.WriteLog($"[#] Scan: {taskName} | Path: {taskFolder}", ConsoleColor.White);

                        if (!Program.ScanOnly)
                        {
                            if (taskName.StartsWith("dia?ler".Replace("?", "")))
                            {
                                taskService.GetFolder(taskFolder).DeleteTask(taskName);
                                if (taskService.GetTask($"{taskFolder}\\{taskName}") == null)
                                {
                                    Logger.WriteLog($"\t[+] M@alic@iou@s task {taskName} was deleted".Replace("@", ""), Logger.success);
                                    continue;
                                }
                            }
                        }


                        // Check if the file path contains ":\"
                        if (filePath.Contains(":\\"))
                        {
                            if (File.Exists(filePath))
                            {
                                Logger.WriteLog($"\t[.] File: {filePath} {arguments}", ConsoleColor.Gray);
                                ProcessFilePath(filePath, arguments, taskService, taskFolder, taskName);
                            }
                            else
                            {
                                Logger.WriteLog($"\t[!] File does not exist: {filePath}", Logger.warn);


                                if (Program.RemoveEmptyTasks)
                                {
                                    utils.DeleteTask(taskService, taskFolder, taskName);
                                }

                            }
                        }
                        else
                        {
                            // Check in specific directories
                            string[] checkDirectories =
                            {
                                Environment.SystemDirectory, // System32
                                $@"{Program.drive_letter}:\Wind?ows\Sys?WOW?64".Replace("?", ""), // SysWow64
                                $@"{Program.drive_letter}:\W?in?dow?s\Sys?tem?32\wbem".Replace("?",""), // Wbem
                                obfStr7[12], // PowerShell
                            };

                            bool fileFound = false;

                            foreach (string checkDir in checkDirectories)
                            {
                                string fullPath = Path.Combine(checkDir, filePath);
                                if (!fullPath.EndsWith(".exe"))
                                {
                                    fullPath += ".exe";
                                }

                                if (File.Exists(fullPath))
                                {
                                    Logger.WriteLog($"\t[.] File: {fullPath} {arguments}", ConsoleColor.Gray);
                                    ProcessFilePath(fullPath, arguments, taskService, taskFolder, taskName);
                                    fileFound = true;
                                    break; // Exit loop if file is found
                                }
                            }

                            if (!fileFound)
                            {
                                Logger.WriteLog($"\t[!] File does not exist in the specified directories for {filePath}", Logger.warn);

                                if (Program.RemoveEmptyTasks)
                                {
                                    utils.DeleteTask(taskService, taskFolder, taskName);
                                }
                            }


                        }

                        utils.ProccedFileFromArgs(filePath, arguments);

                        // Check for empty tasks
                        if (!Program.RemoveEmptyTasks)
                        {
                            if (utils.IsTaskEmpty(task))
                            {
                                Logger.WriteLog($"\t[!] Empty task {taskName}", Logger.warn);
                                if (!Program.ScanOnly)
                                {
                                    utils.DeleteTask(taskService, taskFolder, taskName);
                                }
                            }
                        }
                    }
                }
            }
        }
        void UnlockDirectory(string directoryPath)
        {
            if (!Directory.Exists(directoryPath))
            {
                return;
            }

            try
            {
                WindowsIdentity currentUser = WindowsIdentity.GetCurrent();
                SecurityIdentifier currentUserIdentity = currentUser.User;

                DirectorySecurity directorySecurity = new DirectorySecurity();
                directorySecurity.SetOwner(currentUserIdentity);

                directorySecurity.SetAccessRuleProtection(true, false);

                AuthorizationRuleCollection accessRules = directorySecurity.GetAccessRules(true, true, typeof(SecurityIdentifier));
                foreach (AuthorizationRule rule in accessRules)
                {
                    if (rule is FileSystemAccessRule fileRule && fileRule.AccessControlType == AccessControlType.Deny)
                    {
                        directorySecurity.RemoveAccessRuleSpecific(fileRule);
                    }
                }

                FileSystemAccessRule currentUserRule = new FileSystemAccessRule(
                    currentUserIdentity,
                    FileSystemRights.FullControl,
                    InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                directorySecurity.AddAccessRule(currentUserRule);

                SecurityIdentifier administratorsGroup = new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null);
                FileSystemAccessRule administratorsRule = new FileSystemAccessRule(
                    administratorsGroup,
                    FileSystemRights.FullControl,
                    InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                directorySecurity.AddAccessRule(administratorsRule);

                SecurityIdentifier usersGroup = new SecurityIdentifier(WellKnownSidType.BuiltinUsersSid, null);
                FileSystemAccessRule usersRule = new FileSystemAccessRule(
                    usersGroup,
                    FileSystemRights.FullControl,
                    InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                directorySecurity.AddAccessRule(usersRule);

                SecurityIdentifier systemIdentity = new SecurityIdentifier(WellKnownSidType.LocalSystemSid, null);
                FileSystemAccessRule systemRule = new FileSystemAccessRule(
                    systemIdentity,
                    FileSystemRights.FullControl,
                    InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                directorySecurity.AddAccessRule(systemRule);

                Directory.SetAccessControl(directoryPath, directorySecurity);


            }
            catch (Exception ex)
            {
                Logger.WriteLog($"\t[x] Error: {ex.Message}", Logger.error);
            }
        }
        void UnlockFile(string filePath)
        {
            if (!File.Exists(filePath))
            {
                return;
            }
            try
            {
                WindowsIdentity currentUser = WindowsIdentity.GetCurrent();
                SecurityIdentifier currentUserIdentity = currentUser.User;

                FileSecurity fileSecurity = new FileSecurity();
                fileSecurity.SetOwner(currentUserIdentity);

                fileSecurity.SetAccessRuleProtection(true, false);

                AuthorizationRuleCollection accessRules = fileSecurity.GetAccessRules(true, true, typeof(SecurityIdentifier));
                foreach (AuthorizationRule rule in accessRules)
                {
                    if (rule is FileSystemAccessRule fileRule && fileRule.AccessControlType == AccessControlType.Deny)
                    {
                        fileSecurity.RemoveAccessRuleSpecific(fileRule);
                    }
                }

                FileSystemAccessRule currentUserRule = new FileSystemAccessRule(
                    currentUserIdentity,
                    FileSystemRights.FullControl,
                    InheritanceFlags.None,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                fileSecurity.AddAccessRule(currentUserRule);

                SecurityIdentifier administratorsGroup = new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null);
                FileSystemAccessRule administratorsRule = new FileSystemAccessRule(
                    administratorsGroup,
                    FileSystemRights.FullControl,
                    InheritanceFlags.None,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                fileSecurity.AddAccessRule(administratorsRule);

                SecurityIdentifier usersGroup = new SecurityIdentifier(WellKnownSidType.BuiltinUsersSid, null);
                FileSystemAccessRule usersRule = new FileSystemAccessRule(
                    usersGroup,
                    FileSystemRights.FullControl,
                    InheritanceFlags.None,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                fileSecurity.AddAccessRule(usersRule);

                SecurityIdentifier systemIdentity = new SecurityIdentifier(WellKnownSidType.LocalSystemSid, null);
                FileSystemAccessRule systemRule = new FileSystemAccessRule(
                    systemIdentity,
                    FileSystemRights.FullControl,
                    InheritanceFlags.None,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                fileSecurity.AddAccessRule(systemRule);

                File.SetAccessControl(filePath, fileSecurity);
            }
            catch (Exception ex)
            {
                Logger.WriteLog($"\t[x] Error: {ex.Message}", Logger.error);
            }
        }
        void ProcessFilePath(string filePath, string arguments, TaskService taskService, string taskFolder, string taskName)
        {
            if (File.Exists(filePath))
            {
                Logger.WriteLog($"\t[.] File: {filePath} {arguments}", ConsoleColor.Gray);

                try
                {
                    if (WinTrust.VerifyEmbeddedSignature(filePath) == WinVerifyTrustResult.Success || new FileInfo(filePath).Length > maxFileSize)
                    {
                        Logger.WriteLog($"\t[OK]", Logger.success, false);
                        return;
                    }

                    if (utils.IsSfxArchive(filePath))
                    {
                        Logger.WriteLog($"\t[!!]SFX Archive: {filePath}", Logger.cautionLow);
                        founded_mlwrPths.Add(filePath);
                        return;
                    }

                    if (utils.CheckSignature(filePath, signatures) || (utils.CheckDynamicSignature(filePath, 16, 100)))
                    {
                        Logger.WriteLog($"FOUND: {filePath}", Logger.caution);
                        founded_mlwrPths.Add(filePath);
                        return;
                    }


                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] TaskScheduler scan error: {ex.Message}", Logger.error);
                }
            }
            else
            {
                Logger.WriteLog($"\t[!] File is not exists: {filePath}", Logger.warn);

                if (Program.RemoveEmptyTasks)
                {
                    utils.DeleteTask(taskService, taskFolder, taskName);
                }
            }
        }

        public static void ScanServices()
        {
            Logger.WriteLog("\t\tStarting scan services...", Logger.head, false);

            // Get all services
            ServiceController[] services = ServiceController.GetServices();
            HashSet<string> trustedPaths = new HashSet<string>();

            foreach (ServiceController service in services)
            {
                string serviceName = service.ServiceName;

                try
                {
                    // Get service status
                    ServiceControllerStatus status = service.Status;

                    // Get service path
                    string servicePathWithArgs = utils.GetServiceImagePath(serviceName);
                    string servicePath = utils.ResolveFilePathFromString(servicePathWithArgs).ToLower();

                    Logger.WriteLog($"[.] Service Name: {serviceName}", ConsoleColor.White);
                    Logger.WriteLog($"[.] Service: {servicePathWithArgs}", ConsoleColor.White);
                    Logger.WriteLog($"[.] Status: {status}", ConsoleColor.White);

                    if (File.Exists(servicePath))
                    {
                        if (!trustedPaths.Contains(servicePath))
                        {
                            if (WinTrust.VerifyEmbeddedSignature(servicePath) != WinVerifyTrustResult.Success)
                            {
                                ServiceStartMode startMode = utils.GetServiceStartType(service.ServiceName);
                                if (startMode != ServiceStartMode.Disabled)
                                {
                                    Logger.WriteLog($"\t[!!!] FOUND: {serviceName} {servicePath}", Logger.caution);
                                }

                                if (!Program.ScanOnly)
                                {
                                    if (status == ServiceControllerStatus.Running)
                                    {
                                        service.Stop();
                                        service.WaitForStatus(ServiceControllerStatus.Stopped);
                                        Logger.WriteLog("\t[+] Service has been stopped", Logger.success);
                                    }

                                    if (startMode != ServiceStartMode.Disabled)
                                    {
                                        utils.SetServiceStartType(service.ServiceName, ServiceStartMode.Disabled);
                                        Logger.WriteLog("\t[+] Service has been disabled", Logger.success);
                                    }
                                }

                            }
                            else
                            {
                                trustedPaths.Add(servicePath);
                                Logger.WriteLog($"\t[+] Service {serviceName}: OK", Logger.success);
                            }
                        }
                        else
                        {
                            Logger.WriteLog($"\t[+] Service {serviceName}: OK", Logger.success);
                            Logger.WriteLog("------------", ConsoleColor.White);
                            continue;
                        }
                    }
                    else
                    {
                        Logger.WriteLog("\t[!] Service file is not found", Logger.warn);
                    }

                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"[x] Error proceed service: {ex.Message}", Logger.error);
                }

                Logger.WriteLog("------------", ConsoleColor.White);
            }

            if (Program.ScanOnly)
            {
                Logger.WriteLog("\t[i] Scan only mode", ConsoleColor.Blue);
            }
        }

        public void SignatureScan()
        {
            List<string> obfStr6 = new List<string>() {
Program.drive_letter + Bfs.Create("aeOH3uZ5MMYGROr7au2zNQ==",
            new byte[] {0xc3,0xce,0xfc,0x49,0x2a,0x1d,0x8b,0x4b,0x31,0xcd,0xca,0x09,0x3a,0x04,0x4b,0x40,0xa3,0x2f,0x71,0xc8,0x5c,0x84,0x40,0xce,0x22,0x34,0xad,0xf2,0x4a,0xa2,0x6d,0x98},
            new byte[] {0xfd,0x9c,0xe0,0x04,0x95,0x26,0x88,0x70,0x98,0x83,0x72,0x9c,0x40,0xf5,0xfb,0xa5}), //:\ProgramData
Program.drive_letter + Bfs.Create("WmAm1GD375FXDmqXrfSy9w==",
            new byte[] {0x6b,0xc3,0xad,0x30,0x9f,0x20,0xa1,0x00,0x1e,0x1f,0x9f,0x04,0x56,0x11,0x8a,0x60,0x43,0xe8,0x17,0x93,0x73,0xd9,0x71,0xb3,0xe5,0xa4,0x0d,0xa3,0xc1,0xe3,0x6d,0x03},
            new byte[] {0xf9,0x20,0x48,0x3e,0xf8,0xa9,0xa7,0x24,0xcf,0xca,0xb7,0x6f,0xed,0xf8,0x4a,0x84}), //:\Program Files
Program.drive_letter + Bfs.Create("JO+3tshWzghBYXek9rRePQTNYJZcyfw5Jtek2X537H0=",
            new byte[] {0xb5,0x0d,0xb6,0x7b,0x70,0x49,0x44,0xc1,0x68,0xaf,0x1d,0xce,0x25,0xaa,0x99,0xd9,0xaf,0x35,0x98,0x22,0x96,0x2f,0x37,0x0b,0x58,0xba,0x4a,0xcd,0x94,0x1a,0x3a,0xf2},
            new byte[] {0x83,0xcd,0xf9,0xe0,0x29,0x67,0xe4,0x60,0xb0,0x2e,0x78,0x65,0x53,0x0d,0x43,0x75}), //:\Program Files (x86)
Program.drive_letter + Bfs.Create("5L/8A1+v3S7e5k2vU5oA0w==",
            new byte[] {0x16,0x77,0x0f,0x4e,0x1f,0x25,0x85,0xfc,0xc6,0x93,0xa3,0x31,0x9d,0xc3,0x2b,0xb2,0xf7,0x08,0xa4,0x77,0x51,0x42,0x64,0x72,0xd7,0x13,0x2b,0xe3,0x72,0x1f,0x38,0xd8},
            new byte[] {0xea,0xcf,0xe3,0x50,0x32,0x72,0x04,0x59,0x0b,0x7d,0x4c,0xd9,0xcd,0xf5,0x63,0xc9}), //:\Windows
};


            if (Program.fullScan)
            {
                DriveInfo[] allDrives = DriveInfo.GetDrives();
                var localDrives = allDrives.Where(drive => drive.DriveType == DriveType.Fixed && !drive.Name.Contains(Environment.SystemDirectory.Substring(0, 2)));
                foreach (var drive in localDrives)
                {
                    obfStr6.Add(drive.Name);
                }
            }

            if (!Program.WinPEMode)
            {
                obfStr6.Add(Path.GetTempPath());
                obfStr6.Add(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
            }

            signatures = utils.RestoreSignatures(signatures);

            foreach (string path in obfStr6)
            {
                if (!Directory.Exists(path))
                {
                    continue;
                }

                List<string> executableFiles = utils.GetFiles(path, "*.exe", 0, Program.maxSubfolders);
                foreach (var filepath in executableFiles)
                {
                    string file = $@"{filepath}";
                    Console.WriteLine($"Analyzing {file}...");
                    try
                    {

                        FileInfo fileInfo = new FileInfo(file);

                        if (fileInfo.Length > maxFileSize)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkGreen;
                            Console.WriteLine("\t[OK]");
                            Console.ForegroundColor = ConsoleColor.White;
                            continue;
                        }

                        WinVerifyTrustResult trustResult = WinTrust.VerifyEmbeddedSignature(file);
                        if (trustResult == WinVerifyTrustResult.Success)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkGreen;
                            Console.WriteLine("\t[OK]");
                            Console.ForegroundColor = ConsoleColor.White;
                            continue;
                        }

                        if (utils.IsSfxArchive(file))
                        {
                            Logger.WriteLog($"\t[!!] SFX Archive: {file}", Logger.cautionLow);
                            continue;
                        }

                        bool sequenceFound = utils.CheckSignature(file, signatures);

                        if (sequenceFound)
                        {
                            Logger.WriteLog($"\tFOUND: {file}", ConsoleColor.Magenta);

                            founded_mlwrPths.Add(file);
                            prevMlwrPths.Add(file);
                            continue;
                        }

                        bool computedSequence = utils.CheckDynamicSignature(file, 16, 100);
                        if (computedSequence)
                        {

                            founded_mlwrPths.Add(file);
                            prevMlwrPths.Add(file);
                            Logger.WriteLog($"\tFOUND: {file}", ConsoleColor.Magenta);
                            continue;
                        }

                        Console.ForegroundColor = ConsoleColor.DarkGreen;
                        Console.WriteLine("\t[OK]");
                        Console.ForegroundColor = ConsoleColor.White;
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLog($"\t[x] Error analyzing file {file}\n{ex.Message}", Logger.error);
                    }
                }
                executableFiles.Clear();
            }
            signatures.Clear();

            if (!Program.ScanOnly && founded_mlwrPths.Count == 0)
            {

                Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);


            }
            else
            {
                if (!Program.ScanOnly)
                {
                    Logger.WriteLog($"\t[!!] Found threats: {founded_mlwrPths.Count}", Logger.cautionLow, false);
                    Logger.WriteLog($"\t[#] Restart cleanup...", ConsoleColor.Blue, false);
                    CleanFoundedMlwr();
                }
                else Logger.WriteLog("\t[i] Scan only mode", ConsoleColor.Blue);
            }
        }

        public void CleanFoundedMlwr()
        {
            if (founded_mlwrPths.Count > 0)
            {
                Logger.WriteLog("\t\tRemoving found mal?ici?ous files...".Replace("?", ""), Logger.head, false);

                if (!Directory.Exists(quarantineFolder))
                {
                    try
                    {
                        Directory.CreateDirectory(quarantineFolder);
                    }
                    catch (Exception)
                    {
                        quarantineFolder = Path.Combine(Environment.CurrentDirectory, $"minerseаrch_quarаntine_{utils.GetRndString()}");
                        Directory.CreateDirectory(quarantineFolder);
                    }
                }

                string prevMlwrPathsLog = Path.Combine(quarantineFolder, $"previousMlwrPaths_{utils.GetRndString()}.txt");

                File.WriteAllLines(prevMlwrPathsLog, prevMlwrPths);

                foreach (string path in founded_mlwrPths)
                {
                    if (File.Exists(path))
                    {

                        byte[] qkey = Encoding.UTF8.GetBytes(Application.ProductVersion.Replace(".", ""));
                        UnlockFile(path);
                        try
                        {
                            File.SetAttributes(path, FileAttributes.Normal);
                            utils.AddToQuarantine(path, Path.Combine(quarantineFolder, Path.GetFileName(path) + $"_{utils.CalculateMD5(path)}.bak"), qkey); //MD5 Hash from original file
                            File.Delete(path);
                            Logger.WriteLog($"\t[+] M~ali~c~i~o~u~s file {path} deleted".Replace("~", ""), Logger.success);

                        }
                        catch (Exception)
                        {
                            Logger.WriteLog($"\t[!!] Cannot delete file {path}", Logger.cautionLow);
                            Logger.WriteLog($"\t[.] Try to unlock directory...", ConsoleColor.White);
                            UnlockDirectory(new FileInfo(path).DirectoryName);
                            try
                            {
                                utils.AddToQuarantine(path, Path.Combine(quarantineFolder, Path.GetFileName(path) + $"_{utils.CalculateMD5(path)}.bak"), qkey);
                                File.Delete(path);
                                if (!File.Exists(path))
                                {
                                    Logger.WriteLog($"\t[+] M~a~l~i~c~i~o~u~s file {path} deleted".Replace("~", ""), Logger.success);
                                }

                            }
                            catch (Exception ex)
                            {
#if DEBUG
                                Logger.WriteLog($"\t[x] cannot delete file {path}\n{ex.Message}\n{ex.StackTrace}", Logger.error);
                                Logger.WriteLog($"\t[.] Try to find blocking process...", ConsoleColor.White);

#else
                                Logger.WriteLog($"\t[x] cannot delete file {path} | {ex.Message}", Logger.error);
                                Logger.WriteLog($"\t[.] Try to find blocking process...", ConsoleColor.White);

#endif
                                try
                                {
                                    try
                                    {
                                        uint processId = utils.GetProcessIdByFilePath(path);

                                        if (processId != 0)
                                        {
                                            Process process = Process.GetProcessById((int)processId);
                                            if (!process.HasExited)
                                            {
                                                process.Kill();
                                                Logger.WriteLog("Blocking process has been terminated", Logger.success);
                                            }
                                        }
                                    }
                                    catch (Exception) { }

                                    utils.AddToQuarantine(path, Path.Combine(quarantineFolder, Path.GetFileName(path) + $"_{utils.CalculateMD5(path)}.bak"), qkey);
                                    File.Delete(path);
                                    if (!File.Exists(path))
                                    {
                                        Logger.WriteLog($"\t[+] Ma?li?ci?ou?s file {path} deleted".Replace("?", ""), Logger.success);
                                    }
                                }
                                catch (Exception)
                                {
                                    Logger.WriteLog($"\t[x] Failed to delete file: {path}\n{ex.Message}", Logger.error);
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                if (!Program.ScanOnly)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }
        }
    }
}
